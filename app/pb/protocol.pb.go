// Code generated by protoc-gen-go. DO NOT EDIT.
// source: app/pb/protocol.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	app/pb/protocol.proto

It has these top-level messages:
	DPeer
	SessionInfo
	UpsertSession
	DMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DPeer struct {
	DId uint64 `protobuf:"varint,1,opt,name=dId" json:"dId,omitempty"`
	PId string `protobuf:"bytes,2,opt,name=pId" json:"pId,omitempty"`
}

func (m *DPeer) Reset()                    { *m = DPeer{} }
func (m *DPeer) String() string            { return proto.CompactTextString(m) }
func (*DPeer) ProtoMessage()               {}
func (*DPeer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DPeer) GetDId() uint64 {
	if m != nil {
		return m.DId
	}
	return 0
}

func (m *DPeer) GetPId() string {
	if m != nil {
		return m.PId
	}
	return ""
}

type SessionInfo struct {
	Owner   *DPeer            `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Type    uint32            `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Name    string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Address uint64            `protobuf:"varint,4,opt,name=address" json:"address,omitempty"`
	Port    uint32            `protobuf:"varint,5,opt,name=port" json:"port,omitempty"`
	Details map[string]string `protobuf:"bytes,6,rep,name=details" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SessionInfo) Reset()                    { *m = SessionInfo{} }
func (m *SessionInfo) String() string            { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()               {}
func (*SessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SessionInfo) GetOwner() *DPeer {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *SessionInfo) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SessionInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SessionInfo) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *SessionInfo) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SessionInfo) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

type UpsertSession struct {
	Info *SessionInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *UpsertSession) Reset()                    { *m = UpsertSession{} }
func (m *UpsertSession) String() string            { return proto.CompactTextString(m) }
func (*UpsertSession) ProtoMessage()               {}
func (*UpsertSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpsertSession) GetInfo() *SessionInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type DMessage struct {
	Version int64 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*DMessage_UpsertSession
	Msg isDMessage_Msg `protobuf_oneof:"msg"`
}

func (m *DMessage) Reset()                    { *m = DMessage{} }
func (m *DMessage) String() string            { return proto.CompactTextString(m) }
func (*DMessage) ProtoMessage()               {}
func (*DMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isDMessage_Msg interface {
	isDMessage_Msg()
}

type DMessage_UpsertSession struct {
	UpsertSession *UpsertSession `protobuf:"bytes,2,opt,name=upsertSession,oneof"`
}

func (*DMessage_UpsertSession) isDMessage_Msg() {}

func (m *DMessage) GetMsg() isDMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *DMessage) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DMessage) GetUpsertSession() *UpsertSession {
	if x, ok := m.GetMsg().(*DMessage_UpsertSession); ok {
		return x.UpsertSession
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DMessage_OneofMarshaler, _DMessage_OneofUnmarshaler, _DMessage_OneofSizer, []interface{}{
		(*DMessage_UpsertSession)(nil),
	}
}

func _DMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DMessage)
	// msg
	switch x := m.Msg.(type) {
	case *DMessage_UpsertSession:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpsertSession); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DMessage.Msg has unexpected type %T", x)
	}
	return nil
}

func _DMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DMessage)
	switch tag {
	case 2: // msg.upsertSession
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpsertSession)
		err := b.DecodeMessage(msg)
		m.Msg = &DMessage_UpsertSession{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DMessage)
	// msg
	switch x := m.Msg.(type) {
	case *DMessage_UpsertSession:
		s := proto.Size(x.UpsertSession)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*DPeer)(nil), "pb.DPeer")
	proto.RegisterType((*SessionInfo)(nil), "pb.SessionInfo")
	proto.RegisterType((*UpsertSession)(nil), "pb.UpsertSession")
	proto.RegisterType((*DMessage)(nil), "pb.DMessage")
}

func init() { proto.RegisterFile("app/pb/protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0x5d, 0x4b, 0x32, 0x41,
	0x14, 0x7e, 0xf7, 0x4b, 0x5f, 0xcf, 0x26, 0xd5, 0x50, 0x30, 0x44, 0x90, 0x6c, 0x37, 0x42, 0xb0,
	0x82, 0x45, 0x94, 0x97, 0x62, 0xa0, 0x17, 0x41, 0x4c, 0xf4, 0x03, 0x76, 0xdb, 0xa3, 0x48, 0x3a,
	0x33, 0xcc, 0x8c, 0x86, 0xff, 0xbc, 0xcb, 0x98, 0xb3, 0x0a, 0x6b, 0x77, 0xcf, 0x39, 0xe7, 0x99,
	0xe7, 0x83, 0x81, 0xcb, 0x42, 0xeb, 0x81, 0x2e, 0x07, 0xda, 0x28, 0xa7, 0x3e, 0xd5, 0x2a, 0x27,
	0xc0, 0x42, 0x5d, 0x66, 0x77, 0x90, 0x4c, 0xde, 0x10, 0x0d, 0x3b, 0x83, 0xa8, 0x9a, 0x55, 0x3c,
	0xe8, 0x05, 0xfd, 0x58, 0x78, 0xe8, 0x37, 0x7a, 0x56, 0xf1, 0xb0, 0x17, 0xf4, 0x3b, 0xc2, 0xc3,
	0xec, 0x27, 0x80, 0xf4, 0x1d, 0xad, 0x5d, 0x2a, 0x39, 0x93, 0x73, 0xc5, 0x6e, 0x20, 0x51, 0xdf,
	0x12, 0x0d, 0xbd, 0x4a, 0x87, 0x9d, 0x5c, 0x97, 0x39, 0xa9, 0x89, 0x7a, 0xcf, 0x18, 0xc4, 0x6e,
	0xa7, 0x91, 0x34, 0xba, 0x82, 0xb0, 0xdf, 0xc9, 0x62, 0x8d, 0x3c, 0x22, 0x5d, 0xc2, 0x8c, 0x43,
	0xbb, 0xa8, 0x2a, 0x83, 0xd6, 0xf2, 0x98, 0x02, 0x1c, 0x46, 0xcf, 0xd6, 0xca, 0x38, 0x9e, 0xd4,
	0x0a, 0x1e, 0xb3, 0x47, 0x68, 0x57, 0xe8, 0x8a, 0xe5, 0xca, 0xf2, 0x56, 0x2f, 0xea, 0xa7, 0xc3,
	0x6b, 0x6f, 0xdc, 0x08, 0x96, 0x4f, 0xea, 0xf3, 0x8b, 0x74, 0x66, 0x27, 0x0e, 0xe4, 0xab, 0x11,
	0x9c, 0x34, 0x0f, 0xbe, 0xe0, 0x17, 0xee, 0x28, 0x7c, 0x47, 0x78, 0xc8, 0x2e, 0x20, 0xd9, 0x16,
	0xab, 0x0d, 0xee, 0x4b, 0xd7, 0xc3, 0x28, 0x7c, 0x0a, 0xb2, 0x07, 0xe8, 0x7e, 0x68, 0x8b, 0xc6,
	0xed, 0x6d, 0xd8, 0x2d, 0xc4, 0x4b, 0x39, 0x57, 0xfb, 0xea, 0xa7, 0x7f, 0x12, 0x08, 0x3a, 0x66,
	0x73, 0xf8, 0x3f, 0x79, 0x45, 0x6b, 0x8b, 0x05, 0x75, 0xdc, 0xa2, 0xf1, 0x04, 0x7a, 0x13, 0x89,
	0xc3, 0xc8, 0x9e, 0xa1, 0xbb, 0x69, 0x6a, 0x93, 0x7b, 0x3a, 0x3c, 0xf7, 0x9a, 0x47, 0xa6, 0xd3,
	0x7f, 0xe2, 0x98, 0x39, 0x4e, 0x20, 0x5a, 0xdb, 0xc5, 0x38, 0x9c, 0x46, 0x65, 0x8b, 0x3e, 0xf5,
	0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x8b, 0x04, 0xa9, 0xed, 0x01, 0x00, 0x00,
}
