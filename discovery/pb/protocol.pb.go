// Code generated by protoc-gen-go. DO NOT EDIT.
// source: discovery/pb/protocol.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	discovery/pb/protocol.proto

It has these top-level messages:
	Hearbeat
	PeerInfo
	Transfer
	Peer
	Peers
	Message
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Hearbeat struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Hearbeat) Reset()                    { *m = Hearbeat{} }
func (m *Hearbeat) String() string            { return proto.CompactTextString(m) }
func (*Hearbeat) ProtoMessage()               {}
func (*Hearbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Hearbeat) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PeerInfo struct {
	Network string            `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Id      string            `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Info    map[string]string `protobuf:"bytes,3,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PeerInfo) Reset()                    { *m = PeerInfo{} }
func (m *PeerInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()               {}
func (*PeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PeerInfo) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *PeerInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PeerInfo) GetInfo() map[string]string {
	if m != nil {
		return m.Info
	}
	return nil
}

type Transfer struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *Transfer) Reset()                    { *m = Transfer{} }
func (m *Transfer) String() string            { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()               {}
func (*Transfer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Transfer) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Peer struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Peer) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Peer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Peers struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *Peers) Reset()                    { *m = Peers{} }
func (m *Peers) String() string            { return proto.CompactTextString(m) }
func (*Peers) ProtoMessage()               {}
func (*Peers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Peers) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Message struct {
	Version int64 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*Message_Heartbeat
	//	*Message_PeerInfo
	//	*Message_Transfer
	//	*Message_Peers
	Msg isMessage_Msg `protobuf_oneof:"msg"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isMessage_Msg interface {
	isMessage_Msg()
}

type Message_Heartbeat struct {
	Heartbeat *Hearbeat `protobuf:"bytes,2,opt,name=heartbeat,oneof"`
}
type Message_PeerInfo struct {
	PeerInfo *PeerInfo `protobuf:"bytes,3,opt,name=peerInfo,oneof"`
}
type Message_Transfer struct {
	Transfer *Transfer `protobuf:"bytes,4,opt,name=transfer,oneof"`
}
type Message_Peers struct {
	Peers *Peers `protobuf:"bytes,5,opt,name=peers,oneof"`
}

func (*Message_Heartbeat) isMessage_Msg() {}
func (*Message_PeerInfo) isMessage_Msg()  {}
func (*Message_Transfer) isMessage_Msg()  {}
func (*Message_Peers) isMessage_Msg()     {}

func (m *Message) GetMsg() isMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Message) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Message) GetHeartbeat() *Hearbeat {
	if x, ok := m.GetMsg().(*Message_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (m *Message) GetPeerInfo() *PeerInfo {
	if x, ok := m.GetMsg().(*Message_PeerInfo); ok {
		return x.PeerInfo
	}
	return nil
}

func (m *Message) GetTransfer() *Transfer {
	if x, ok := m.GetMsg().(*Message_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *Message) GetPeers() *Peers {
	if x, ok := m.GetMsg().(*Message_Peers); ok {
		return x.Peers
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Heartbeat)(nil),
		(*Message_PeerInfo)(nil),
		(*Message_Transfer)(nil),
		(*Message_Peers)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// msg
	switch x := m.Msg.(type) {
	case *Message_Heartbeat:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Heartbeat); err != nil {
			return err
		}
	case *Message_PeerInfo:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PeerInfo); err != nil {
			return err
		}
	case *Message_Transfer:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *Message_Peers:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Peers); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Msg has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 2: // msg.heartbeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Hearbeat)
		err := b.DecodeMessage(msg)
		m.Msg = &Message_Heartbeat{msg}
		return true, err
	case 3: // msg.peerInfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PeerInfo)
		err := b.DecodeMessage(msg)
		m.Msg = &Message_PeerInfo{msg}
		return true, err
	case 4: // msg.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transfer)
		err := b.DecodeMessage(msg)
		m.Msg = &Message_Transfer{msg}
		return true, err
	case 5: // msg.peers
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Peers)
		err := b.DecodeMessage(msg)
		m.Msg = &Message_Peers{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// msg
	switch x := m.Msg.(type) {
	case *Message_Heartbeat:
		s := proto.Size(x.Heartbeat)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PeerInfo:
		s := proto.Size(x.PeerInfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Transfer:
		s := proto.Size(x.Transfer)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Peers:
		s := proto.Size(x.Peers)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Hearbeat)(nil), "pb.Hearbeat")
	proto.RegisterType((*PeerInfo)(nil), "pb.PeerInfo")
	proto.RegisterType((*Transfer)(nil), "pb.Transfer")
	proto.RegisterType((*Peer)(nil), "pb.Peer")
	proto.RegisterType((*Peers)(nil), "pb.Peers")
	proto.RegisterType((*Message)(nil), "pb.Message")
}

func init() { proto.RegisterFile("discovery/pb/protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x92, 0xd1, 0x4a, 0xfb, 0x30,
	0x14, 0xc6, 0xd7, 0xa6, 0xfd, 0xaf, 0x3d, 0xfb, 0x23, 0x12, 0x44, 0x82, 0xc2, 0x98, 0x45, 0x70,
	0x0c, 0xe9, 0x60, 0x5e, 0x28, 0x5e, 0x0e, 0x84, 0x7a, 0x21, 0x48, 0xf0, 0x05, 0xd2, 0x35, 0x9b,
	0x65, 0x5b, 0x13, 0x92, 0x38, 0xd9, 0xa3, 0xf8, 0x5c, 0xbe, 0x90, 0x24, 0x4b, 0xb6, 0x9b, 0xf1,
	0x9d, 0x73, 0x7e, 0xfb, 0x72, 0xce, 0x47, 0xe1, 0xba, 0x69, 0xf5, 0x42, 0xec, 0xb8, 0xda, 0x4f,
	0x65, 0x3d, 0x95, 0x4a, 0x18, 0xb1, 0x10, 0x9b, 0xd2, 0x09, 0x1c, 0xcb, 0xba, 0xb8, 0x85, 0xac,
	0xe2, 0x4c, 0xd5, 0x9c, 0x19, 0x4c, 0xa0, 0xbf, 0xe5, 0x5a, 0xb3, 0x15, 0x27, 0xd1, 0x28, 0x1a,
	0xe7, 0x34, 0x94, 0xc5, 0x4f, 0x04, 0xd9, 0x3b, 0xe7, 0xea, 0xb5, 0x5b, 0x0a, 0x8b, 0x75, 0xdc,
	0x7c, 0x0b, 0xb5, 0x0e, 0x98, 0x2f, 0xf1, 0x19, 0xc4, 0x6d, 0x43, 0x62, 0xd7, 0x8c, 0xdb, 0x06,
	0x4f, 0x20, 0x69, 0xbb, 0xa5, 0x20, 0x68, 0x84, 0xc6, 0x83, 0xd9, 0x65, 0x29, 0xeb, 0x32, 0xb8,
	0x94, 0xf6, 0xe7, 0xa5, 0x33, 0x6a, 0x4f, 0x1d, 0x73, 0xf5, 0x08, 0xf9, 0xb1, 0x85, 0xcf, 0x01,
	0xad, 0xf9, 0xde, 0xdb, 0x5b, 0x89, 0x2f, 0x20, 0xdd, 0xb1, 0xcd, 0x17, 0xf7, 0xee, 0x87, 0xe2,
	0x39, 0x7e, 0x8a, 0x8a, 0x21, 0x64, 0x1f, 0x8a, 0x75, 0x7a, 0xc9, 0x15, 0xc6, 0x90, 0x34, 0xcc,
	0x30, 0xff, 0x47, 0xa7, 0x8b, 0x09, 0x24, 0xf6, 0x51, 0xb7, 0x9c, 0xf4, 0x93, 0xb8, 0x95, 0x96,
	0x95, 0x42, 0x19, 0x67, 0x98, 0x52, 0xa7, 0x8b, 0x3b, 0x48, 0x2d, 0xab, 0xf1, 0x10, 0x52, 0x69,
	0x05, 0x89, 0xdc, 0xea, 0x59, 0x58, 0x9d, 0x1e, 0xda, 0xc5, 0x6f, 0x04, 0xfd, 0xb7, 0x43, 0x38,
	0x36, 0x8f, 0x1d, 0x57, 0xba, 0x15, 0x9d, 0x73, 0x47, 0x34, 0x94, 0xf8, 0x1e, 0xf2, 0x4f, 0xce,
	0x94, 0xb1, 0xe9, 0xba, 0x77, 0x06, 0xb3, 0xff, 0xd6, 0x29, 0x24, 0x5e, 0xf5, 0xe8, 0x09, 0xc0,
	0x13, 0xc8, 0xa4, 0x4f, 0x87, 0xa0, 0x13, 0x1c, 0x12, 0xab, 0x7a, 0xf4, 0x38, 0xb7, 0xac, 0xf1,
	0x47, 0x93, 0xe4, 0xc4, 0x86, 0x20, 0x2c, 0x1b, 0xe6, 0xf8, 0x26, 0xdc, 0x92, 0x3a, 0x30, 0x0f,
	0xa6, 0xba, 0xea, 0xf9, 0x73, 0xe6, 0x29, 0xa0, 0xad, 0x5e, 0xcd, 0xe3, 0x0a, 0xd5, 0xff, 0xdc,
	0xb7, 0xf1, 0xf0, 0x17, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x0b, 0x77, 0x6a, 0x3a, 0x02, 0x00, 0x00,
}
