// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/storage.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// RPC
type RPCWritePeerFileRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	File []byte `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *RPCWritePeerFileRequest) Reset()                    { *m = RPCWritePeerFileRequest{} }
func (m *RPCWritePeerFileRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCWritePeerFileRequest) ProtoMessage()               {}
func (*RPCWritePeerFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *RPCWritePeerFileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RPCWritePeerFileRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type RPCWritePeerFileResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RPCWritePeerFileResponse) Reset()                    { *m = RPCWritePeerFileResponse{} }
func (m *RPCWritePeerFileResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCWritePeerFileResponse) ProtoMessage()               {}
func (*RPCWritePeerFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *RPCWritePeerFileResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RPCGetPeerFileRequest struct {
	PId  string `protobuf:"bytes,1,opt,name=pId" json:"pId,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *RPCGetPeerFileRequest) Reset()                    { *m = RPCGetPeerFileRequest{} }
func (m *RPCGetPeerFileRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCGetPeerFileRequest) ProtoMessage()               {}
func (*RPCGetPeerFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *RPCGetPeerFileRequest) GetPId() string {
	if m != nil {
		return m.PId
	}
	return ""
}

func (m *RPCGetPeerFileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RPCGetPeerFileResponse struct {
	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *RPCGetPeerFileResponse) Reset()                    { *m = RPCGetPeerFileResponse{} }
func (m *RPCGetPeerFileResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCGetPeerFileResponse) ProtoMessage()               {}
func (*RPCGetPeerFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *RPCGetPeerFileResponse) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func init() {
	proto.RegisterType((*RPCWritePeerFileRequest)(nil), "pb.RPCWritePeerFileRequest")
	proto.RegisterType((*RPCWritePeerFileResponse)(nil), "pb.RPCWritePeerFileResponse")
	proto.RegisterType((*RPCGetPeerFileRequest)(nil), "pb.RPCGetPeerFileRequest")
	proto.RegisterType((*RPCGetPeerFileResponse)(nil), "pb.RPCGetPeerFileResponse")
}

func init() { proto.RegisterFile("pb/storage.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x48, 0xd2, 0x2f,
	0x2e, 0xc9, 0x2f, 0x4a, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48,
	0x52, 0x72, 0xe4, 0x12, 0x0f, 0x0a, 0x70, 0x0e, 0x2f, 0xca, 0x2c, 0x49, 0x0d, 0x48, 0x4d, 0x2d,
	0x72, 0xcb, 0xcc, 0x49, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9,
	0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x41, 0x62, 0x69, 0x99,
	0x39, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x60, 0xb6, 0x92, 0x09, 0x97, 0x04, 0xa6,
	0x11, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0xa5, 0xc9, 0xc9, 0xa9,
	0xc5, 0xc5, 0x60, 0x63, 0x38, 0x82, 0x60, 0x5c, 0x25, 0x5b, 0x2e, 0xd1, 0xa0, 0x00, 0x67, 0xf7,
	0xd4, 0x12, 0x74, 0x6b, 0x05, 0xb8, 0x98, 0x0b, 0x3c, 0x53, 0xa0, 0xb6, 0x82, 0x98, 0x70, 0x87,
	0x30, 0x21, 0x1c, 0xa2, 0xa4, 0xc3, 0x25, 0x86, 0xae, 0x1d, 0x6a, 0x25, 0xcc, 0x89, 0x8c, 0x08,
	0x27, 0x26, 0xb1, 0x81, 0x3d, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xfe, 0x18, 0xeb,
	0x04, 0x01, 0x00, 0x00,
}
