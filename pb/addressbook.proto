syntax = "proto3";
package pb;
option optimize_for = LITE_RUNTIME;

message DNPeer {
    string pId = 1;//PeerId
    uint64 dnId = 2;
    map<string, string> details = 3;
}

//DN messages
message DNGetPeerInfoResponse {
    DNPeer info = 1;
}

message DNGetPeerInfoRequest {}

message DNUpdatePeerInfoResponse {
    bool result = 1;
}

message DNUpdatePeerInfoRequest {
    DNPeer info = 1;
}

//RPC messages
message RPCGetAddressBookPeerRequest {
    //If pId == "self". We'll resolve it to our peerId.
    //Either one must be filled in. If both are specified. preference goes to pId
    string pId = 1;
    uint64 dnId = 1;
}

message RPCGetAddressBookPeerResponse {
    DNPeer info = 1;
}

message RPCUpdateAddressBookPeerRequest {
    DNPeer info = 1;
}

message RPCUpdateAddressBookPeerResponse {
    bool result = 1;
}

/*
1. Fetch self.
RPCAddressBookPeerRequest(0, "")
2. Fetch a friend or other peer
RPCAddressBookPeerRequest(steamId, "peerId")
//Have addresses expire after some time.
3. if(!isset(addressbook[peerId])) {
    DNPeerInfoRequest to peerId.
    add it to addressbook.
}
4. return friend info.
*/