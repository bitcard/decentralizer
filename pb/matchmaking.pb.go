// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/matchmaking.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SessionInfo struct {
	DnId      uint64            `protobuf:"varint,1,opt,name=dnId" json:"dnId,omitempty"`
	PId       string            `protobuf:"bytes,2,opt,name=pId" json:"pId,omitempty"`
	SessionId uint64            `protobuf:"varint,3,opt,name=sessionId" json:"sessionId,omitempty"`
	Type      uint64            `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Name      string            `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Address   uint64            `protobuf:"varint,6,opt,name=address" json:"address,omitempty"`
	Port      uint32            `protobuf:"varint,7,opt,name=port" json:"port,omitempty"`
	Details   map[string]string `protobuf:"bytes,8,rep,name=details" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SessionInfo) Reset()                    { *m = SessionInfo{} }
func (m *SessionInfo) String() string            { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()               {}
func (*SessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SessionInfo) GetDnId() uint64 {
	if m != nil {
		return m.DnId
	}
	return 0
}

func (m *SessionInfo) GetPId() string {
	if m != nil {
		return m.PId
	}
	return ""
}

func (m *SessionInfo) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SessionInfo) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SessionInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SessionInfo) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *SessionInfo) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SessionInfo) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

// DN messages
type DNSessionResponse struct {
	Results []*SessionInfo `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *DNSessionResponse) Reset()                    { *m = DNSessionResponse{} }
func (m *DNSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*DNSessionResponse) ProtoMessage()               {}
func (*DNSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *DNSessionResponse) GetResults() []*SessionInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

type DNSessionRequest struct {
	Type uint64 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
}

func (m *DNSessionRequest) Reset()                    { *m = DNSessionRequest{} }
func (m *DNSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*DNSessionRequest) ProtoMessage()               {}
func (*DNSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *DNSessionRequest) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

// RPC messages
// Create/update
type RPCUpsertSessionRequest struct {
	Info *SessionInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *RPCUpsertSessionRequest) Reset()                    { *m = RPCUpsertSessionRequest{} }
func (m *RPCUpsertSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCUpsertSessionRequest) ProtoMessage()               {}
func (*RPCUpsertSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RPCUpsertSessionRequest) GetInfo() *SessionInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type RPCUpsertSessionResponse struct {
	Result    bool   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	SessionId uint64 `protobuf:"varint,2,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *RPCUpsertSessionResponse) Reset()                    { *m = RPCUpsertSessionResponse{} }
func (m *RPCUpsertSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCUpsertSessionResponse) ProtoMessage()               {}
func (*RPCUpsertSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RPCUpsertSessionResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *RPCUpsertSessionResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

// Delete
type RPCDeleteSessionRequest struct {
	SessionId uint64 `protobuf:"varint,1,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *RPCDeleteSessionRequest) Reset()                    { *m = RPCDeleteSessionRequest{} }
func (m *RPCDeleteSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCDeleteSessionRequest) ProtoMessage()               {}
func (*RPCDeleteSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *RPCDeleteSessionRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type RPCDeleteSessionResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *RPCDeleteSessionResponse) Reset()                    { *m = RPCDeleteSessionResponse{} }
func (m *RPCDeleteSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCDeleteSessionResponse) ProtoMessage()               {}
func (*RPCDeleteSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *RPCDeleteSessionResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// Fetch session ids
type RPCSessionIdsRequest struct {
	Type  uint64 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *RPCSessionIdsRequest) Reset()                    { *m = RPCSessionIdsRequest{} }
func (m *RPCSessionIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCSessionIdsRequest) ProtoMessage()               {}
func (*RPCSessionIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *RPCSessionIdsRequest) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RPCSessionIdsRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RPCSessionIdsRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type RPCSessionIdsResponse struct {
	SessionIds []uint64 `protobuf:"varint,1,rep,packed,name=sessionIds" json:"sessionIds,omitempty"`
}

func (m *RPCSessionIdsResponse) Reset()                    { *m = RPCSessionIdsResponse{} }
func (m *RPCSessionIdsResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCSessionIdsResponse) ProtoMessage()               {}
func (*RPCSessionIdsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *RPCSessionIdsResponse) GetSessionIds() []uint64 {
	if m != nil {
		return m.SessionIds
	}
	return nil
}

// Fetch an individual session
type RPCGetSessionRequest struct {
	SessionId uint64 `protobuf:"varint,1,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *RPCGetSessionRequest) Reset()                    { *m = RPCGetSessionRequest{} }
func (m *RPCGetSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCGetSessionRequest) ProtoMessage()               {}
func (*RPCGetSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *RPCGetSessionRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type RPCGetSessionResponse struct {
	Found  bool         `protobuf:"varint,1,opt,name=found" json:"found,omitempty"`
	Result *SessionInfo `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *RPCGetSessionResponse) Reset()                    { *m = RPCGetSessionResponse{} }
func (m *RPCGetSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCGetSessionResponse) ProtoMessage()               {}
func (*RPCGetSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *RPCGetSessionResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *RPCGetSessionResponse) GetResult() *SessionInfo {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionInfo)(nil), "pb.SessionInfo")
	proto.RegisterType((*DNSessionResponse)(nil), "pb.DNSessionResponse")
	proto.RegisterType((*DNSessionRequest)(nil), "pb.DNSessionRequest")
	proto.RegisterType((*RPCUpsertSessionRequest)(nil), "pb.RPCUpsertSessionRequest")
	proto.RegisterType((*RPCUpsertSessionResponse)(nil), "pb.RPCUpsertSessionResponse")
	proto.RegisterType((*RPCDeleteSessionRequest)(nil), "pb.RPCDeleteSessionRequest")
	proto.RegisterType((*RPCDeleteSessionResponse)(nil), "pb.RPCDeleteSessionResponse")
	proto.RegisterType((*RPCSessionIdsRequest)(nil), "pb.RPCSessionIdsRequest")
	proto.RegisterType((*RPCSessionIdsResponse)(nil), "pb.RPCSessionIdsResponse")
	proto.RegisterType((*RPCGetSessionRequest)(nil), "pb.RPCGetSessionRequest")
	proto.RegisterType((*RPCGetSessionResponse)(nil), "pb.RPCGetSessionResponse")
}

func init() { proto.RegisterFile("pb/matchmaking.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x51, 0x8b, 0x13, 0x31,
	0x10, 0x66, 0xb3, 0xdb, 0xf6, 0x3a, 0xa7, 0x78, 0x86, 0xaa, 0x41, 0x0e, 0x29, 0x11, 0xb4, 0xbe,
	0x54, 0x38, 0xc5, 0x93, 0x7b, 0xb8, 0x07, 0xaf, 0xa2, 0x7d, 0x91, 0x12, 0xd1, 0xf7, 0xad, 0x99,
	0x6a, 0xb9, 0x36, 0x89, 0x9b, 0x54, 0xe8, 0x6f, 0xf1, 0xcf, 0xca, 0xce, 0x66, 0x7b, 0x7b, 0x6b,
	0x29, 0xdc, 0xdb, 0x4c, 0x66, 0xbe, 0x99, 0xef, 0x9b, 0x8f, 0xc0, 0xc0, 0xcd, 0x5f, 0xaf, 0xf3,
	0xf0, 0xe3, 0xd7, 0x3a, 0xbf, 0x5e, 0x9a, 0x9f, 0x63, 0x57, 0xd8, 0x60, 0x39, 0x73, 0x73, 0xf9,
	0x97, 0xc1, 0xf1, 0x57, 0xf4, 0x7e, 0x69, 0xcd, 0xd4, 0x2c, 0x2c, 0xe7, 0x90, 0x69, 0x33, 0xd5,
	0x22, 0x19, 0x26, 0xa3, 0x4c, 0x51, 0xcc, 0x4f, 0x20, 0x75, 0x53, 0x2d, 0xd8, 0x30, 0x19, 0xf5,
	0x55, 0x19, 0xf2, 0x53, 0xe8, 0xfb, 0x08, 0xd2, 0x22, 0xa5, 0xd6, 0x9b, 0x87, 0x72, 0x46, 0xd8,
	0x3a, 0x14, 0x59, 0x35, 0xa3, 0x8c, 0xcb, 0x37, 0x93, 0xaf, 0x51, 0x74, 0x68, 0x08, 0xc5, 0x5c,
	0x40, 0x2f, 0xd7, 0xba, 0x40, 0xef, 0x45, 0x97, 0x5a, 0xeb, 0xb4, 0xec, 0x76, 0xb6, 0x08, 0xa2,
	0x37, 0x4c, 0x46, 0xf7, 0x15, 0xc5, 0xfc, 0x1d, 0xf4, 0x34, 0x86, 0x7c, 0xb9, 0xf2, 0xe2, 0x68,
	0x98, 0x8e, 0x8e, 0xcf, 0x4e, 0xc7, 0x6e, 0x3e, 0x6e, 0x70, 0x1f, 0x4f, 0xaa, 0xf2, 0x47, 0x13,
	0x8a, 0xad, 0xaa, 0x9b, 0x9f, 0x5e, 0xc0, 0xbd, 0x66, 0xa1, 0x54, 0x73, 0x8d, 0x5b, 0x12, 0xd8,
	0x57, 0x65, 0xc8, 0x07, 0xd0, 0xf9, 0x93, 0xaf, 0x36, 0x18, 0x15, 0x56, 0xc9, 0x05, 0x7b, 0x9f,
	0xc8, 0x4b, 0x78, 0x38, 0xf9, 0x12, 0x57, 0x28, 0xf4, 0xce, 0x1a, 0x8f, 0xfc, 0x15, 0xf4, 0x0a,
	0xf4, 0x9b, 0x55, 0xf0, 0x22, 0x21, 0x22, 0x0f, 0x5a, 0x44, 0x54, 0x5d, 0x97, 0x2f, 0xe0, 0xa4,
	0x81, 0xff, 0xbd, 0x41, 0x1f, 0x76, 0xd7, 0x49, 0x6e, 0xae, 0x23, 0x2f, 0xe1, 0x89, 0x9a, 0x5d,
	0x7d, 0x73, 0x1e, 0x8b, 0xd0, 0x6a, 0x7f, 0x0e, 0xd9, 0xd2, 0x2c, 0x2c, 0xb5, 0xef, 0x59, 0x45,
	0x45, 0x39, 0x03, 0xf1, 0x3f, 0x3e, 0xd2, 0x7d, 0x0c, 0xdd, 0x8a, 0x0e, 0x8d, 0x38, 0x52, 0x31,
	0xbb, 0xed, 0x21, 0x6b, 0x79, 0x28, 0xcf, 0x89, 0xd1, 0x04, 0x57, 0x18, 0xb0, 0xc5, 0xe8, 0x16,
	0x30, 0x69, 0x03, 0xcf, 0x88, 0x4a, 0x0b, 0x78, 0x98, 0x8a, 0x54, 0x30, 0x50, 0xb3, 0xab, 0x5a,
	0x96, 0xf6, 0x07, 0x4e, 0x55, 0xdb, 0xc7, 0xf6, 0xd8, 0x97, 0x36, 0xec, 0x93, 0xe7, 0xf0, 0xa8,
	0x35, 0x33, 0x92, 0x78, 0x06, 0xb0, 0x63, 0x5b, 0x39, 0x98, 0xa9, 0xc6, 0x8b, 0x7c, 0x4b, 0x64,
	0x3e, 0x61, 0xb8, 0x93, 0xec, 0xef, 0xb4, 0xae, 0x89, 0x8a, 0xeb, 0x06, 0xd0, 0x59, 0xd8, 0x8d,
	0xd1, 0x51, 0x72, 0x95, 0xf0, 0x97, 0xbb, 0x4b, 0xb0, 0xfd, 0xbe, 0xc6, 0xf2, 0x07, 0xf6, 0x39,
	0x9d, 0x77, 0xe9, 0xbb, 0xbe, 0xf9, 0x17, 0x00, 0x00, 0xff, 0xff, 0x91, 0x4e, 0x30, 0x2e, 0xc6,
	0x03, 0x00, 0x00,
}
