// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/matchmaking.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Session struct {
	PId       string            `protobuf:"bytes,1,opt,name=pId" json:"pId,omitempty"`
	DnId      uint64            `protobuf:"varint,2,opt,name=dnId" json:"dnId,omitempty"`
	SessionId uint64            `protobuf:"varint,3,opt,name=sessionId" json:"sessionId,omitempty"`
	Type      uint64            `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Name      string            `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Address   uint32            `protobuf:"varint,6,opt,name=address" json:"address,omitempty"`
	Port      uint32            `protobuf:"varint,7,opt,name=port" json:"port,omitempty"`
	Details   map[string]string `protobuf:"bytes,8,rep,name=details" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Session) GetPId() string {
	if m != nil {
		return m.PId
	}
	return ""
}

func (m *Session) GetDnId() uint64 {
	if m != nil {
		return m.DnId
	}
	return 0
}

func (m *Session) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *Session) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Session) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Session) GetAddress() uint32 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *Session) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Session) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

// DN messages
type DNSessionResponse struct {
	Results []*Session `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *DNSessionResponse) Reset()                    { *m = DNSessionResponse{} }
func (m *DNSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*DNSessionResponse) ProtoMessage()               {}
func (*DNSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *DNSessionResponse) GetResults() []*Session {
	if m != nil {
		return m.Results
	}
	return nil
}

type DNSessionRequest struct {
	Type uint64 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
}

func (m *DNSessionRequest) Reset()                    { *m = DNSessionRequest{} }
func (m *DNSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*DNSessionRequest) ProtoMessage()               {}
func (*DNSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *DNSessionRequest) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

// Upsert
type RPCUpsertSessionRequest struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *RPCUpsertSessionRequest) Reset()                    { *m = RPCUpsertSessionRequest{} }
func (m *RPCUpsertSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCUpsertSessionRequest) ProtoMessage()               {}
func (*RPCUpsertSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RPCUpsertSessionRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type RPCUpsertSessionResponse struct {
	SessionId uint64 `protobuf:"varint,1,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *RPCUpsertSessionResponse) Reset()                    { *m = RPCUpsertSessionResponse{} }
func (m *RPCUpsertSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCUpsertSessionResponse) ProtoMessage()               {}
func (*RPCUpsertSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RPCUpsertSessionResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

// Delete
type RPCDeleteSessionRequest struct {
	SessionId uint64 `protobuf:"varint,1,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *RPCDeleteSessionRequest) Reset()                    { *m = RPCDeleteSessionRequest{} }
func (m *RPCDeleteSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCDeleteSessionRequest) ProtoMessage()               {}
func (*RPCDeleteSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *RPCDeleteSessionRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type RPCDeleteSessionResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *RPCDeleteSessionResponse) Reset()                    { *m = RPCDeleteSessionResponse{} }
func (m *RPCDeleteSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCDeleteSessionResponse) ProtoMessage()               {}
func (*RPCDeleteSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *RPCDeleteSessionResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// Get session ids
type RPCGetSessionIdsRequest struct {
	Type  uint64 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *RPCGetSessionIdsRequest) Reset()                    { *m = RPCGetSessionIdsRequest{} }
func (m *RPCGetSessionIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCGetSessionIdsRequest) ProtoMessage()               {}
func (*RPCGetSessionIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *RPCGetSessionIdsRequest) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RPCGetSessionIdsRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RPCGetSessionIdsRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type RPCGetSessionIdsResponse struct {
	SessionIds []uint64 `protobuf:"varint,1,rep,packed,name=sessionIds" json:"sessionIds,omitempty"`
}

func (m *RPCGetSessionIdsResponse) Reset()                    { *m = RPCGetSessionIdsResponse{} }
func (m *RPCGetSessionIdsResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCGetSessionIdsResponse) ProtoMessage()               {}
func (*RPCGetSessionIdsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *RPCGetSessionIdsResponse) GetSessionIds() []uint64 {
	if m != nil {
		return m.SessionIds
	}
	return nil
}

// Fetch an individual session
type RPCGetSessionRequest struct {
	SessionId uint64 `protobuf:"varint,1,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *RPCGetSessionRequest) Reset()                    { *m = RPCGetSessionRequest{} }
func (m *RPCGetSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCGetSessionRequest) ProtoMessage()               {}
func (*RPCGetSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *RPCGetSessionRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type RPCGetSessionResponse struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *RPCGetSessionResponse) Reset()                    { *m = RPCGetSessionResponse{} }
func (m *RPCGetSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCGetSessionResponse) ProtoMessage()               {}
func (*RPCGetSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *RPCGetSessionResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func init() {
	proto.RegisterType((*Session)(nil), "pb.Session")
	proto.RegisterType((*DNSessionResponse)(nil), "pb.DNSessionResponse")
	proto.RegisterType((*DNSessionRequest)(nil), "pb.DNSessionRequest")
	proto.RegisterType((*RPCUpsertSessionRequest)(nil), "pb.RPCUpsertSessionRequest")
	proto.RegisterType((*RPCUpsertSessionResponse)(nil), "pb.RPCUpsertSessionResponse")
	proto.RegisterType((*RPCDeleteSessionRequest)(nil), "pb.RPCDeleteSessionRequest")
	proto.RegisterType((*RPCDeleteSessionResponse)(nil), "pb.RPCDeleteSessionResponse")
	proto.RegisterType((*RPCGetSessionIdsRequest)(nil), "pb.RPCGetSessionIdsRequest")
	proto.RegisterType((*RPCGetSessionIdsResponse)(nil), "pb.RPCGetSessionIdsResponse")
	proto.RegisterType((*RPCGetSessionRequest)(nil), "pb.RPCGetSessionRequest")
	proto.RegisterType((*RPCGetSessionResponse)(nil), "pb.RPCGetSessionResponse")
}

func init() { proto.RegisterFile("pb/matchmaking.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x51, 0x8b, 0xd3, 0x40,
	0x10, 0x66, 0x93, 0x5c, 0x73, 0x9d, 0x53, 0x38, 0x97, 0xaa, 0x8b, 0x88, 0x84, 0x85, 0x93, 0x3c,
	0x45, 0xa8, 0x82, 0x47, 0x1e, 0x44, 0xb0, 0x22, 0x79, 0x11, 0x59, 0xe9, 0x0f, 0x48, 0xdc, 0x41,
	0x4b, 0xd3, 0x64, 0xcd, 0x6e, 0x85, 0xfc, 0x0e, 0xff, 0xb0, 0x64, 0xb3, 0x69, 0xd3, 0x78, 0x94,
	0xbe, 0xcd, 0xce, 0xcc, 0x37, 0xdf, 0x37, 0xf3, 0x25, 0xb0, 0x50, 0xc5, 0x9b, 0x5d, 0x6e, 0x7e,
	0xfc, 0xda, 0xe5, 0xdb, 0x4d, 0xf5, 0x33, 0x51, 0x4d, 0x6d, 0x6a, 0xea, 0xa9, 0x82, 0xff, 0xf5,
	0x20, 0xfc, 0x8e, 0x5a, 0x6f, 0xea, 0x8a, 0xde, 0x82, 0xaf, 0x32, 0xc9, 0x48, 0x44, 0xe2, 0xb9,
	0xe8, 0x42, 0x4a, 0x21, 0x90, 0x55, 0x26, 0x99, 0x17, 0x91, 0x38, 0x10, 0x36, 0xa6, 0x2f, 0x61,
	0xae, 0x7b, 0x40, 0x26, 0x99, 0x6f, 0x0b, 0xc7, 0x44, 0x87, 0x30, 0xad, 0x42, 0x16, 0xf4, 0x88,
	0x2e, 0xee, 0x72, 0x55, 0xbe, 0x43, 0x76, 0x65, 0x07, 0xdb, 0x98, 0x32, 0x08, 0x73, 0x29, 0x1b,
	0xd4, 0x9a, 0xcd, 0x22, 0x12, 0x3f, 0x16, 0xc3, 0xb3, 0xeb, 0x56, 0x75, 0x63, 0x58, 0x68, 0xd3,
	0x36, 0xa6, 0x4b, 0x08, 0x25, 0x9a, 0x7c, 0x53, 0x6a, 0x76, 0x1d, 0xf9, 0xf1, 0xcd, 0x92, 0x25,
	0xaa, 0x48, 0x9c, 0xee, 0x64, 0xd5, 0x97, 0x3e, 0x57, 0xa6, 0x69, 0xc5, 0xd0, 0xf8, 0x22, 0x85,
	0x47, 0xe3, 0x42, 0xb7, 0xdd, 0x16, 0xdb, 0x61, 0xbb, 0x2d, 0xb6, 0x74, 0x01, 0x57, 0x7f, 0xf2,
	0x72, 0x8f, 0x76, 0xbd, 0xb9, 0xe8, 0x1f, 0xa9, 0x77, 0x4f, 0x78, 0x0a, 0x4f, 0x56, 0x5f, 0xdd,
	0x78, 0x81, 0x5a, 0xd5, 0x95, 0x46, 0x7a, 0x07, 0x61, 0x83, 0x7a, 0x5f, 0x1a, 0xcd, 0x88, 0x15,
	0x71, 0x33, 0x12, 0x21, 0x86, 0x1a, 0x7f, 0x0d, 0xb7, 0x23, 0xec, 0xef, 0x3d, 0x6a, 0x73, 0xb8,
	0x0a, 0x39, 0x5e, 0x85, 0x7f, 0x84, 0xe7, 0xe2, 0xdb, 0xa7, 0xb5, 0xd2, 0xd8, 0x98, 0x49, 0xfb,
	0x1d, 0x84, 0xee, 0xa2, 0x16, 0x31, 0x65, 0x72, 0x35, 0x7e, 0x0f, 0xec, 0xff, 0x09, 0x4e, 0xec,
	0x89, 0x4b, 0x64, 0xe2, 0x12, 0x7f, 0x6f, 0xb9, 0x57, 0x58, 0xa2, 0xc1, 0x09, 0xf7, 0x79, 0xe0,
	0xd2, 0x52, 0x4e, 0x80, 0x8e, 0xf2, 0x19, 0xcc, 0xfa, 0x1b, 0x58, 0xd8, 0xb5, 0x70, 0x2f, 0xbe,
	0xb6, 0x64, 0x5f, 0x70, 0xd0, 0x98, 0x49, 0x7d, 0xe6, 0x2e, 0x83, 0x4f, 0xde, 0x03, 0x3e, 0xf9,
	0x23, 0x9f, 0x78, 0x6a, 0xa5, 0x4c, 0xc6, 0x3a, 0x29, 0xaf, 0x00, 0x0e, 0x9a, 0x7b, 0xb7, 0x02,
	0x31, 0xca, 0xf0, 0x77, 0xb0, 0x38, 0xc1, 0x5e, 0xb6, 0xfc, 0x07, 0x78, 0x3a, 0x41, 0x1d, 0xbf,
	0x8c, 0x0b, 0xfc, 0x2a, 0x66, 0xf6, 0xb7, 0x7b, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x96,
	0x85, 0x45, 0x8e, 0x03, 0x00, 0x00,
}
