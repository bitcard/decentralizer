// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/matchmaking.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/matchmaking.proto
	pb/platform.proto

It has these top-level messages:
	SessionInfo
	DNSessionResponse
	DNSessionRequest
	RPCUpsertSessionRequest
	RPCUpsertSessionResponse
	RPCDeleteSessionRequest
	RPCDeleteSessionResponse
	RPCSessionIdsRequest
	RPCSessionIdsResponse
	RPCGetSessionRequest
	RPCGetSessionResponse
	RPCHealthRequest
	RPCHealthReply
	RPCMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionInfo struct {
	DnId      uint64            `protobuf:"varint,1,opt,name=dnId" json:"dnId,omitempty"`
	PId       string            `protobuf:"bytes,2,opt,name=pId" json:"pId,omitempty"`
	SessionId uint64            `protobuf:"varint,3,opt,name=sessionId" json:"sessionId,omitempty"`
	Type      uint64            `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Name      string            `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Address   uint64            `protobuf:"varint,6,opt,name=address" json:"address,omitempty"`
	Port      uint32            `protobuf:"varint,7,opt,name=port" json:"port,omitempty"`
	Details   map[string]string `protobuf:"bytes,8,rep,name=details" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SessionInfo) Reset()                    { *m = SessionInfo{} }
func (m *SessionInfo) String() string            { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()               {}
func (*SessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SessionInfo) GetDnId() uint64 {
	if m != nil {
		return m.DnId
	}
	return 0
}

func (m *SessionInfo) GetPId() string {
	if m != nil {
		return m.PId
	}
	return ""
}

func (m *SessionInfo) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SessionInfo) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SessionInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SessionInfo) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *SessionInfo) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SessionInfo) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

// DN messages
type DNSessionResponse struct {
	Results []*SessionInfo `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *DNSessionResponse) Reset()                    { *m = DNSessionResponse{} }
func (m *DNSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*DNSessionResponse) ProtoMessage()               {}
func (*DNSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DNSessionResponse) GetResults() []*SessionInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

type DNSessionRequest struct {
	Type uint64 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
}

func (m *DNSessionRequest) Reset()                    { *m = DNSessionRequest{} }
func (m *DNSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*DNSessionRequest) ProtoMessage()               {}
func (*DNSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DNSessionRequest) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

// RPC messages
// Create/update
type RPCUpsertSessionRequest struct {
	Info *SessionInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *RPCUpsertSessionRequest) Reset()                    { *m = RPCUpsertSessionRequest{} }
func (m *RPCUpsertSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCUpsertSessionRequest) ProtoMessage()               {}
func (*RPCUpsertSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RPCUpsertSessionRequest) GetInfo() *SessionInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type RPCUpsertSessionResponse struct {
	Result    bool   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	SessionId uint64 `protobuf:"varint,2,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *RPCUpsertSessionResponse) Reset()                    { *m = RPCUpsertSessionResponse{} }
func (m *RPCUpsertSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCUpsertSessionResponse) ProtoMessage()               {}
func (*RPCUpsertSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RPCUpsertSessionResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *RPCUpsertSessionResponse) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

// Delete
type RPCDeleteSessionRequest struct {
	SessionId uint64 `protobuf:"varint,1,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *RPCDeleteSessionRequest) Reset()                    { *m = RPCDeleteSessionRequest{} }
func (m *RPCDeleteSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCDeleteSessionRequest) ProtoMessage()               {}
func (*RPCDeleteSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RPCDeleteSessionRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type RPCDeleteSessionResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *RPCDeleteSessionResponse) Reset()                    { *m = RPCDeleteSessionResponse{} }
func (m *RPCDeleteSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCDeleteSessionResponse) ProtoMessage()               {}
func (*RPCDeleteSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RPCDeleteSessionResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// Fetch session ids
type RPCSessionIdsRequest struct {
	Type    uint64            `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Details map[string]string `protobuf:"bytes,2,rep,name=details" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RPCSessionIdsRequest) Reset()                    { *m = RPCSessionIdsRequest{} }
func (m *RPCSessionIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCSessionIdsRequest) ProtoMessage()               {}
func (*RPCSessionIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RPCSessionIdsRequest) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RPCSessionIdsRequest) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

type RPCSessionIdsResponse struct {
	SessionId []uint64 `protobuf:"varint,1,rep,packed,name=sessionId" json:"sessionId,omitempty"`
}

func (m *RPCSessionIdsResponse) Reset()                    { *m = RPCSessionIdsResponse{} }
func (m *RPCSessionIdsResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCSessionIdsResponse) ProtoMessage()               {}
func (*RPCSessionIdsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RPCSessionIdsResponse) GetSessionId() []uint64 {
	if m != nil {
		return m.SessionId
	}
	return nil
}

// Fetch an individual session
type RPCGetSessionRequest struct {
	SessionId []uint64 `protobuf:"varint,1,rep,packed,name=sessionId" json:"sessionId,omitempty"`
}

func (m *RPCGetSessionRequest) Reset()                    { *m = RPCGetSessionRequest{} }
func (m *RPCGetSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCGetSessionRequest) ProtoMessage()               {}
func (*RPCGetSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RPCGetSessionRequest) GetSessionId() []uint64 {
	if m != nil {
		return m.SessionId
	}
	return nil
}

type RPCGetSessionResponse struct {
	Found  bool         `protobuf:"varint,1,opt,name=found" json:"found,omitempty"`
	Result *SessionInfo `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *RPCGetSessionResponse) Reset()                    { *m = RPCGetSessionResponse{} }
func (m *RPCGetSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCGetSessionResponse) ProtoMessage()               {}
func (*RPCGetSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RPCGetSessionResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *RPCGetSessionResponse) GetResult() *SessionInfo {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionInfo)(nil), "pb.SessionInfo")
	proto.RegisterType((*DNSessionResponse)(nil), "pb.DNSessionResponse")
	proto.RegisterType((*DNSessionRequest)(nil), "pb.DNSessionRequest")
	proto.RegisterType((*RPCUpsertSessionRequest)(nil), "pb.RPCUpsertSessionRequest")
	proto.RegisterType((*RPCUpsertSessionResponse)(nil), "pb.RPCUpsertSessionResponse")
	proto.RegisterType((*RPCDeleteSessionRequest)(nil), "pb.RPCDeleteSessionRequest")
	proto.RegisterType((*RPCDeleteSessionResponse)(nil), "pb.RPCDeleteSessionResponse")
	proto.RegisterType((*RPCSessionIdsRequest)(nil), "pb.RPCSessionIdsRequest")
	proto.RegisterType((*RPCSessionIdsResponse)(nil), "pb.RPCSessionIdsResponse")
	proto.RegisterType((*RPCGetSessionRequest)(nil), "pb.RPCGetSessionRequest")
	proto.RegisterType((*RPCGetSessionResponse)(nil), "pb.RPCGetSessionResponse")
}

func init() { proto.RegisterFile("pb/matchmaking.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0x95, 0x77, 0xf3, 0xd1, 0x4c, 0x41, 0x14, 0x2b, 0x80, 0x85, 0x7a, 0x88, 0x16, 0x01, 0xe1,
	0x12, 0xa4, 0xf2, 0xa9, 0x1e, 0x8a, 0x44, 0x83, 0x20, 0x17, 0x14, 0x19, 0xc1, 0x7d, 0x83, 0x27,
	0x10, 0x35, 0xb1, 0xcd, 0xda, 0x41, 0xca, 0x6f, 0xe1, 0x07, 0xf0, 0x37, 0x91, 0x67, 0x9d, 0x26,
	0x31, 0x51, 0x6e, 0xbd, 0xcd, 0xec, 0xcc, 0x9b, 0x79, 0xef, 0x79, 0xb4, 0xd0, 0xb5, 0x93, 0xe7,
	0x8b, 0xd2, 0x7f, 0xff, 0xb9, 0x28, 0xaf, 0x66, 0xfa, 0xc7, 0xc0, 0x56, 0xc6, 0x1b, 0x9e, 0xd9,
	0x49, 0xf1, 0x27, 0x83, 0xe3, 0x2f, 0xe8, 0xdc, 0xcc, 0xe8, 0x91, 0x9e, 0x1a, 0xce, 0xa1, 0xa1,
	0xf4, 0x48, 0x09, 0xd6, 0x63, 0xfd, 0x86, 0xa4, 0x98, 0x9f, 0x40, 0x6e, 0x47, 0x4a, 0x64, 0x3d,
	0xd6, 0xef, 0xc8, 0x10, 0xf2, 0x53, 0xe8, 0xb8, 0x08, 0x52, 0x22, 0xa7, 0xd6, 0xcd, 0x87, 0x30,
	0xc3, 0xaf, 0x2c, 0x8a, 0x46, 0x3d, 0x23, 0xc4, 0xe1, 0x9b, 0x2e, 0x17, 0x28, 0x9a, 0x34, 0x84,
	0x62, 0x2e, 0xa0, 0x5d, 0x2a, 0x55, 0xa1, 0x73, 0xa2, 0x45, 0xad, 0xeb, 0x34, 0x74, 0x5b, 0x53,
	0x79, 0xd1, 0xee, 0xb1, 0xfe, 0x6d, 0x49, 0x31, 0x7f, 0x0d, 0x6d, 0x85, 0xbe, 0x9c, 0xcd, 0x9d,
	0x38, 0xea, 0xe5, 0xfd, 0xe3, 0xb3, 0xd3, 0x81, 0x9d, 0x0c, 0xb6, 0xb8, 0x0f, 0x86, 0x75, 0xf9,
	0x83, 0xf6, 0xd5, 0x4a, 0xae, 0x9b, 0x1f, 0x9e, 0xc3, 0xad, 0xed, 0x42, 0x50, 0x73, 0x85, 0x2b,
	0x12, 0xd8, 0x91, 0x21, 0xe4, 0x5d, 0x68, 0xfe, 0x2e, 0xe7, 0x4b, 0x8c, 0x0a, 0xeb, 0xe4, 0x3c,
	0x7b, 0xcb, 0x8a, 0x0b, 0xb8, 0x3b, 0xfc, 0x1c, 0x57, 0x48, 0x74, 0xd6, 0x68, 0x87, 0xfc, 0x19,
	0xb4, 0x2b, 0x74, 0xcb, 0xb9, 0x77, 0x82, 0x11, 0x91, 0x3b, 0x09, 0x11, 0xb9, 0xae, 0x17, 0x4f,
	0xe0, 0x64, 0x0b, 0xff, 0x6b, 0x89, 0xce, 0x5f, 0xbb, 0xc3, 0x36, 0xee, 0x14, 0x17, 0xf0, 0x40,
	0x8e, 0x2f, 0xbf, 0x5a, 0x87, 0x95, 0x4f, 0xda, 0x1f, 0x41, 0x63, 0xa6, 0xa7, 0x86, 0xda, 0xf7,
	0xac, 0xa2, 0x62, 0x31, 0x06, 0xf1, 0x3f, 0x3e, 0xd2, 0xbd, 0x0f, 0xad, 0x9a, 0x0e, 0x8d, 0x38,
	0x92, 0x31, 0xdb, 0x7d, 0xc3, 0x2c, 0x79, 0xc3, 0xe2, 0x0d, 0x31, 0x1a, 0xe2, 0x1c, 0x3d, 0x26,
	0x8c, 0x76, 0x80, 0x2c, 0x05, 0x9e, 0x11, 0x95, 0x04, 0x78, 0x98, 0x4a, 0xf1, 0x97, 0x41, 0x57,
	0x8e, 0x2f, 0xd7, 0xba, 0x94, 0x3b, 0xe0, 0x15, 0x7f, 0xb7, 0xb9, 0x83, 0x8c, 0xec, 0x7f, 0x1c,
	0x3c, 0xd9, 0x07, 0xbf, 0x81, 0x83, 0x78, 0x05, 0xf7, 0x92, 0x4d, 0x51, 0x5a, 0x62, 0x4a, 0xbe,
	0x6b, 0xca, 0x4b, 0xd2, 0xf7, 0x11, 0xfd, 0x61, 0x2b, 0x13, 0xd4, 0x37, 0x5a, 0xb6, 0x8d, 0x8a,
	0xcb, 0xba, 0xd0, 0x9c, 0x9a, 0xa5, 0x56, 0xd1, 0xc6, 0x3a, 0xe1, 0x4f, 0xaf, 0xdd, 0xcd, 0xf6,
	0xdf, 0x4a, 0x2c, 0xbf, 0xcf, 0x3e, 0xe5, 0x93, 0x16, 0xfd, 0x02, 0x5e, 0xfc, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0xe2, 0xa5, 0x6f, 0xc3, 0x1a, 0x04, 0x00, 0x00,
}
