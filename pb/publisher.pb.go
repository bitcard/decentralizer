// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/publisher.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// RPC
type PublisherDefinition struct {
	Hash         string            `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Signature    string            `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Files        map[string]string `protobuf:"bytes,3,rep,name=files" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Instructions map[string]string `protobuf:"bytes,4,rep,name=instructions" json:"instructions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Status       bool              `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
}

func (m *PublisherDefinition) Reset()                    { *m = PublisherDefinition{} }
func (m *PublisherDefinition) String() string            { return proto.CompactTextString(m) }
func (*PublisherDefinition) ProtoMessage()               {}
func (*PublisherDefinition) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *PublisherDefinition) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *PublisherDefinition) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *PublisherDefinition) GetFiles() map[string]string {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *PublisherDefinition) GetInstructions() map[string]string {
	if m != nil {
		return m.Instructions
	}
	return nil
}

func (m *PublisherDefinition) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*PublisherDefinition)(nil), "pb.PublisherDefinition")
}

func init() { proto.RegisterFile("pb/publisher.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x48, 0xd2, 0x2f,
	0x28, 0x4d, 0xca, 0xc9, 0x2c, 0xce, 0x48, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x2a, 0x48, 0x52, 0x7a, 0xcc, 0xc4, 0x25, 0x1c, 0x00, 0x13, 0x77, 0x49, 0x4d, 0xcb, 0xcc, 0xcb,
	0x2c, 0xc9, 0xcc, 0xcf, 0x13, 0x12, 0xe2, 0x62, 0xc9, 0x48, 0x2c, 0xce, 0x90, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x64, 0xb8, 0x38, 0x8b, 0x33, 0xd3, 0xf3, 0x12, 0x4b, 0x4a,
	0x8b, 0x52, 0x25, 0x98, 0xc0, 0x12, 0x08, 0x01, 0x21, 0x0b, 0x2e, 0xd6, 0xb4, 0xcc, 0x9c, 0xd4,
	0x62, 0x09, 0x66, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x25, 0xbd, 0x82, 0x24, 0x3d, 0x2c, 0x26, 0xeb,
	0xb9, 0x81, 0x14, 0xb9, 0xe6, 0x95, 0x14, 0x55, 0x06, 0x41, 0x34, 0x08, 0xf9, 0x72, 0xf1, 0x64,
	0xe6, 0x15, 0x97, 0x14, 0x95, 0x26, 0x83, 0x14, 0x14, 0x4b, 0xb0, 0x80, 0x0d, 0xd0, 0xc4, 0x65,
	0x80, 0x27, 0x92, 0x5a, 0x88, 0x39, 0x28, 0xda, 0x85, 0xc4, 0xb8, 0xd8, 0x8a, 0x4b, 0x12, 0x4b,
	0x4a, 0x8b, 0x25, 0x58, 0x15, 0x18, 0x35, 0x38, 0x82, 0xa0, 0x3c, 0x29, 0x0b, 0x2e, 0x2e, 0x84,
	0xdd, 0x42, 0x02, 0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x50, 0xff, 0x81, 0x98, 0x42, 0x22, 0x5c, 0xac,
	0x65, 0x89, 0x39, 0xa5, 0x30, 0xaf, 0x41, 0x38, 0x56, 0x4c, 0x16, 0x8c, 0x52, 0xf6, 0x5c, 0x82,
	0x18, 0x96, 0x92, 0x62, 0x40, 0x12, 0x1b, 0x38, 0xc0, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x7f, 0xd0, 0xe7, 0xce, 0x86, 0x01, 0x00, 0x00,
}
