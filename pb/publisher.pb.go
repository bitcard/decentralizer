// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/publisher.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// DN
type PublisherDefinition struct {
	Files   map[string][]byte `protobuf:"bytes,1,rep,name=files" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Links   map[string]string `protobuf:"bytes,2,rep,name=links" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Details map[string]string `protobuf:"bytes,3,rep,name=details" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Status  bool              `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
}

func (m *PublisherDefinition) Reset()                    { *m = PublisherDefinition{} }
func (m *PublisherDefinition) String() string            { return proto.CompactTextString(m) }
func (*PublisherDefinition) ProtoMessage()               {}
func (*PublisherDefinition) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *PublisherDefinition) GetFiles() map[string][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *PublisherDefinition) GetLinks() map[string]string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *PublisherDefinition) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *PublisherDefinition) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type PublisherUpdate struct {
	Created    int64                `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
	Signature  []byte               `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Definition *PublisherDefinition `protobuf:"bytes,3,opt,name=definition" json:"definition,omitempty"`
}

func (m *PublisherUpdate) Reset()                    { *m = PublisherUpdate{} }
func (m *PublisherUpdate) String() string            { return proto.CompactTextString(m) }
func (*PublisherUpdate) ProtoMessage()               {}
func (*PublisherUpdate) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *PublisherUpdate) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *PublisherUpdate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PublisherUpdate) GetDefinition() *PublisherDefinition {
	if m != nil {
		return m.Definition
	}
	return nil
}

type DNPublisherUpdateRequest struct {
}

func (m *DNPublisherUpdateRequest) Reset()                    { *m = DNPublisherUpdateRequest{} }
func (m *DNPublisherUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*DNPublisherUpdateRequest) ProtoMessage()               {}
func (*DNPublisherUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

type DNPublisherUpdateResponse struct {
	Update *PublisherUpdate `protobuf:"bytes,1,opt,name=update" json:"update,omitempty"`
}

func (m *DNPublisherUpdateResponse) Reset()                    { *m = DNPublisherUpdateResponse{} }
func (m *DNPublisherUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*DNPublisherUpdateResponse) ProtoMessage()               {}
func (*DNPublisherUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *DNPublisherUpdateResponse) GetUpdate() *PublisherUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func init() {
	proto.RegisterType((*PublisherDefinition)(nil), "pb.PublisherDefinition")
	proto.RegisterType((*PublisherUpdate)(nil), "pb.PublisherUpdate")
	proto.RegisterType((*DNPublisherUpdateRequest)(nil), "pb.DNPublisherUpdateRequest")
	proto.RegisterType((*DNPublisherUpdateResponse)(nil), "pb.DNPublisherUpdateResponse")
}

func init() { proto.RegisterFile("pb/publisher.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0xc7, 0xd9, 0xe4, 0x6b, 0xfb, 0x75, 0x5a, 0x50, 0xb6, 0xa2, 0x6b, 0xf1, 0x10, 0x82, 0x87,
	0x80, 0x10, 0xa1, 0x1e, 0x2c, 0x3d, 0x78, 0xaa, 0xe2, 0x41, 0x44, 0x16, 0x7c, 0x80, 0xc4, 0x4c,
	0x75, 0x69, 0x48, 0xd6, 0xec, 0xae, 0xd0, 0xab, 0x6f, 0xe0, 0x1b, 0x4b, 0x36, 0x49, 0x1b, 0xa5,
	0x55, 0xbc, 0x65, 0x26, 0xbf, 0xdf, 0xee, 0x7f, 0x86, 0x05, 0x2a, 0xe3, 0x73, 0x69, 0xe2, 0x54,
	0xa8, 0x17, 0x2c, 0x42, 0x59, 0xe4, 0x3a, 0xa7, 0x8e, 0x8c, 0xfd, 0x0f, 0x17, 0x46, 0x0f, 0x4d,
	0x7f, 0x8e, 0x0b, 0x91, 0x09, 0x2d, 0xf2, 0x8c, 0x4e, 0xa1, 0xb3, 0x10, 0x29, 0x2a, 0x46, 0x3c,
	0x37, 0x18, 0x4c, 0xfc, 0x50, 0xc6, 0xe1, 0x16, 0x2e, 0xbc, 0x29, 0xa1, 0xeb, 0x4c, 0x17, 0x2b,
	0x5e, 0x09, 0xa5, 0x99, 0x8a, 0x6c, 0xa9, 0x98, 0xf3, 0xb3, 0x79, 0x57, 0x42, 0xb5, 0x69, 0x05,
	0x7a, 0x05, 0xbd, 0x04, 0x75, 0x24, 0x52, 0xc5, 0x5c, 0xeb, 0x9e, 0xee, 0x72, 0xe7, 0x15, 0x56,
	0xd9, 0x8d, 0x44, 0x0f, 0xa1, 0xab, 0x74, 0xa4, 0x8d, 0x62, 0xff, 0x3c, 0x12, 0xfc, 0xe7, 0x75,
	0x35, 0x9e, 0x02, 0x6c, 0x62, 0xd2, 0x7d, 0x70, 0x97, 0xb8, 0x62, 0xc4, 0x23, 0x41, 0x9f, 0x97,
	0x9f, 0xf4, 0x00, 0x3a, 0x6f, 0x51, 0x6a, 0x90, 0x39, 0x1e, 0x09, 0x86, 0xbc, 0x2a, 0x66, 0xce,
	0x94, 0x94, 0xe6, 0x26, 0xe6, 0x6f, 0x66, 0xbf, 0x6d, 0xce, 0x60, 0xd8, 0x0e, 0xf9, 0x17, 0xd7,
	0x7f, 0x27, 0xb0, 0xb7, 0x9e, 0xfa, 0x51, 0x26, 0x91, 0x46, 0xca, 0xa0, 0xf7, 0x54, 0x60, 0xa4,
	0x31, 0xb1, 0x67, 0xb8, 0xbc, 0x29, 0xe9, 0x09, 0xf4, 0x95, 0x78, 0xce, 0x22, 0x6d, 0x8a, 0x66,
	0x82, 0x4d, 0x83, 0x5e, 0x02, 0x24, 0xeb, 0xbd, 0x31, 0xd7, 0x23, 0xc1, 0x60, 0x72, 0xb4, 0x63,
	0xad, 0xbc, 0x85, 0xfa, 0x63, 0x60, 0xf3, 0xfb, 0x6f, 0x29, 0x38, 0xbe, 0x1a, 0x54, 0xda, 0xbf,
	0x85, 0xe3, 0x2d, 0xff, 0x94, 0xcc, 0x33, 0x85, 0xf4, 0x0c, 0xba, 0xc6, 0x76, 0x6c, 0xd0, 0xc1,
	0x64, 0xf4, 0xe5, 0xb6, 0x1a, 0xae, 0x91, 0xb8, 0x6b, 0x5f, 0xe2, 0xc5, 0x67, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xbc, 0x35, 0x32, 0x53, 0x9f, 0x02, 0x00, 0x00,
}
