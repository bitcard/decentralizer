// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/publisher.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// DN
type PublisherDefinition struct {
	Published uint64            `protobuf:"varint,1,opt,name=published" json:"published,omitempty"`
	Files     map[string][]byte `protobuf:"bytes,2,rep,name=files" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Links     map[string]string `protobuf:"bytes,3,rep,name=links" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Details   map[string]string `protobuf:"bytes,4,rep,name=details" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Status    bool              `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
}

func (m *PublisherDefinition) Reset()                    { *m = PublisherDefinition{} }
func (m *PublisherDefinition) String() string            { return proto.CompactTextString(m) }
func (*PublisherDefinition) ProtoMessage()               {}
func (*PublisherDefinition) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *PublisherDefinition) GetPublished() uint64 {
	if m != nil {
		return m.Published
	}
	return 0
}

func (m *PublisherDefinition) GetFiles() map[string][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *PublisherDefinition) GetLinks() map[string]string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *PublisherDefinition) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *PublisherDefinition) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type DNPublisherRecord struct {
	Signature  []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Path       string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Definition []byte `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (m *DNPublisherRecord) Reset()                    { *m = DNPublisherRecord{} }
func (m *DNPublisherRecord) String() string            { return proto.CompactTextString(m) }
func (*DNPublisherRecord) ProtoMessage()               {}
func (*DNPublisherRecord) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *DNPublisherRecord) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DNPublisherRecord) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DNPublisherRecord) GetDefinition() []byte {
	if m != nil {
		return m.Definition
	}
	return nil
}

// RPC
type RPCPublishPublisherUpdateRequest struct {
	Definition *PublisherDefinition `protobuf:"bytes,1,opt,name=definition" json:"definition,omitempty"`
}

func (m *RPCPublishPublisherUpdateRequest) Reset()         { *m = RPCPublishPublisherUpdateRequest{} }
func (m *RPCPublishPublisherUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*RPCPublishPublisherUpdateRequest) ProtoMessage()    {}
func (*RPCPublishPublisherUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{2}
}

func (m *RPCPublishPublisherUpdateRequest) GetDefinition() *PublisherDefinition {
	if m != nil {
		return m.Definition
	}
	return nil
}

type RPCGetPublisherFileRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RPCGetPublisherFileRequest) Reset()                    { *m = RPCGetPublisherFileRequest{} }
func (m *RPCGetPublisherFileRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCGetPublisherFileRequest) ProtoMessage()               {}
func (*RPCGetPublisherFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *RPCGetPublisherFileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RPCGetPublisherFileResponse struct {
	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *RPCGetPublisherFileResponse) Reset()                    { *m = RPCGetPublisherFileResponse{} }
func (m *RPCGetPublisherFileResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCGetPublisherFileResponse) ProtoMessage()               {}
func (*RPCGetPublisherFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *RPCGetPublisherFileResponse) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type GetPublisherDefinitionRequest struct {
}

func (m *GetPublisherDefinitionRequest) Reset()                    { *m = GetPublisherDefinitionRequest{} }
func (m *GetPublisherDefinitionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPublisherDefinitionRequest) ProtoMessage()               {}
func (*GetPublisherDefinitionRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func init() {
	proto.RegisterType((*PublisherDefinition)(nil), "pb.PublisherDefinition")
	proto.RegisterType((*DNPublisherRecord)(nil), "pb.DNPublisherRecord")
	proto.RegisterType((*RPCPublishPublisherUpdateRequest)(nil), "pb.RPCPublishPublisherUpdateRequest")
	proto.RegisterType((*RPCGetPublisherFileRequest)(nil), "pb.RPCGetPublisherFileRequest")
	proto.RegisterType((*RPCGetPublisherFileResponse)(nil), "pb.RPCGetPublisherFileResponse")
	proto.RegisterType((*GetPublisherDefinitionRequest)(nil), "pb.GetPublisherDefinitionRequest")
}

func init() { proto.RegisterFile("pb/publisher.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcb, 0x4e, 0xe3, 0x30,
	0x14, 0x86, 0x95, 0x4b, 0x3b, 0xd3, 0xd3, 0x2e, 0x66, 0x3c, 0x23, 0x88, 0xca, 0x2d, 0x8a, 0x58,
	0x64, 0x15, 0xa0, 0x2c, 0xa8, 0xba, 0x60, 0xd3, 0x02, 0x1b, 0x84, 0x2a, 0x4b, 0xac, 0x58, 0x25,
	0xc4, 0xa5, 0x56, 0x83, 0x63, 0x62, 0x07, 0xa9, 0x4f, 0xc5, 0x2b, 0x22, 0x3b, 0xd7, 0x4a, 0x2d,
	0x88, 0xdd, 0xf1, 0xd1, 0xff, 0xfd, 0xe7, 0x96, 0x00, 0xe2, 0xd1, 0x19, 0xcf, 0xa3, 0x84, 0x8a,
	0x25, 0xc9, 0x02, 0x9e, 0xa5, 0x32, 0x45, 0x26, 0x8f, 0xbc, 0x0f, 0x0b, 0xfe, 0xcd, 0xab, 0xfc,
	0x8c, 0x2c, 0x28, 0xa3, 0x92, 0xa6, 0x0c, 0x1d, 0x42, 0xaf, 0x92, 0xc7, 0x8e, 0xe1, 0x1a, 0xbe,
	0x8d, 0x9b, 0x04, 0x1a, 0x43, 0x67, 0x41, 0x13, 0x22, 0x1c, 0xd3, 0xb5, 0xfc, 0xfe, 0xc8, 0x0b,
	0x78, 0x14, 0x6c, 0x71, 0x09, 0x6e, 0x95, 0xe8, 0x86, 0xc9, 0x6c, 0x8d, 0x0b, 0x40, 0x91, 0x09,
	0x65, 0x2b, 0xe1, 0x58, 0x5f, 0x93, 0xf7, 0x4a, 0x54, 0x92, 0x1a, 0x40, 0xd7, 0xf0, 0x2b, 0x26,
	0x32, 0xa4, 0x89, 0x70, 0x6c, 0xcd, 0x9e, 0xee, 0x62, 0x67, 0x85, 0xac, 0xa0, 0x2b, 0x08, 0xed,
	0x41, 0x57, 0xc8, 0x50, 0xe6, 0xc2, 0xe9, 0xb8, 0x86, 0xff, 0x1b, 0x97, 0xaf, 0xe1, 0x18, 0xa0,
	0x69, 0x13, 0xfd, 0x01, 0x6b, 0x45, 0xd6, 0x7a, 0xe2, 0x1e, 0x56, 0x21, 0xfa, 0x0f, 0x9d, 0xf7,
	0x30, 0xc9, 0x89, 0x63, 0xba, 0x86, 0x3f, 0xc0, 0xc5, 0x63, 0x62, 0x8e, 0x0d, 0x45, 0x36, 0x6d,
	0x7e, 0x47, 0xf6, 0xda, 0xe4, 0x04, 0x06, 0xed, 0x26, 0x7f, 0xc2, 0x7a, 0x04, 0xfe, 0xce, 0x1e,
	0xea, 0xb1, 0x31, 0x79, 0x4e, 0xb3, 0x58, 0x9d, 0x4b, 0xd0, 0x17, 0x16, 0xca, 0x3c, 0x23, 0xda,
	0x66, 0x80, 0x9b, 0x04, 0x42, 0x60, 0xf3, 0x50, 0x2e, 0x4b, 0x2f, 0x1d, 0xa3, 0x63, 0x80, 0xb8,
	0x5e, 0x99, 0x63, 0x69, 0xa4, 0x95, 0xf1, 0x9e, 0xc0, 0xc5, 0xf3, 0x69, 0x59, 0xa7, 0x2e, 0xf7,
	0xc8, 0xe3, 0x50, 0x12, 0x4c, 0xde, 0x72, 0x22, 0x24, 0xba, 0xda, 0xf0, 0x50, 0x65, 0xfb, 0xa3,
	0xfd, 0x1d, 0x57, 0xd9, 0x30, 0x3f, 0x87, 0x21, 0x9e, 0x4f, 0xef, 0x88, 0xac, 0x85, 0xea, 0x04,
	0x95, 0x2d, 0x02, 0x9b, 0x85, 0xaf, 0xa4, 0x5c, 0x87, 0x8e, 0xbd, 0x0b, 0x38, 0xd8, 0x4a, 0x08,
	0x9e, 0x32, 0xa1, 0x27, 0x54, 0xdf, 0x57, 0x39, 0xba, 0x8e, 0xbd, 0x13, 0x38, 0x6a, 0xeb, 0x5b,
	0xad, 0x14, 0x75, 0xa2, 0xae, 0xfe, 0x0d, 0x2e, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x14,
	0x1f, 0xc1, 0x1c, 0x03, 0x00, 0x00,
}
