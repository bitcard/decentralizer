// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/platform.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RPCHealthRequest struct {
}

func (m *RPCHealthRequest) Reset()                    { *m = RPCHealthRequest{} }
func (m *RPCHealthRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCHealthRequest) ProtoMessage()               {}
func (*RPCHealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type RPCHealthReply struct {
	Ready   bool   `protobuf:"varint,1,opt,name=ready" json:"ready,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *RPCHealthReply) Reset()                    { *m = RPCHealthReply{} }
func (m *RPCHealthReply) String() string            { return proto.CompactTextString(m) }
func (*RPCHealthReply) ProtoMessage()               {}
func (*RPCHealthReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *RPCHealthReply) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *RPCHealthReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*RPCHealthRequest)(nil), "pb.RPCHealthRequest")
	proto.RegisterType((*RPCHealthReply)(nil), "pb.RPCHealthReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Decentralizer service

type DecentralizerClient interface {
	//
	// Platform
	//
	// Get health of decentralizer.
	GetHealth(ctx context.Context, in *RPCHealthRequest, opts ...grpc.CallOption) (*RPCHealthReply, error)
	//
	// Matchmaking
	//
	// Create or update a session. Takes session info, returns session id.
	UpsertSession(ctx context.Context, in *RPCUpsertSessionRequest, opts ...grpc.CallOption) (*RPCUpsertSessionResponse, error)
	// Delete a session. Takes session id, returns bool informing if the deletion was a success
	DeleteSession(ctx context.Context, in *RPCDeleteSessionRequest, opts ...grpc.CallOption) (*RPCDeleteSessionResponse, error)
	// Get session ids. Takes session type, and a key and value to filter the sessions by details. If left empty this filter will not apply  and all will be fetched.
	GetSessionIds(ctx context.Context, in *RPCGetSessionIdsRequest, opts ...grpc.CallOption) (*RPCGetSessionIdsResponse, error)
	// Get an individual session. Takes session id and returns session info.
	GetSession(ctx context.Context, in *RPCGetSessionRequest, opts ...grpc.CallOption) (*RPCGetSessionResponse, error)
	//
	// Address book
	//
	// Create or update a peer. Takes peer info, returns if it was a success.
	UpsertPeer(ctx context.Context, in *RPCUpsertPeerRequest, opts ...grpc.CallOption) (*RPCUpsertPeerResponse, error)
	// Get peer ids. takes a key and value to filter the peers by details. If left empty this filter will not apply and all will be fetched.
	GetPeerIds(ctx context.Context, in *RPCGetPeerIdsRequest, opts ...grpc.CallOption) (*RPCGetPeerIdsResponse, error)
	// Get an individual peer. Takes either a peer id or decentralizer id and returns the peer info.
	GetPeer(ctx context.Context, in *RPCGetPeerRequest, opts ...grpc.CallOption) (*RPCGetPeerResponse, error)
	//
	// Storage
	//
	// Write a peer file. Takes a file name and the data it should save.
	WritePeerFile(ctx context.Context, in *RPCWritePeerFileRequest, opts ...grpc.CallOption) (*RPCWritePeerFileResponse, error)
	// Get a peer file. Takes a file name, returns the file.
	GetPeerFile(ctx context.Context, in *RPCGetPeerFileRequest, opts ...grpc.CallOption) (*RPCGetPeerFileResponse, error)
	// Get a publisher file.
	GetPublisherFile(ctx context.Context, in *RPCGetPublisherFileRequest, opts ...grpc.CallOption) (*RPCGetPublisherFileResponse, error)
	//
	// Messaging
	//
	// Send another peer a direct message. Takes a peer id and the data it should send
	SendDirectMessage(ctx context.Context, in *RPCDirectMessageRequest, opts ...grpc.CallOption) (*RPCDirectMessageResponse, error)
}

type decentralizerClient struct {
	cc *grpc.ClientConn
}

func NewDecentralizerClient(cc *grpc.ClientConn) DecentralizerClient {
	return &decentralizerClient{cc}
}

func (c *decentralizerClient) GetHealth(ctx context.Context, in *RPCHealthRequest, opts ...grpc.CallOption) (*RPCHealthReply, error) {
	out := new(RPCHealthReply)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/GetHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decentralizerClient) UpsertSession(ctx context.Context, in *RPCUpsertSessionRequest, opts ...grpc.CallOption) (*RPCUpsertSessionResponse, error) {
	out := new(RPCUpsertSessionResponse)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/UpsertSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decentralizerClient) DeleteSession(ctx context.Context, in *RPCDeleteSessionRequest, opts ...grpc.CallOption) (*RPCDeleteSessionResponse, error) {
	out := new(RPCDeleteSessionResponse)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/DeleteSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decentralizerClient) GetSessionIds(ctx context.Context, in *RPCGetSessionIdsRequest, opts ...grpc.CallOption) (*RPCGetSessionIdsResponse, error) {
	out := new(RPCGetSessionIdsResponse)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/GetSessionIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decentralizerClient) GetSession(ctx context.Context, in *RPCGetSessionRequest, opts ...grpc.CallOption) (*RPCGetSessionResponse, error) {
	out := new(RPCGetSessionResponse)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/GetSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decentralizerClient) UpsertPeer(ctx context.Context, in *RPCUpsertPeerRequest, opts ...grpc.CallOption) (*RPCUpsertPeerResponse, error) {
	out := new(RPCUpsertPeerResponse)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/UpsertPeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decentralizerClient) GetPeerIds(ctx context.Context, in *RPCGetPeerIdsRequest, opts ...grpc.CallOption) (*RPCGetPeerIdsResponse, error) {
	out := new(RPCGetPeerIdsResponse)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/GetPeerIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decentralizerClient) GetPeer(ctx context.Context, in *RPCGetPeerRequest, opts ...grpc.CallOption) (*RPCGetPeerResponse, error) {
	out := new(RPCGetPeerResponse)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/GetPeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decentralizerClient) WritePeerFile(ctx context.Context, in *RPCWritePeerFileRequest, opts ...grpc.CallOption) (*RPCWritePeerFileResponse, error) {
	out := new(RPCWritePeerFileResponse)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/WritePeerFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decentralizerClient) GetPeerFile(ctx context.Context, in *RPCGetPeerFileRequest, opts ...grpc.CallOption) (*RPCGetPeerFileResponse, error) {
	out := new(RPCGetPeerFileResponse)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/GetPeerFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decentralizerClient) GetPublisherFile(ctx context.Context, in *RPCGetPublisherFileRequest, opts ...grpc.CallOption) (*RPCGetPublisherFileResponse, error) {
	out := new(RPCGetPublisherFileResponse)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/GetPublisherFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decentralizerClient) SendDirectMessage(ctx context.Context, in *RPCDirectMessageRequest, opts ...grpc.CallOption) (*RPCDirectMessageResponse, error) {
	out := new(RPCDirectMessageResponse)
	err := grpc.Invoke(ctx, "/pb.Decentralizer/SendDirectMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Decentralizer service

type DecentralizerServer interface {
	//
	// Platform
	//
	// Get health of decentralizer.
	GetHealth(context.Context, *RPCHealthRequest) (*RPCHealthReply, error)
	//
	// Matchmaking
	//
	// Create or update a session. Takes session info, returns session id.
	UpsertSession(context.Context, *RPCUpsertSessionRequest) (*RPCUpsertSessionResponse, error)
	// Delete a session. Takes session id, returns bool informing if the deletion was a success
	DeleteSession(context.Context, *RPCDeleteSessionRequest) (*RPCDeleteSessionResponse, error)
	// Get session ids. Takes session type, and a key and value to filter the sessions by details. If left empty this filter will not apply  and all will be fetched.
	GetSessionIds(context.Context, *RPCGetSessionIdsRequest) (*RPCGetSessionIdsResponse, error)
	// Get an individual session. Takes session id and returns session info.
	GetSession(context.Context, *RPCGetSessionRequest) (*RPCGetSessionResponse, error)
	//
	// Address book
	//
	// Create or update a peer. Takes peer info, returns if it was a success.
	UpsertPeer(context.Context, *RPCUpsertPeerRequest) (*RPCUpsertPeerResponse, error)
	// Get peer ids. takes a key and value to filter the peers by details. If left empty this filter will not apply and all will be fetched.
	GetPeerIds(context.Context, *RPCGetPeerIdsRequest) (*RPCGetPeerIdsResponse, error)
	// Get an individual peer. Takes either a peer id or decentralizer id and returns the peer info.
	GetPeer(context.Context, *RPCGetPeerRequest) (*RPCGetPeerResponse, error)
	//
	// Storage
	//
	// Write a peer file. Takes a file name and the data it should save.
	WritePeerFile(context.Context, *RPCWritePeerFileRequest) (*RPCWritePeerFileResponse, error)
	// Get a peer file. Takes a file name, returns the file.
	GetPeerFile(context.Context, *RPCGetPeerFileRequest) (*RPCGetPeerFileResponse, error)
	// Get a publisher file.
	GetPublisherFile(context.Context, *RPCGetPublisherFileRequest) (*RPCGetPublisherFileResponse, error)
	//
	// Messaging
	//
	// Send another peer a direct message. Takes a peer id and the data it should send
	SendDirectMessage(context.Context, *RPCDirectMessageRequest) (*RPCDirectMessageResponse, error)
}

func RegisterDecentralizerServer(s *grpc.Server, srv DecentralizerServer) {
	s.RegisterService(&_Decentralizer_serviceDesc, srv)
}

func _Decentralizer_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).GetHealth(ctx, req.(*RPCHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decentralizer_UpsertSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCUpsertSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).UpsertSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/UpsertSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).UpsertSession(ctx, req.(*RPCUpsertSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decentralizer_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCDeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).DeleteSession(ctx, req.(*RPCDeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decentralizer_GetSessionIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCGetSessionIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).GetSessionIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/GetSessionIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).GetSessionIds(ctx, req.(*RPCGetSessionIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decentralizer_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCGetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).GetSession(ctx, req.(*RPCGetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decentralizer_UpsertPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCUpsertPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).UpsertPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/UpsertPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).UpsertPeer(ctx, req.(*RPCUpsertPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decentralizer_GetPeerIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCGetPeerIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).GetPeerIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/GetPeerIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).GetPeerIds(ctx, req.(*RPCGetPeerIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decentralizer_GetPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCGetPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).GetPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/GetPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).GetPeer(ctx, req.(*RPCGetPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decentralizer_WritePeerFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCWritePeerFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).WritePeerFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/WritePeerFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).WritePeerFile(ctx, req.(*RPCWritePeerFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decentralizer_GetPeerFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCGetPeerFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).GetPeerFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/GetPeerFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).GetPeerFile(ctx, req.(*RPCGetPeerFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decentralizer_GetPublisherFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCGetPublisherFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).GetPublisherFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/GetPublisherFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).GetPublisherFile(ctx, req.(*RPCGetPublisherFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Decentralizer_SendDirectMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCDirectMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).SendDirectMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Decentralizer/SendDirectMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).SendDirectMessage(ctx, req.(*RPCDirectMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Decentralizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Decentralizer",
	HandlerType: (*DecentralizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _Decentralizer_GetHealth_Handler,
		},
		{
			MethodName: "UpsertSession",
			Handler:    _Decentralizer_UpsertSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _Decentralizer_DeleteSession_Handler,
		},
		{
			MethodName: "GetSessionIds",
			Handler:    _Decentralizer_GetSessionIds_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _Decentralizer_GetSession_Handler,
		},
		{
			MethodName: "UpsertPeer",
			Handler:    _Decentralizer_UpsertPeer_Handler,
		},
		{
			MethodName: "GetPeerIds",
			Handler:    _Decentralizer_GetPeerIds_Handler,
		},
		{
			MethodName: "GetPeer",
			Handler:    _Decentralizer_GetPeer_Handler,
		},
		{
			MethodName: "WritePeerFile",
			Handler:    _Decentralizer_WritePeerFile_Handler,
		},
		{
			MethodName: "GetPeerFile",
			Handler:    _Decentralizer_GetPeerFile_Handler,
		},
		{
			MethodName: "GetPublisherFile",
			Handler:    _Decentralizer_GetPublisherFile_Handler,
		},
		{
			MethodName: "SendDirectMessage",
			Handler:    _Decentralizer_SendDirectMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/platform.proto",
}

func init() { proto.RegisterFile("pb/platform.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xc1, 0x4f, 0xc2, 0x30,
	0x14, 0x87, 0x85, 0x44, 0x90, 0x1a, 0x0c, 0x34, 0x68, 0x26, 0x1a, 0x25, 0x9c, 0x38, 0x41, 0xa2,
	0x07, 0x13, 0x4f, 0x26, 0x10, 0xd0, 0x44, 0x13, 0x32, 0x42, 0x3c, 0xb7, 0xec, 0x09, 0x0b, 0x65,
	0xad, 0x6d, 0x39, 0xe0, 0xdf, 0xee, 0xc1, 0x8c, 0x6d, 0xa5, 0x2b, 0xf3, 0xd8, 0xef, 0xd7, 0xf7,
	0xf5, 0xf5, 0xa5, 0x45, 0x4d, 0x41, 0x07, 0x82, 0x11, 0xfd, 0xc5, 0xe5, 0xa6, 0x2f, 0x24, 0xd7,
	0x1c, 0x97, 0x05, 0x6d, 0xb7, 0x04, 0x1d, 0x6c, 0x88, 0x5e, 0xac, 0x36, 0x64, 0x1d, 0x46, 0xcb,
	0x24, 0xd9, 0x53, 0x12, 0x04, 0x12, 0x94, 0xa2, 0x9c, 0xaf, 0x53, 0xda, 0x10, 0x74, 0xa0, 0x34,
	0x97, 0x64, 0x09, 0x29, 0xc1, 0x71, 0x35, 0x28, 0x45, 0x96, 0xa6, 0xb6, 0x8b, 0x51, 0xc3, 0x9f,
	0x0e, 0x5f, 0x81, 0x30, 0xbd, 0xf2, 0xe1, 0x7b, 0x0b, 0x4a, 0x77, 0x5f, 0xd0, 0x85, 0xc5, 0x04,
	0xdb, 0xe1, 0x16, 0x3a, 0x95, 0x40, 0x82, 0x9d, 0x57, 0xea, 0x94, 0x7a, 0x67, 0x7e, 0xb2, 0xc0,
	0x1e, 0xaa, 0x26, 0x3a, 0xf0, 0xca, 0x9d, 0x52, 0xaf, 0xe6, 0x67, 0xcb, 0x87, 0xdf, 0x0a, 0xaa,
	0x8f, 0x60, 0x01, 0x91, 0x96, 0x84, 0x85, 0x3f, 0x20, 0xf1, 0x13, 0xaa, 0x4d, 0x40, 0x27, 0x4e,
	0xdc, 0xea, 0x0b, 0xda, 0x77, 0x8f, 0x6d, 0x63, 0x87, 0x0a, 0xb6, 0xeb, 0x9e, 0xe0, 0x77, 0x54,
	0x9f, 0x0b, 0x05, 0x52, 0xcf, 0x40, 0xa9, 0x90, 0x47, 0xf8, 0x26, 0xdd, 0x96, 0xa3, 0x99, 0xe3,
	0xb6, 0x38, 0x54, 0x82, 0x47, 0x0a, 0x12, 0xdb, 0x08, 0x18, 0x68, 0x70, 0x6d, 0x39, 0xea, 0xda,
	0x9c, 0xd0, 0xb6, 0x4d, 0x20, 0x3b, 0xe5, 0x2d, 0x50, 0xc6, 0x96, 0xa3, 0xae, 0xcd, 0x09, 0x8d,
	0x6d, 0x88, 0xd0, 0x21, 0xc2, 0xde, 0xd1, 0xee, 0xcc, 0x73, 0x5d, 0x90, 0xd8, 0x92, 0xe4, 0xee,
	0x53, 0x00, 0x69, 0x24, 0x07, 0xe4, 0x4a, 0xec, 0xc4, 0xe9, 0x24, 0x86, 0xf1, 0xa5, 0xac, 0x4e,
	0x52, 0x54, 0xd0, 0x89, 0x49, 0x8c, 0xe4, 0x19, 0x55, 0x53, 0x8e, 0x2f, 0xf3, 0xfb, 0xb2, 0xf2,
	0x2b, 0x17, 0xdb, 0x83, 0xfd, 0x94, 0xa1, 0x86, 0x18, 0x8f, 0x43, 0x06, 0x66, 0xb0, 0x39, 0xea,
	0x0e, 0xd6, 0x09, 0x8d, 0x6d, 0x8c, 0xce, 0xd3, 0x23, 0xf6, 0x2e, 0xa7, 0x6b, 0xdb, 0xd4, 0x2e,
	0x8a, 0x8c, 0x67, 0x8e, 0x1a, 0x71, 0xb0, 0xa5, 0x2c, 0x54, 0xab, 0x54, 0x76, 0x67, 0x55, 0xd8,
	0x41, 0x66, 0xbc, 0xff, 0x37, 0x37, 0xda, 0x29, 0x6a, 0xce, 0x20, 0x0a, 0x46, 0xa1, 0x84, 0x85,
	0xfe, 0x48, 0x7e, 0xd0, 0xe1, 0x5d, 0xda, 0xf4, 0xe8, 0x5d, 0xe6, 0xc3, 0xcc, 0x48, 0x2b, 0xfb,
	0xbf, 0xfd, 0xf8, 0x17, 0x00, 0x00, 0xff, 0xff, 0x57, 0x2f, 0x75, 0xc8, 0x46, 0x04, 0x00, 0x00,
}
