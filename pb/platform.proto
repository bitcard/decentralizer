syntax = "proto3";
package pb;
import "pb/matchmaking.proto";
import "pb/addressbook.proto";
import "pb/storage.proto";
import "pb/messaging.proto";
import "pb/publisher.proto";
import "google/api/annotations.proto";

message empty {}

message RPCHealthRequest {
	bool waitForMinConnections = 1;
}

message RPCHealthReply {
	bool ready = 1;
	string message = 2;
	string basePath = 3;
	uint32 numConnections = 4;
}

service Decentralizer {
	//
	// Platform
	//
	// Get health of decentralizer.
	rpc GetHealth(RPCHealthRequest) returns (RPCHealthReply) {
		option (google.api.http) = { get: "/v1/health/{waitForMinConnections}" };
	}

	//
	// Matchmaking
	//
	// Create or update a session. Takes session info, returns session id.
	rpc UpsertSession(RPCUpsertSessionRequest) returns (RPCUpsertSessionResponse) {
		option (google.api.http) = { post: "/v1/session" };
	}
	// Delete a session. Takes session id, returns bool informing if the deletion was a success
	rpc DeleteSession(RPCDeleteSessionRequest) returns (RPCDeleteSessionResponse) {}
	// Get session ids. Takes session type, and a key and value to filter the sessions by details. If left empty this filter will not apply and all will be fetched.
	rpc GetSessionIdsByDetails(RPCGetSessionIdsByDetailsRequest) returns (RPCGetSessionIdsResponse) {
		option (google.api.http) = { get: "/v1/sessions/{type}/{key}/{value}" };
	}
	// Get session ids. Takes peer ids. Returns session ids
	rpc GetSessionIdsByPeerIds(RPCGetSessionIdsByPeerIdsRequest) returns (RPCGetSessionIdsResponse) {}
	// Get an individual session. Takes session id and returns session info.
	rpc GetSession(RPCGetSessionRequest) returns (RPCGetSessionResponse) {
		option (google.api.http) = { get: "/v1/session/{sessionId}" };
	}

	//
	// Address book
	//
	// Create or update a peer. Takes peer info, returns if it was a success.
	rpc UpsertPeer(RPCUpsertPeerRequest) returns (RPCUpsertPeerResponse) {}
	// Get peer ids. takes a key and value to filter the peers by details. If left empty this filter will not apply and all will be fetched.
	rpc GetPeerIds(RPCGetPeerIdsRequest) returns (RPCGetPeerIdsResponse) {
		option (google.api.http) = { get: "/v1/peers/{key}/{value}" };
	}
	// Get an individual peer. Takes either a peer id or decentralizer id and returns the peer info.
	rpc GetPeer(RPCGetPeerRequest) returns (RPCGetPeerResponse) {
		option (google.api.http) = { get: "/v1/peer/{pId}/{dnId}" };
	}

	//
	// Storage
	//
	// Write a peer file. Takes a file name and the data it should save.
	rpc WritePeerFile(RPCWritePeerFileRequest) returns (RPCWritePeerFileResponse) {}
	// Get a peer file. Takes a file name, returns the file.
	rpc GetPeerFile(RPCGetPeerFileRequest) returns (RPCGetPeerFileResponse) {}

	//
	// Messaging
	//
	// Send another peer a direct message. Takes a peer id and the data it should send
	rpc SendDirectMessage(RPCDirectMessage) returns (empty) {}
	rpc ReceiveDirectMessage(RPCReceiveDirectMessageRequest) returns (stream RPCDirectMessage) {}

	//
	// Publisher
	//
	//Publish a new publisher update. (Only if you have the private key!)
	rpc publishPublisherUpdate(RPCPublishPublisherUpdateRequest) returns (empty) {}
	//Get the full publisher definition
	rpc GetPublisherDefinition(GetPublisherDefinitionRequest) returns (PublisherDefinition) {
		option (google.api.http) = { get: "/v1/publisher" };
	}
	// Get a publisher file.
	rpc GetPublisherFile(RPCGetPublisherFileRequest) returns (RPCGetPublisherFileResponse) {
		option (google.api.http) = { get: "/v1/publisher/{name}" };
	}
}