// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/addressbook.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/addressbook.proto
	pb/matchmaking.proto
	pb/messaging.proto
	pb/platform.proto
	pb/publisher.proto
	pb/storage.proto

It has these top-level messages:
	Peer
	DNPeerResponse
	DNPeerRequest
	RPCUpsertPeerRequest
	RPCUpsertPeerResponse
	RPCGetPeerIdsRequest
	RPCGetPeerIdsResponse
	RPCGetPeerRequest
	RPCGetPeerResponse
	Session
	DNSessionResponse
	DNSessionRequest
	RPCUpsertSessionRequest
	RPCUpsertSessionResponse
	RPCDeleteSessionRequest
	RPCDeleteSessionResponse
	RPCGetSessionIdsRequest
	RPCGetSessionIdsResponse
	RPCGetSessionRequest
	RPCGetSessionResponse
	DNDirectMessageResponse
	DNDirectMessageRequest
	RPCDirectMessageResponse
	RPCDirectMessageRequest
	RPCHealthRequest
	RPCHealthReply
	PublisherDefinition
	RPCWritePeerFileRequest
	RPCWritePeerFileResponse
	RPCGetPeerFileRequest
	RPCGetPeerFileResponse
	RPCGetPublisherFileRequest
	RPCGetPublisherFileResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Peer struct {
	// If pId == "self". We'll resolve it to our peerId.
	PId     string            `protobuf:"bytes,1,opt,name=pId" json:"pId,omitempty"`
	DnId    uint64            `protobuf:"varint,2,opt,name=dnId" json:"dnId,omitempty"`
	Details map[string]string `protobuf:"bytes,3,rep,name=details" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Peer) GetPId() string {
	if m != nil {
		return m.PId
	}
	return ""
}

func (m *Peer) GetDnId() uint64 {
	if m != nil {
		return m.DnId
	}
	return 0
}

func (m *Peer) GetDetails() map[string]string {
	if m != nil {
		return m.Details
	}
	return nil
}

type DNPeerResponse struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *DNPeerResponse) Reset()                    { *m = DNPeerResponse{} }
func (m *DNPeerResponse) String() string            { return proto.CompactTextString(m) }
func (*DNPeerResponse) ProtoMessage()               {}
func (*DNPeerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DNPeerResponse) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type DNPeerRequest struct {
}

func (m *DNPeerRequest) Reset()                    { *m = DNPeerRequest{} }
func (m *DNPeerRequest) String() string            { return proto.CompactTextString(m) }
func (*DNPeerRequest) ProtoMessage()               {}
func (*DNPeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// upsert
type RPCUpsertPeerRequest struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RPCUpsertPeerRequest) Reset()                    { *m = RPCUpsertPeerRequest{} }
func (m *RPCUpsertPeerRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCUpsertPeerRequest) ProtoMessage()               {}
func (*RPCUpsertPeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RPCUpsertPeerRequest) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type RPCUpsertPeerResponse struct {
}

func (m *RPCUpsertPeerResponse) Reset()                    { *m = RPCUpsertPeerResponse{} }
func (m *RPCUpsertPeerResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCUpsertPeerResponse) ProtoMessage()               {}
func (*RPCUpsertPeerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// Get peer ids
type RPCGetPeerIdsRequest struct {
	// Key in the details map
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Value in the details map.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *RPCGetPeerIdsRequest) Reset()                    { *m = RPCGetPeerIdsRequest{} }
func (m *RPCGetPeerIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCGetPeerIdsRequest) ProtoMessage()               {}
func (*RPCGetPeerIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RPCGetPeerIdsRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RPCGetPeerIdsRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type RPCGetPeerIdsResponse struct {
	PeerIds []string `protobuf:"bytes,1,rep,name=peerIds" json:"peerIds,omitempty"`
}

func (m *RPCGetPeerIdsResponse) Reset()                    { *m = RPCGetPeerIdsResponse{} }
func (m *RPCGetPeerIdsResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCGetPeerIdsResponse) ProtoMessage()               {}
func (*RPCGetPeerIdsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RPCGetPeerIdsResponse) GetPeerIds() []string {
	if m != nil {
		return m.PeerIds
	}
	return nil
}

// Get individual peer
type RPCGetPeerRequest struct {
	// If pId == "self". We'll resolve it to our peerId.
	// Either one must be filled in. If both are specified. preference goes to pId
	PId  string `protobuf:"bytes,1,opt,name=pId" json:"pId,omitempty"`
	DnId uint64 `protobuf:"varint,2,opt,name=dnId" json:"dnId,omitempty"`
}

func (m *RPCGetPeerRequest) Reset()                    { *m = RPCGetPeerRequest{} }
func (m *RPCGetPeerRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCGetPeerRequest) ProtoMessage()               {}
func (*RPCGetPeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RPCGetPeerRequest) GetPId() string {
	if m != nil {
		return m.PId
	}
	return ""
}

func (m *RPCGetPeerRequest) GetDnId() uint64 {
	if m != nil {
		return m.DnId
	}
	return 0
}

type RPCGetPeerResponse struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RPCGetPeerResponse) Reset()                    { *m = RPCGetPeerResponse{} }
func (m *RPCGetPeerResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCGetPeerResponse) ProtoMessage()               {}
func (*RPCGetPeerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RPCGetPeerResponse) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func init() {
	proto.RegisterType((*Peer)(nil), "pb.Peer")
	proto.RegisterType((*DNPeerResponse)(nil), "pb.DNPeerResponse")
	proto.RegisterType((*DNPeerRequest)(nil), "pb.DNPeerRequest")
	proto.RegisterType((*RPCUpsertPeerRequest)(nil), "pb.RPCUpsertPeerRequest")
	proto.RegisterType((*RPCUpsertPeerResponse)(nil), "pb.RPCUpsertPeerResponse")
	proto.RegisterType((*RPCGetPeerIdsRequest)(nil), "pb.RPCGetPeerIdsRequest")
	proto.RegisterType((*RPCGetPeerIdsResponse)(nil), "pb.RPCGetPeerIdsResponse")
	proto.RegisterType((*RPCGetPeerRequest)(nil), "pb.RPCGetPeerRequest")
	proto.RegisterType((*RPCGetPeerResponse)(nil), "pb.RPCGetPeerResponse")
}

func init() { proto.RegisterFile("pb/addressbook.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x4b, 0xf4, 0x30,
	0x10, 0xc6, 0x49, 0xdb, 0xf7, 0x5d, 0x3b, 0xeb, 0xdf, 0xd0, 0xc5, 0x22, 0x1e, 0x4a, 0x4e, 0x3d,
	0x75, 0xb1, 0x7a, 0xd0, 0x3d, 0x78, 0x71, 0x45, 0x7a, 0x91, 0x25, 0xe0, 0x07, 0x68, 0xc9, 0x1c,
	0xa4, 0x4b, 0x1b, 0x93, 0xac, 0xd0, 0x8f, 0xe2, 0xb7, 0x95, 0xa6, 0x06, 0x83, 0x97, 0xdd, 0xdb,
	0xcc, 0x93, 0x79, 0x9e, 0x1f, 0x93, 0x04, 0x12, 0xd9, 0x2c, 0x6b, 0x21, 0x14, 0x6a, 0xdd, 0xf4,
	0x7d, 0x5b, 0x48, 0xd5, 0x9b, 0x9e, 0x06, 0xb2, 0x61, 0x5f, 0x04, 0xa2, 0x0d, 0xa2, 0xa2, 0xe7,
	0x10, 0xca, 0x4a, 0xa4, 0x24, 0x23, 0x79, 0xcc, 0xc7, 0x92, 0x52, 0x88, 0x44, 0x57, 0x89, 0x34,
	0xc8, 0x48, 0x1e, 0x71, 0x5b, 0xd3, 0x25, 0xcc, 0x04, 0x9a, 0xfa, 0x7d, 0xab, 0xd3, 0x30, 0x0b,
	0xf3, 0x79, 0xb9, 0x28, 0x64, 0x53, 0x8c, 0x01, 0xc5, 0x7a, 0xd2, 0x9f, 0x3b, 0xa3, 0x06, 0xee,
	0xa6, 0xae, 0x56, 0x70, 0xec, 0x1f, 0x8c, 0x98, 0x16, 0x07, 0x87, 0x69, 0x71, 0xa0, 0x09, 0xfc,
	0xfb, 0xac, 0xb7, 0x3b, 0xb4, 0x9c, 0x98, 0x4f, 0xcd, 0x2a, 0xb8, 0x27, 0xac, 0x80, 0xd3, 0xf5,
	0xeb, 0x98, 0xcd, 0x51, 0xcb, 0xbe, 0xd3, 0x48, 0xaf, 0x21, 0x92, 0x88, 0xca, 0xda, 0xe7, 0xe5,
	0x91, 0x63, 0x73, 0xab, 0xb2, 0x33, 0x38, 0x71, 0xf3, 0x1f, 0x3b, 0xd4, 0x86, 0xdd, 0x41, 0xc2,
	0x37, 0x4f, 0x6f, 0x52, 0xa3, 0x32, 0x9e, 0xbe, 0x27, 0xe6, 0x12, 0x16, 0x7f, 0x5c, 0x13, 0x9d,
	0x3d, 0xda, 0xb8, 0x17, 0xb4, 0x6a, 0x25, 0xb4, 0x8b, 0x3b, 0x70, 0x27, 0x76, 0x63, 0x83, 0x7d,
	0xff, 0xcf, 0x5a, 0x29, 0xcc, 0xe4, 0x24, 0xa5, 0x24, 0x0b, 0xf3, 0x98, 0xbb, 0x96, 0x3d, 0xc0,
	0xc5, 0xaf, 0xc5, 0xe3, 0xed, 0x7f, 0x2a, 0x56, 0x02, 0xf5, 0xad, 0x87, 0xdc, 0x60, 0xf3, 0xdf,
	0x7e, 0x8c, 0xdb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xf8, 0x2c, 0xa3, 0x30, 0x02, 0x00,
	0x00,
}
