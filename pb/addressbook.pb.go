// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/addressbook.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/addressbook.proto
	pb/matchmaking.proto
	pb/platform.proto

It has these top-level messages:
	DNPeer
	RPCAddressBookPeerRequest
	RPCAddressBookPeerResponse
	SessionInfo
	DNSessionResponse
	DNSessionRequest
	RPCUpsertSessionRequest
	RPCUpsertSessionResponse
	RPCDeleteSessionRequest
	RPCDeleteSessionResponse
	RPCSessionIdsRequest
	RPCSessionIdsResponse
	RPCGetSessionRequest
	RPCGetSessionResponse
	RPCHealthRequest
	RPCHealthReply
	RPCGetPeerReply
	RPCMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DNPeer struct {
	DnId uint64 `protobuf:"varint,1,opt,name=dnId" json:"dnId,omitempty"`
	PId  string `protobuf:"bytes,2,opt,name=pId" json:"pId,omitempty"`
}

func (m *DNPeer) Reset()                    { *m = DNPeer{} }
func (m *DNPeer) String() string            { return proto.CompactTextString(m) }
func (*DNPeer) ProtoMessage()               {}
func (*DNPeer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DNPeer) GetDnId() uint64 {
	if m != nil {
		return m.DnId
	}
	return 0
}

func (m *DNPeer) GetPId() string {
	if m != nil {
		return m.PId
	}
	return ""
}

type RPCAddressBookPeerRequest struct {
	DnId uint64 `protobuf:"varint,1,opt,name=dnId" json:"dnId,omitempty"`
	PId  string `protobuf:"bytes,2,opt,name=pId" json:"pId,omitempty"`
}

func (m *RPCAddressBookPeerRequest) Reset()                    { *m = RPCAddressBookPeerRequest{} }
func (m *RPCAddressBookPeerRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCAddressBookPeerRequest) ProtoMessage()               {}
func (*RPCAddressBookPeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RPCAddressBookPeerRequest) GetDnId() uint64 {
	if m != nil {
		return m.DnId
	}
	return 0
}

func (m *RPCAddressBookPeerRequest) GetPId() string {
	if m != nil {
		return m.PId
	}
	return ""
}

type RPCAddressBookPeerResponse struct {
	Info *DNPeer `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *RPCAddressBookPeerResponse) Reset()                    { *m = RPCAddressBookPeerResponse{} }
func (m *RPCAddressBookPeerResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCAddressBookPeerResponse) ProtoMessage()               {}
func (*RPCAddressBookPeerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RPCAddressBookPeerResponse) GetInfo() *DNPeer {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*DNPeer)(nil), "pb.DNPeer")
	proto.RegisterType((*RPCAddressBookPeerRequest)(nil), "pb.RPCAddressBookPeerRequest")
	proto.RegisterType((*RPCAddressBookPeerResponse)(nil), "pb.RPCAddressBookPeerResponse")
}

func init() { proto.RegisterFile("pb/addressbook.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x48, 0xd2, 0x4f,
	0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x4e, 0xca, 0xcf, 0xcf, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2, 0xe3, 0x62, 0x73, 0xf1, 0x0b, 0x48, 0x4d, 0x2d, 0x12, 0x12,
	0xe2, 0x62, 0x49, 0xc9, 0xf3, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0x02, 0xb3, 0x85,
	0x04, 0xb8, 0x98, 0x0b, 0x3c, 0x53, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x25,
	0x47, 0x2e, 0xc9, 0xa0, 0x00, 0x67, 0x47, 0x88, 0x59, 0x4e, 0xf9, 0xf9, 0xd9, 0x20, 0xbd, 0x41,
	0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x44, 0x1a, 0x61, 0xc3, 0x25, 0x85, 0xcd, 0x88, 0xe2, 0x82,
	0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x39, 0x2e, 0x96, 0xcc, 0xbc, 0xb4, 0x7c, 0xb0, 0x19, 0xdc, 0x46,
	0x5c, 0x7a, 0x05, 0x49, 0x7a, 0x10, 0x07, 0x06, 0x81, 0xc5, 0x9d, 0x98, 0x3c, 0x98, 0x93, 0xd8,
	0xc0, 0xee, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x0f, 0x87, 0xbf, 0xd7, 0x00, 0x00,
	0x00,
}
