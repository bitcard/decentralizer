// Code generated by protoc-gen-go.
// source: decentralizer.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	decentralizer.proto
	models.proto
	rpc.proto

It has these top-level messages:
	GetPeersRequest
	GetPeersResponse
	SearchRequest
	PeerMessageReceived
	Peer
	GetServiceRequest
	GetServiceResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetPeersRequest struct {
	// Name of your service.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Limit of how many peers you would like the receive. Send 0 to get all.
	Limit int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetPeersRequest) Reset()                    { *m = GetPeersRequest{} }
func (m *GetPeersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPeersRequest) ProtoMessage()               {}
func (*GetPeersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetPeersRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetPeersRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetPeersResponse struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *GetPeersResponse) Reset()                    { *m = GetPeersResponse{} }
func (m *GetPeersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPeersResponse) ProtoMessage()               {}
func (*GetPeersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetPeersResponse) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type SearchRequest struct {
	// Name of your service.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The port of this service. If you are not advertising any services and just find to find peers. Set this to 0.
	Port int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type PeerMessageReceived struct {
	Peer string `protobuf:"bytes,1,opt,name=Peer" json:"Peer,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PeerMessageReceived) Reset()                    { *m = PeerMessageReceived{} }
func (m *PeerMessageReceived) String() string            { return proto.CompactTextString(m) }
func (*PeerMessageReceived) ProtoMessage()               {}
func (*PeerMessageReceived) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PeerMessageReceived) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *PeerMessageReceived) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPeersRequest)(nil), "pb.getPeersRequest")
	proto.RegisterType((*GetPeersResponse)(nil), "pb.getPeersResponse")
	proto.RegisterType((*SearchRequest)(nil), "pb.searchRequest")
	proto.RegisterType((*PeerMessageReceived)(nil), "pb.peerMessageReceived")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Decentralizer service

type DecentralizerClient interface {
	// Start the search for peers. Returns messages received from peers.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Decentralizer_SearchClient, error)
	// Get peers found for a specific service.
	GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (*GetPeersResponse, error)
}

type decentralizerClient struct {
	cc *grpc.ClientConn
}

func NewDecentralizerClient(cc *grpc.ClientConn) DecentralizerClient {
	return &decentralizerClient{cc}
}

func (c *decentralizerClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Decentralizer_SearchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Decentralizer_serviceDesc.Streams[0], c.cc, "/pb.decentralizer/search", opts...)
	if err != nil {
		return nil, err
	}
	x := &decentralizerSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Decentralizer_SearchClient interface {
	Recv() (*PeerMessageReceived, error)
	grpc.ClientStream
}

type decentralizerSearchClient struct {
	grpc.ClientStream
}

func (x *decentralizerSearchClient) Recv() (*PeerMessageReceived, error) {
	m := new(PeerMessageReceived)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *decentralizerClient) GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (*GetPeersResponse, error) {
	out := new(GetPeersResponse)
	err := grpc.Invoke(ctx, "/pb.decentralizer/getPeers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Decentralizer service

type DecentralizerServer interface {
	// Start the search for peers. Returns messages received from peers.
	Search(*SearchRequest, Decentralizer_SearchServer) error
	// Get peers found for a specific service.
	GetPeers(context.Context, *GetPeersRequest) (*GetPeersResponse, error)
}

func RegisterDecentralizerServer(s *grpc.Server, srv DecentralizerServer) {
	s.RegisterService(&_Decentralizer_serviceDesc, srv)
}

func _Decentralizer_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecentralizerServer).Search(m, &decentralizerSearchServer{stream})
}

type Decentralizer_SearchServer interface {
	Send(*PeerMessageReceived) error
	grpc.ServerStream
}

type decentralizerSearchServer struct {
	grpc.ServerStream
}

func (x *decentralizerSearchServer) Send(m *PeerMessageReceived) error {
	return x.ServerStream.SendMsg(m)
}

func _Decentralizer_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecentralizerServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.decentralizer/GetPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecentralizerServer).GetPeers(ctx, req.(*GetPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Decentralizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.decentralizer",
	HandlerType: (*DecentralizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getPeers",
			Handler:    _Decentralizer_GetPeers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "search",
			Handler:       _Decentralizer_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "decentralizer.proto",
}

func init() { proto.RegisterFile("decentralizer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x14, 0xc4, 0x37, 0xeb, 0x76, 0x59, 0x9f, 0xbb, 0xa8, 0xaf, 0x0b, 0x96, 0x1e, 0xa4, 0xe4, 0xd4,
	0x53, 0x91, 0x7a, 0x58, 0x41, 0xbc, 0x78, 0xf2, 0x22, 0x48, 0xbe, 0x41, 0xda, 0x3e, 0xd6, 0x42,
	0xff, 0xc4, 0x24, 0x7a, 0xf0, 0xe8, 0x27, 0x97, 0x24, 0x14, 0xe9, 0x1e, 0xbc, 0x4d, 0x7f, 0xbc,
	0xe9, 0x4c, 0x06, 0xe2, 0x86, 0x6a, 0x1a, 0xac, 0x96, 0x5d, 0xfb, 0x4d, 0xba, 0x50, 0x7a, 0xb4,
	0x23, 0x2e, 0x55, 0x95, 0x6e, 0xfb, 0xb1, 0xa1, 0xce, 0x04, 0xc2, 0x1f, 0xe1, 0xf2, 0x48, 0xf6,
	0x8d, 0x48, 0x1b, 0x41, 0x1f, 0x9f, 0x64, 0x2c, 0x22, 0xac, 0x06, 0xd9, 0x53, 0xc2, 0x32, 0x96,
	0x9f, 0x0b, 0xaf, 0x71, 0x0f, 0x51, 0xd7, 0xf6, 0xad, 0x4d, 0x96, 0x19, 0xcb, 0x23, 0x11, 0x3e,
	0x78, 0x09, 0x57, 0x7f, 0x66, 0xa3, 0xc6, 0xc1, 0x10, 0xde, 0x42, 0xa4, 0x1c, 0x48, 0x58, 0x76,
	0x96, 0x5f, 0x94, 0x9b, 0x42, 0x55, 0x85, 0x03, 0x22, 0x60, 0x7e, 0x80, 0x9d, 0x21, 0xa9, 0xeb,
	0xf7, 0xff, 0xe2, 0x10, 0x56, 0x6a, 0xd4, 0x53, 0x9a, 0xd7, 0xfc, 0x09, 0x62, 0xf7, 0x87, 0x57,
	0x32, 0x46, 0x1e, 0x49, 0x50, 0x4d, 0xed, 0x17, 0x35, 0xee, 0xd4, 0x15, 0x98, 0xec, 0x4e, 0x3b,
	0xd6, 0x48, 0x2b, 0xbd, 0x7d, 0x2b, 0xbc, 0x2e, 0x7f, 0x18, 0xec, 0x66, 0x93, 0xe0, 0x03, 0xac,
	0x43, 0x13, 0xbc, 0x76, 0x25, 0x67, 0xad, 0xd2, 0x9b, 0xa9, 0xf7, 0x49, 0x1e, 0x5f, 0xdc, 0x31,
	0x3c, 0xc0, 0x66, 0x7a, 0x37, 0xc6, 0xee, 0xf0, 0x64, 0xc2, 0x74, 0x3f, 0x87, 0x61, 0x1a, 0xbe,
	0x78, 0x5e, 0xbe, 0xb0, 0x6a, 0xed, 0x87, 0xbf, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x7d,
	0xdb, 0xd9, 0xa1, 0x01, 0x00, 0x00,
}
