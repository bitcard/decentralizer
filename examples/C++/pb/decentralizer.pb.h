// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decentralizer.proto

#ifndef PROTOBUF_decentralizer_2eproto__INCLUDED
#define PROTOBUF_decentralizer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "models.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_decentralizer_2eproto();
void protobuf_InitDefaults_decentralizer_2eproto();
void protobuf_AssignDesc_decentralizer_2eproto();
void protobuf_ShutdownFile_decentralizer_2eproto();

class getPeersRequest;
class getPeersResponse;
class peerMessageReceived;
class searchRequest;

// ===================================================================

class getPeersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.getPeersRequest) */ {
 public:
  getPeersRequest();
  virtual ~getPeersRequest();

  getPeersRequest(const getPeersRequest& from);

  inline getPeersRequest& operator=(const getPeersRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getPeersRequest& default_instance();

  static const getPeersRequest* internal_default_instance();

  void Swap(getPeersRequest* other);

  // implements Message ----------------------------------------------

  inline getPeersRequest* New() const { return New(NULL); }

  getPeersRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getPeersRequest& from);
  void MergeFrom(const getPeersRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(getPeersRequest* other);
  void UnsafeMergeFrom(const getPeersRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.getPeersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 limit_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_decentralizer_2eproto_impl();
  friend void  protobuf_AddDesc_decentralizer_2eproto_impl();
  friend void protobuf_AssignDesc_decentralizer_2eproto();
  friend void protobuf_ShutdownFile_decentralizer_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<getPeersRequest> getPeersRequest_default_instance_;

// -------------------------------------------------------------------

class getPeersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.getPeersResponse) */ {
 public:
  getPeersResponse();
  virtual ~getPeersResponse();

  getPeersResponse(const getPeersResponse& from);

  inline getPeersResponse& operator=(const getPeersResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getPeersResponse& default_instance();

  static const getPeersResponse* internal_default_instance();

  void Swap(getPeersResponse* other);

  // implements Message ----------------------------------------------

  inline getPeersResponse* New() const { return New(NULL); }

  getPeersResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getPeersResponse& from);
  void MergeFrom(const getPeersResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(getPeersResponse* other);
  void UnsafeMergeFrom(const getPeersResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.peer peers = 1;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 1;
  const ::pb::peer& peers(int index) const;
  ::pb::peer* mutable_peers(int index);
  ::pb::peer* add_peers();
  ::google::protobuf::RepeatedPtrField< ::pb::peer >*
      mutable_peers();
  const ::google::protobuf::RepeatedPtrField< ::pb::peer >&
      peers() const;

  // @@protoc_insertion_point(class_scope:pb.getPeersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::peer > peers_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_decentralizer_2eproto_impl();
  friend void  protobuf_AddDesc_decentralizer_2eproto_impl();
  friend void protobuf_AssignDesc_decentralizer_2eproto();
  friend void protobuf_ShutdownFile_decentralizer_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<getPeersResponse> getPeersResponse_default_instance_;

// -------------------------------------------------------------------

class searchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.searchRequest) */ {
 public:
  searchRequest();
  virtual ~searchRequest();

  searchRequest(const searchRequest& from);

  inline searchRequest& operator=(const searchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const searchRequest& default_instance();

  static const searchRequest* internal_default_instance();

  void Swap(searchRequest* other);

  // implements Message ----------------------------------------------

  inline searchRequest* New() const { return New(NULL); }

  searchRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const searchRequest& from);
  void MergeFrom(const searchRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(searchRequest* other);
  void UnsafeMergeFrom(const searchRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.searchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_decentralizer_2eproto_impl();
  friend void  protobuf_AddDesc_decentralizer_2eproto_impl();
  friend void protobuf_AssignDesc_decentralizer_2eproto();
  friend void protobuf_ShutdownFile_decentralizer_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<searchRequest> searchRequest_default_instance_;

// -------------------------------------------------------------------

class peerMessageReceived : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.peerMessageReceived) */ {
 public:
  peerMessageReceived();
  virtual ~peerMessageReceived();

  peerMessageReceived(const peerMessageReceived& from);

  inline peerMessageReceived& operator=(const peerMessageReceived& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const peerMessageReceived& default_instance();

  static const peerMessageReceived* internal_default_instance();

  void Swap(peerMessageReceived* other);

  // implements Message ----------------------------------------------

  inline peerMessageReceived* New() const { return New(NULL); }

  peerMessageReceived* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const peerMessageReceived& from);
  void MergeFrom(const peerMessageReceived& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(peerMessageReceived* other);
  void UnsafeMergeFrom(const peerMessageReceived& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Peer = 1;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::std::string& peer() const;
  void set_peer(const ::std::string& value);
  void set_peer(const char* value);
  void set_peer(const char* value, size_t size);
  ::std::string* mutable_peer();
  ::std::string* release_peer();
  void set_allocated_peer(::std::string* peer);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:pb.peerMessageReceived)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr peer_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_decentralizer_2eproto_impl();
  friend void  protobuf_AddDesc_decentralizer_2eproto_impl();
  friend void protobuf_AssignDesc_decentralizer_2eproto();
  friend void protobuf_ShutdownFile_decentralizer_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<peerMessageReceived> peerMessageReceived_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// getPeersRequest

// optional string name = 1;
inline void getPeersRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& getPeersRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.getPeersRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getPeersRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.getPeersRequest.name)
}
inline void getPeersRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.getPeersRequest.name)
}
inline void getPeersRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.getPeersRequest.name)
}
inline ::std::string* getPeersRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.getPeersRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* getPeersRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.getPeersRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getPeersRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.getPeersRequest.name)
}

// optional int32 limit = 2;
inline void getPeersRequest::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 getPeersRequest::limit() const {
  // @@protoc_insertion_point(field_get:pb.getPeersRequest.limit)
  return limit_;
}
inline void getPeersRequest::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.getPeersRequest.limit)
}

inline const getPeersRequest* getPeersRequest::internal_default_instance() {
  return &getPeersRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// getPeersResponse

// repeated .pb.peer peers = 1;
inline int getPeersResponse::peers_size() const {
  return peers_.size();
}
inline void getPeersResponse::clear_peers() {
  peers_.Clear();
}
inline const ::pb::peer& getPeersResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:pb.getPeersResponse.peers)
  return peers_.Get(index);
}
inline ::pb::peer* getPeersResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:pb.getPeersResponse.peers)
  return peers_.Mutable(index);
}
inline ::pb::peer* getPeersResponse::add_peers() {
  // @@protoc_insertion_point(field_add:pb.getPeersResponse.peers)
  return peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::peer >*
getPeersResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:pb.getPeersResponse.peers)
  return &peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::peer >&
getPeersResponse::peers() const {
  // @@protoc_insertion_point(field_list:pb.getPeersResponse.peers)
  return peers_;
}

inline const getPeersResponse* getPeersResponse::internal_default_instance() {
  return &getPeersResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// searchRequest

// optional string name = 1;
inline void searchRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& searchRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.searchRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void searchRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.searchRequest.name)
}
inline void searchRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.searchRequest.name)
}
inline void searchRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.searchRequest.name)
}
inline ::std::string* searchRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.searchRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* searchRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.searchRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void searchRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.searchRequest.name)
}

// optional int32 port = 2;
inline void searchRequest::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 searchRequest::port() const {
  // @@protoc_insertion_point(field_get:pb.searchRequest.port)
  return port_;
}
inline void searchRequest::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:pb.searchRequest.port)
}

inline const searchRequest* searchRequest::internal_default_instance() {
  return &searchRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// peerMessageReceived

// optional string Peer = 1;
inline void peerMessageReceived::clear_peer() {
  peer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& peerMessageReceived::peer() const {
  // @@protoc_insertion_point(field_get:pb.peerMessageReceived.Peer)
  return peer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void peerMessageReceived::set_peer(const ::std::string& value) {
  
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.peerMessageReceived.Peer)
}
inline void peerMessageReceived::set_peer(const char* value) {
  
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.peerMessageReceived.Peer)
}
inline void peerMessageReceived::set_peer(const char* value, size_t size) {
  
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.peerMessageReceived.Peer)
}
inline ::std::string* peerMessageReceived::mutable_peer() {
  
  // @@protoc_insertion_point(field_mutable:pb.peerMessageReceived.Peer)
  return peer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* peerMessageReceived::release_peer() {
  // @@protoc_insertion_point(field_release:pb.peerMessageReceived.Peer)
  
  return peer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void peerMessageReceived::set_allocated_peer(::std::string* peer) {
  if (peer != NULL) {
    
  } else {
    
  }
  peer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer);
  // @@protoc_insertion_point(field_set_allocated:pb.peerMessageReceived.Peer)
}

// optional bytes data = 2;
inline void peerMessageReceived::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& peerMessageReceived::data() const {
  // @@protoc_insertion_point(field_get:pb.peerMessageReceived.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void peerMessageReceived::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.peerMessageReceived.data)
}
inline void peerMessageReceived::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.peerMessageReceived.data)
}
inline void peerMessageReceived::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.peerMessageReceived.data)
}
inline ::std::string* peerMessageReceived::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:pb.peerMessageReceived.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* peerMessageReceived::release_data() {
  // @@protoc_insertion_point(field_release:pb.peerMessageReceived.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void peerMessageReceived::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.peerMessageReceived.data)
}

inline const peerMessageReceived* peerMessageReceived::internal_default_instance() {
  return &peerMessageReceived_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_decentralizer_2eproto__INCLUDED
