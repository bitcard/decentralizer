// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: decentralizer.proto

#include "decentralizer.pb.h"
#include "decentralizer.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace pb {

static const char* decentralizer_method_names[] = {
  "/pb.decentralizer/search",
  "/pb.decentralizer/getPeers",
};

std::unique_ptr< decentralizer::Stub> decentralizer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< decentralizer::Stub> stub(new decentralizer::Stub(channel));
  return stub;
}

decentralizer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_search_(decentralizer_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_getPeers_(decentralizer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::pb::peerMessageReceived>* decentralizer::Stub::searchRaw(::grpc::ClientContext* context, const ::pb::searchRequest& request) {
  return new ::grpc::ClientReader< ::pb::peerMessageReceived>(channel_.get(), rpcmethod_search_, context, request);
}

::grpc::ClientAsyncReader< ::pb::peerMessageReceived>* decentralizer::Stub::AsyncsearchRaw(::grpc::ClientContext* context, const ::pb::searchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::pb::peerMessageReceived>(channel_.get(), cq, rpcmethod_search_, context, request, tag);
}

::grpc::Status decentralizer::Stub::getPeers(::grpc::ClientContext* context, const ::pb::getPeersRequest& request, ::pb::getPeersResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getPeers_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::getPeersResponse>* decentralizer::Stub::AsyncgetPeersRaw(::grpc::ClientContext* context, const ::pb::getPeersRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::pb::getPeersResponse>(channel_.get(), cq, rpcmethod_getPeers_, context, request);
}

decentralizer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      decentralizer_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< decentralizer::Service, ::pb::searchRequest, ::pb::peerMessageReceived>(
          std::mem_fn(&decentralizer::Service::search), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      decentralizer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< decentralizer::Service, ::pb::getPeersRequest, ::pb::getPeersResponse>(
          std::mem_fn(&decentralizer::Service::getPeers), this)));
}

decentralizer::Service::~Service() {
}

::grpc::Status decentralizer::Service::search(::grpc::ServerContext* context, const ::pb::searchRequest* request, ::grpc::ServerWriter< ::pb::peerMessageReceived>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status decentralizer::Service::getPeers(::grpc::ServerContext* context, const ::pb::getPeersRequest* request, ::pb::getPeersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pb

