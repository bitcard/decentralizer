// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decentralizer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "decentralizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* getPeersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getPeersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* getPeersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getPeersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* searchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  searchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* peerMessageReceived_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  peerMessageReceived_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_decentralizer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_decentralizer_2eproto() {
  protobuf_AddDesc_decentralizer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "decentralizer.proto");
  GOOGLE_CHECK(file != NULL);
  getPeersRequest_descriptor_ = file->message_type(0);
  static const int getPeersRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPeersRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPeersRequest, limit_),
  };
  getPeersRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      getPeersRequest_descriptor_,
      getPeersRequest::internal_default_instance(),
      getPeersRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(getPeersRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPeersRequest, _internal_metadata_));
  getPeersResponse_descriptor_ = file->message_type(1);
  static const int getPeersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPeersResponse, peers_),
  };
  getPeersResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      getPeersResponse_descriptor_,
      getPeersResponse::internal_default_instance(),
      getPeersResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(getPeersResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getPeersResponse, _internal_metadata_));
  searchRequest_descriptor_ = file->message_type(2);
  static const int searchRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(searchRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(searchRequest, port_),
  };
  searchRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      searchRequest_descriptor_,
      searchRequest::internal_default_instance(),
      searchRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(searchRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(searchRequest, _internal_metadata_));
  peerMessageReceived_descriptor_ = file->message_type(3);
  static const int peerMessageReceived_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(peerMessageReceived, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(peerMessageReceived, data_),
  };
  peerMessageReceived_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      peerMessageReceived_descriptor_,
      peerMessageReceived::internal_default_instance(),
      peerMessageReceived_offsets_,
      -1,
      -1,
      -1,
      sizeof(peerMessageReceived),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(peerMessageReceived, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_decentralizer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      getPeersRequest_descriptor_, getPeersRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      getPeersResponse_descriptor_, getPeersResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      searchRequest_descriptor_, searchRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      peerMessageReceived_descriptor_, peerMessageReceived::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_decentralizer_2eproto() {
  getPeersRequest_default_instance_.Shutdown();
  delete getPeersRequest_reflection_;
  getPeersResponse_default_instance_.Shutdown();
  delete getPeersResponse_reflection_;
  searchRequest_default_instance_.Shutdown();
  delete searchRequest_reflection_;
  peerMessageReceived_default_instance_.Shutdown();
  delete peerMessageReceived_reflection_;
}

void protobuf_InitDefaults_decentralizer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_InitDefaults_models_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  getPeersRequest_default_instance_.DefaultConstruct();
  getPeersResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  searchRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  peerMessageReceived_default_instance_.DefaultConstruct();
  getPeersRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  getPeersResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  searchRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  peerMessageReceived_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_decentralizer_2eproto_once_);
void protobuf_InitDefaults_decentralizer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_decentralizer_2eproto_once_,
                 &protobuf_InitDefaults_decentralizer_2eproto_impl);
}
void protobuf_AddDesc_decentralizer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_decentralizer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023decentralizer.proto\022\002pb\032\014models.proto\""
    ".\n\017getPeersRequest\022\014\n\004name\030\001 \001(\t\022\r\n\005limi"
    "t\030\002 \001(\005\"+\n\020getPeersResponse\022\027\n\005peers\030\001 \003"
    "(\0132\010.pb.peer\"+\n\rsearchRequest\022\014\n\004name\030\001 "
    "\001(\t\022\014\n\004port\030\002 \001(\005\"1\n\023peerMessageReceived"
    "\022\014\n\004Peer\030\001 \001(\t\022\014\n\004data\030\002 \001(\0142\202\001\n\rdecentr"
    "alizer\0228\n\006search\022\021.pb.searchRequest\032\027.pb"
    ".peerMessageReceived\"\0000\001\0227\n\010getPeers\022\023.p"
    "b.getPeersRequest\032\024.pb.getPeersResponse\""
    "\000B\002H\001b\006proto3", 373);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decentralizer.proto", &protobuf_RegisterTypes);
  ::pb::protobuf_AddDesc_models_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_decentralizer_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_decentralizer_2eproto_once_);
void protobuf_AddDesc_decentralizer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_decentralizer_2eproto_once_,
                 &protobuf_AddDesc_decentralizer_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_decentralizer_2eproto {
  StaticDescriptorInitializer_decentralizer_2eproto() {
    protobuf_AddDesc_decentralizer_2eproto();
  }
} static_descriptor_initializer_decentralizer_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int getPeersRequest::kNameFieldNumber;
const int getPeersRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

getPeersRequest::getPeersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_decentralizer_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.getPeersRequest)
}

void getPeersRequest::InitAsDefaultInstance() {
}

getPeersRequest::getPeersRequest(const getPeersRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.getPeersRequest)
}

void getPeersRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _cached_size_ = 0;
}

getPeersRequest::~getPeersRequest() {
  // @@protoc_insertion_point(destructor:pb.getPeersRequest)
  SharedDtor();
}

void getPeersRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void getPeersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getPeersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getPeersRequest_descriptor_;
}

const getPeersRequest& getPeersRequest::default_instance() {
  protobuf_InitDefaults_decentralizer_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<getPeersRequest> getPeersRequest_default_instance_;

getPeersRequest* getPeersRequest::New(::google::protobuf::Arena* arena) const {
  getPeersRequest* n = new getPeersRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void getPeersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.getPeersRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

bool getPeersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.getPeersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.getPeersRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // optional int32 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.getPeersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.getPeersRequest)
  return false;
#undef DO_
}

void getPeersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.getPeersRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.getPeersRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.getPeersRequest)
}

::google::protobuf::uint8* getPeersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.getPeersRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.getPeersRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.getPeersRequest)
  return target;
}

size_t getPeersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.getPeersRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getPeersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.getPeersRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const getPeersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const getPeersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.getPeersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.getPeersRequest)
    UnsafeMergeFrom(*source);
  }
}

void getPeersRequest::MergeFrom(const getPeersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.getPeersRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void getPeersRequest::UnsafeMergeFrom(const getPeersRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void getPeersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.getPeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getPeersRequest::CopyFrom(const getPeersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.getPeersRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool getPeersRequest::IsInitialized() const {

  return true;
}

void getPeersRequest::Swap(getPeersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void getPeersRequest::InternalSwap(getPeersRequest* other) {
  name_.Swap(&other->name_);
  std::swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata getPeersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getPeersRequest_descriptor_;
  metadata.reflection = getPeersRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// getPeersRequest

// optional string name = 1;
void getPeersRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& getPeersRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.getPeersRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void getPeersRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.getPeersRequest.name)
}
void getPeersRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.getPeersRequest.name)
}
void getPeersRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.getPeersRequest.name)
}
::std::string* getPeersRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.getPeersRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* getPeersRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.getPeersRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void getPeersRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.getPeersRequest.name)
}

// optional int32 limit = 2;
void getPeersRequest::clear_limit() {
  limit_ = 0;
}
::google::protobuf::int32 getPeersRequest::limit() const {
  // @@protoc_insertion_point(field_get:pb.getPeersRequest.limit)
  return limit_;
}
void getPeersRequest::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.getPeersRequest.limit)
}

inline const getPeersRequest* getPeersRequest::internal_default_instance() {
  return &getPeersRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int getPeersResponse::kPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

getPeersResponse::getPeersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_decentralizer_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.getPeersResponse)
}

void getPeersResponse::InitAsDefaultInstance() {
}

getPeersResponse::getPeersResponse(const getPeersResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.getPeersResponse)
}

void getPeersResponse::SharedCtor() {
  _cached_size_ = 0;
}

getPeersResponse::~getPeersResponse() {
  // @@protoc_insertion_point(destructor:pb.getPeersResponse)
  SharedDtor();
}

void getPeersResponse::SharedDtor() {
}

void getPeersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getPeersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getPeersResponse_descriptor_;
}

const getPeersResponse& getPeersResponse::default_instance() {
  protobuf_InitDefaults_decentralizer_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<getPeersResponse> getPeersResponse_default_instance_;

getPeersResponse* getPeersResponse::New(::google::protobuf::Arena* arena) const {
  getPeersResponse* n = new getPeersResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void getPeersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.getPeersResponse)
  peers_.Clear();
}

bool getPeersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.getPeersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.peer peers = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_peers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.getPeersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.getPeersResponse)
  return false;
#undef DO_
}

void getPeersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.getPeersResponse)
  // repeated .pb.peer peers = 1;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.getPeersResponse)
}

::google::protobuf::uint8* getPeersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.getPeersResponse)
  // repeated .pb.peer peers = 1;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->peers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.getPeersResponse)
  return target;
}

size_t getPeersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.getPeersResponse)
  size_t total_size = 0;

  // repeated .pb.peer peers = 1;
  {
    unsigned int count = this->peers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getPeersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.getPeersResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const getPeersResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const getPeersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.getPeersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.getPeersResponse)
    UnsafeMergeFrom(*source);
  }
}

void getPeersResponse::MergeFrom(const getPeersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.getPeersResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void getPeersResponse::UnsafeMergeFrom(const getPeersResponse& from) {
  GOOGLE_DCHECK(&from != this);
  peers_.MergeFrom(from.peers_);
}

void getPeersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.getPeersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getPeersResponse::CopyFrom(const getPeersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.getPeersResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool getPeersResponse::IsInitialized() const {

  return true;
}

void getPeersResponse::Swap(getPeersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void getPeersResponse::InternalSwap(getPeersResponse* other) {
  peers_.UnsafeArenaSwap(&other->peers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata getPeersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getPeersResponse_descriptor_;
  metadata.reflection = getPeersResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// getPeersResponse

// repeated .pb.peer peers = 1;
int getPeersResponse::peers_size() const {
  return peers_.size();
}
void getPeersResponse::clear_peers() {
  peers_.Clear();
}
const ::pb::peer& getPeersResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:pb.getPeersResponse.peers)
  return peers_.Get(index);
}
::pb::peer* getPeersResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:pb.getPeersResponse.peers)
  return peers_.Mutable(index);
}
::pb::peer* getPeersResponse::add_peers() {
  // @@protoc_insertion_point(field_add:pb.getPeersResponse.peers)
  return peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::peer >*
getPeersResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:pb.getPeersResponse.peers)
  return &peers_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::peer >&
getPeersResponse::peers() const {
  // @@protoc_insertion_point(field_list:pb.getPeersResponse.peers)
  return peers_;
}

inline const getPeersResponse* getPeersResponse::internal_default_instance() {
  return &getPeersResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int searchRequest::kNameFieldNumber;
const int searchRequest::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

searchRequest::searchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_decentralizer_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.searchRequest)
}

void searchRequest::InitAsDefaultInstance() {
}

searchRequest::searchRequest(const searchRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.searchRequest)
}

void searchRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _cached_size_ = 0;
}

searchRequest::~searchRequest() {
  // @@protoc_insertion_point(destructor:pb.searchRequest)
  SharedDtor();
}

void searchRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void searchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* searchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return searchRequest_descriptor_;
}

const searchRequest& searchRequest::default_instance() {
  protobuf_InitDefaults_decentralizer_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<searchRequest> searchRequest_default_instance_;

searchRequest* searchRequest::New(::google::protobuf::Arena* arena) const {
  searchRequest* n = new searchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void searchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.searchRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

bool searchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.searchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.searchRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.searchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.searchRequest)
  return false;
#undef DO_
}

void searchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.searchRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.searchRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.searchRequest)
}

::google::protobuf::uint8* searchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.searchRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.searchRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.searchRequest)
  return target;
}

size_t searchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.searchRequest)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void searchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.searchRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const searchRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const searchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.searchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.searchRequest)
    UnsafeMergeFrom(*source);
  }
}

void searchRequest::MergeFrom(const searchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.searchRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void searchRequest::UnsafeMergeFrom(const searchRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void searchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.searchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void searchRequest::CopyFrom(const searchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.searchRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool searchRequest::IsInitialized() const {

  return true;
}

void searchRequest::Swap(searchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void searchRequest::InternalSwap(searchRequest* other) {
  name_.Swap(&other->name_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata searchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = searchRequest_descriptor_;
  metadata.reflection = searchRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// searchRequest

// optional string name = 1;
void searchRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& searchRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.searchRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void searchRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.searchRequest.name)
}
void searchRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.searchRequest.name)
}
void searchRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.searchRequest.name)
}
::std::string* searchRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.searchRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* searchRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.searchRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void searchRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.searchRequest.name)
}

// optional int32 port = 2;
void searchRequest::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 searchRequest::port() const {
  // @@protoc_insertion_point(field_get:pb.searchRequest.port)
  return port_;
}
void searchRequest::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:pb.searchRequest.port)
}

inline const searchRequest* searchRequest::internal_default_instance() {
  return &searchRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int peerMessageReceived::kPeerFieldNumber;
const int peerMessageReceived::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

peerMessageReceived::peerMessageReceived()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_decentralizer_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.peerMessageReceived)
}

void peerMessageReceived::InitAsDefaultInstance() {
}

peerMessageReceived::peerMessageReceived(const peerMessageReceived& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.peerMessageReceived)
}

void peerMessageReceived::SharedCtor() {
  peer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

peerMessageReceived::~peerMessageReceived() {
  // @@protoc_insertion_point(destructor:pb.peerMessageReceived)
  SharedDtor();
}

void peerMessageReceived::SharedDtor() {
  peer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void peerMessageReceived::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* peerMessageReceived::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return peerMessageReceived_descriptor_;
}

const peerMessageReceived& peerMessageReceived::default_instance() {
  protobuf_InitDefaults_decentralizer_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<peerMessageReceived> peerMessageReceived_default_instance_;

peerMessageReceived* peerMessageReceived::New(::google::protobuf::Arena* arena) const {
  peerMessageReceived* n = new peerMessageReceived;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void peerMessageReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.peerMessageReceived)
  peer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool peerMessageReceived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.peerMessageReceived)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Peer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer().data(), this->peer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.peerMessageReceived.Peer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.peerMessageReceived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.peerMessageReceived)
  return false;
#undef DO_
}

void peerMessageReceived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.peerMessageReceived)
  // optional string Peer = 1;
  if (this->peer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer().data(), this->peer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.peerMessageReceived.Peer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->peer(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.peerMessageReceived)
}

::google::protobuf::uint8* peerMessageReceived::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.peerMessageReceived)
  // optional string Peer = 1;
  if (this->peer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer().data(), this->peer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.peerMessageReceived.Peer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peer(), target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.peerMessageReceived)
  return target;
}

size_t peerMessageReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.peerMessageReceived)
  size_t total_size = 0;

  // optional string Peer = 1;
  if (this->peer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void peerMessageReceived::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.peerMessageReceived)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const peerMessageReceived* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const peerMessageReceived>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.peerMessageReceived)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.peerMessageReceived)
    UnsafeMergeFrom(*source);
  }
}

void peerMessageReceived::MergeFrom(const peerMessageReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.peerMessageReceived)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void peerMessageReceived::UnsafeMergeFrom(const peerMessageReceived& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.peer().size() > 0) {

    peer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void peerMessageReceived::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.peerMessageReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void peerMessageReceived::CopyFrom(const peerMessageReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.peerMessageReceived)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool peerMessageReceived::IsInitialized() const {

  return true;
}

void peerMessageReceived::Swap(peerMessageReceived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void peerMessageReceived::InternalSwap(peerMessageReceived* other) {
  peer_.Swap(&other->peer_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata peerMessageReceived::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = peerMessageReceived_descriptor_;
  metadata.reflection = peerMessageReceived_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// peerMessageReceived

// optional string Peer = 1;
void peerMessageReceived::clear_peer() {
  peer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& peerMessageReceived::peer() const {
  // @@protoc_insertion_point(field_get:pb.peerMessageReceived.Peer)
  return peer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void peerMessageReceived::set_peer(const ::std::string& value) {
  
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.peerMessageReceived.Peer)
}
void peerMessageReceived::set_peer(const char* value) {
  
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.peerMessageReceived.Peer)
}
void peerMessageReceived::set_peer(const char* value, size_t size) {
  
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.peerMessageReceived.Peer)
}
::std::string* peerMessageReceived::mutable_peer() {
  
  // @@protoc_insertion_point(field_mutable:pb.peerMessageReceived.Peer)
  return peer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* peerMessageReceived::release_peer() {
  // @@protoc_insertion_point(field_release:pb.peerMessageReceived.Peer)
  
  return peer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void peerMessageReceived::set_allocated_peer(::std::string* peer) {
  if (peer != NULL) {
    
  } else {
    
  }
  peer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer);
  // @@protoc_insertion_point(field_set_allocated:pb.peerMessageReceived.Peer)
}

// optional bytes data = 2;
void peerMessageReceived::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& peerMessageReceived::data() const {
  // @@protoc_insertion_point(field_get:pb.peerMessageReceived.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void peerMessageReceived::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.peerMessageReceived.data)
}
void peerMessageReceived::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.peerMessageReceived.data)
}
void peerMessageReceived::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.peerMessageReceived.data)
}
::std::string* peerMessageReceived::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:pb.peerMessageReceived.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* peerMessageReceived::release_data() {
  // @@protoc_insertion_point(field_release:pb.peerMessageReceived.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void peerMessageReceived::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.peerMessageReceived.data)
}

inline const peerMessageReceived* peerMessageReceived::internal_default_instance() {
  return &peerMessageReceived_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
