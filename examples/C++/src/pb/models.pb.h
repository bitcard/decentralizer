// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: models.proto

#ifndef PROTOBUF_models_2eproto__INCLUDED
#define PROTOBUF_models_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_models_2eproto();
void protobuf_InitDefaults_models_2eproto();
void protobuf_AssignDesc_models_2eproto();
void protobuf_ShutdownFile_models_2eproto();

class peer;

// ===================================================================

class peer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.peer) */ {
 public:
  peer();
  virtual ~peer();

  peer(const peer& from);

  inline peer& operator=(const peer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const peer& default_instance();

  static const peer* internal_default_instance();

  void Swap(peer* other);

  // implements Message ----------------------------------------------

  inline peer* New() const { return New(NULL); }

  peer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const peer& from);
  void MergeFrom(const peer& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(peer* other);
  void UnsafeMergeFrom(const peer& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // optional uint32 rpcPort = 3;
  void clear_rpcport();
  static const int kRpcPortFieldNumber = 3;
  ::google::protobuf::uint32 rpcport() const;
  void set_rpcport(::google::protobuf::uint32 value);

  // map<string, string> details = 4;
  int details_size() const;
  void clear_details();
  static const int kDetailsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      details() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_details();

  // @@protoc_insertion_point(class_scope:pb.peer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      peer_DetailsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > details_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 rpcport_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_models_2eproto_impl();
  friend void  protobuf_AddDesc_models_2eproto_impl();
  friend void protobuf_AssignDesc_models_2eproto();
  friend void protobuf_ShutdownFile_models_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<peer> peer_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// peer

// optional string ip = 1;
inline void peer::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& peer::ip() const {
  // @@protoc_insertion_point(field_get:pb.peer.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void peer::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.peer.ip)
}
inline void peer::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.peer.ip)
}
inline void peer::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.peer.ip)
}
inline ::std::string* peer::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:pb.peer.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* peer::release_ip() {
  // @@protoc_insertion_point(field_release:pb.peer.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void peer::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:pb.peer.ip)
}

// optional uint32 port = 2;
inline void peer::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 peer::port() const {
  // @@protoc_insertion_point(field_get:pb.peer.port)
  return port_;
}
inline void peer::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:pb.peer.port)
}

// optional uint32 rpcPort = 3;
inline void peer::clear_rpcport() {
  rpcport_ = 0u;
}
inline ::google::protobuf::uint32 peer::rpcport() const {
  // @@protoc_insertion_point(field_get:pb.peer.rpcPort)
  return rpcport_;
}
inline void peer::set_rpcport(::google::protobuf::uint32 value) {
  
  rpcport_ = value;
  // @@protoc_insertion_point(field_set:pb.peer.rpcPort)
}

// map<string, string> details = 4;
inline int peer::details_size() const {
  return details_.size();
}
inline void peer::clear_details() {
  details_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
peer::details() const {
  // @@protoc_insertion_point(field_map:pb.peer.details)
  return details_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
peer::mutable_details() {
  // @@protoc_insertion_point(field_mutable_map:pb.peer.details)
  return details_.MutableMap();
}

inline const peer* peer::internal_default_instance() {
  return &peer_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_models_2eproto__INCLUDED
