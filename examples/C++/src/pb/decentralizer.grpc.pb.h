// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: decentralizer.proto
#ifndef GRPC_decentralizer_2eproto__INCLUDED
#define GRPC_decentralizer_2eproto__INCLUDED

#include "decentralizer.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace pb {

class decentralizer final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Start the search for peers. Returns messages received from peers.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::peerMessageReceived>> search(::grpc::ClientContext* context, const ::pb::searchRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::peerMessageReceived>>(searchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::peerMessageReceived>> Asyncsearch(::grpc::ClientContext* context, const ::pb::searchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::peerMessageReceived>>(AsyncsearchRaw(context, request, cq, tag));
    }
    // Get peers found for a specific service.
    virtual ::grpc::Status getPeers(::grpc::ClientContext* context, const ::pb::getPeersRequest& request, ::pb::getPeersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::getPeersResponse>> AsyncgetPeers(::grpc::ClientContext* context, const ::pb::getPeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::getPeersResponse>>(AsyncgetPeersRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::pb::peerMessageReceived>* searchRaw(::grpc::ClientContext* context, const ::pb::searchRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::peerMessageReceived>* AsyncsearchRaw(::grpc::ClientContext* context, const ::pb::searchRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::getPeersResponse>* AsyncgetPeersRaw(::grpc::ClientContext* context, const ::pb::getPeersRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::pb::peerMessageReceived>> search(::grpc::ClientContext* context, const ::pb::searchRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::peerMessageReceived>>(searchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::peerMessageReceived>> Asyncsearch(::grpc::ClientContext* context, const ::pb::searchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::peerMessageReceived>>(AsyncsearchRaw(context, request, cq, tag));
    }
    ::grpc::Status getPeers(::grpc::ClientContext* context, const ::pb::getPeersRequest& request, ::pb::getPeersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::getPeersResponse>> AsyncgetPeers(::grpc::ClientContext* context, const ::pb::getPeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::getPeersResponse>>(AsyncgetPeersRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::pb::peerMessageReceived>* searchRaw(::grpc::ClientContext* context, const ::pb::searchRequest& request) override;
    ::grpc::ClientAsyncReader< ::pb::peerMessageReceived>* AsyncsearchRaw(::grpc::ClientContext* context, const ::pb::searchRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::pb::getPeersResponse>* AsyncgetPeersRaw(::grpc::ClientContext* context, const ::pb::getPeersRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_search_;
    const ::grpc::RpcMethod rpcmethod_getPeers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Start the search for peers. Returns messages received from peers.
    virtual ::grpc::Status search(::grpc::ServerContext* context, const ::pb::searchRequest* request, ::grpc::ServerWriter< ::pb::peerMessageReceived>* writer);
    // Get peers found for a specific service.
    virtual ::grpc::Status getPeers(::grpc::ServerContext* context, const ::pb::getPeersRequest* request, ::pb::getPeersResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_search() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::pb::searchRequest* request, ::grpc::ServerWriter< ::pb::peerMessageReceived>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::pb::searchRequest* request, ::grpc::ServerAsyncWriter< ::pb::peerMessageReceived>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getPeers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPeers(::grpc::ServerContext* context, const ::pb::getPeersRequest* request, ::pb::getPeersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPeers(::grpc::ServerContext* context, ::pb::getPeersRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::getPeersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_search<WithAsyncMethod_getPeers<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_search() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::pb::searchRequest* request, ::grpc::ServerWriter< ::pb::peerMessageReceived>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getPeers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPeers(::grpc::ServerContext* context, const ::pb::getPeersRequest* request, ::pb::getPeersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getPeers() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::pb::getPeersRequest, ::pb::getPeersResponse>(std::bind(&WithStreamedUnaryMethod_getPeers<BaseClass>::StreamedgetPeers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPeers(::grpc::ServerContext* context, const ::pb::getPeersRequest* request, ::pb::getPeersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPeers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::getPeersRequest,::pb::getPeersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getPeers<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_search() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::SplitServerStreamingHandler< ::pb::searchRequest, ::pb::peerMessageReceived>(std::bind(&WithSplitStreamingMethod_search<BaseClass>::Streamedsearch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::pb::searchRequest* request, ::grpc::ServerWriter< ::pb::peerMessageReceived>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedsearch(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::searchRequest,::pb::peerMessageReceived>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_search<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_search<WithStreamedUnaryMethod_getPeers<Service > > StreamedService;
};

}  // namespace pb


#endif  // GRPC_decentralizer_2eproto__INCLUDED
