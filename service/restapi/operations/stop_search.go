package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// StopSearchHandlerFunc turns a function with the right signature into a stop search handler
type StopSearchHandlerFunc func(StopSearchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StopSearchHandlerFunc) Handle(params StopSearchParams) middleware.Responder {
	return fn(params)
}

// StopSearchHandler interface for that can handle valid stop search params
type StopSearchHandler interface {
	Handle(StopSearchParams) middleware.Responder
}

// NewStopSearch creates a new http.Handler for the stop search operation
func NewStopSearch(ctx *middleware.Context, handler StopSearchHandler) *StopSearch {
	return &StopSearch{Context: ctx, Handler: handler}
}

/*StopSearch swagger:route DELETE /v1/peers/{appName} stopSearch

Stop the search for this appName.

*/
type StopSearch struct {
	Context *middleware.Context
	Handler StopSearchHandler
}

func (o *StopSearch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewStopSearchParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
