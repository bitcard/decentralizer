package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStartSearchParams creates a new StartSearchParams object
// with the default values initialized.
func NewStartSearchParams() StartSearchParams {
	var (
		portDefault = int32(0)
	)
	return StartSearchParams{
		Port: &portDefault,
	}
}

// StartSearchParams contains all the bound params for the start search operation
// typically these are obtained from a http.Request
//
// swagger:parameters startSearch
type StartSearchParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  In: query
	  Default: 0
	*/
	Port *int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *StartSearchParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qPort, qhkPort, _ := qs.GetOK("port")
	if err := o.bindPort(qPort, qhkPort, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartSearchParams) bindPort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var portDefault int32 = int32(0)
		o.Port = &portDefault
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("port", "query", "int32", raw)
	}
	o.Port = &value

	return nil
}
