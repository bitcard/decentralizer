package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// StartSearchHandlerFunc turns a function with the right signature into a start search handler
type StartSearchHandlerFunc func(StartSearchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StartSearchHandlerFunc) Handle(params StartSearchParams) middleware.Responder {
	return fn(params)
}

// StartSearchHandler interface for that can handle valid start search params
type StartSearchHandler interface {
	Handle(StartSearchParams) middleware.Responder
}

// NewStartSearch creates a new http.Handler for the start search operation
func NewStartSearch(ctx *middleware.Context, handler StartSearchHandler) *StartSearch {
	return &StartSearch{Context: ctx, Handler: handler}
}

/*StartSearch swagger:route POST /v1/peers/{identifier} startSearch

Start the search for this identifier.

*/
type StartSearch struct {
	Context *middleware.Context
	Handler StartSearchHandler
}

func (o *StartSearch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewStartSearchParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
