// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_common_2eproto() {
  HealthRequest_default_instance_.Shutdown();
  HealthReply_default_instance_.Shutdown();
}

void protobuf_InitDefaults_common_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  HealthRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HealthReply_default_instance_.DefaultConstruct();
  HealthRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  HealthReply_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_common_2eproto_once_);
void protobuf_InitDefaults_common_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_common_2eproto_once_,
                 &protobuf_InitDefaults_common_2eproto_impl);
}
void protobuf_AddDesc_common_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_common_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_common_2eproto_once_);
void protobuf_AddDesc_common_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_common_2eproto_once_,
                 &protobuf_AddDesc_common_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthRequest::HealthRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_common_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:HealthRequest)
}

void HealthRequest::InitAsDefaultInstance() {
}

HealthRequest::HealthRequest(const HealthRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HealthRequest)
}

void HealthRequest::SharedCtor() {
  _cached_size_ = 0;
}

HealthRequest::~HealthRequest() {
  // @@protoc_insertion_point(destructor:HealthRequest)
  SharedDtor();
}

void HealthRequest::SharedDtor() {
}

void HealthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HealthRequest& HealthRequest::default_instance() {
  protobuf_InitDefaults_common_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HealthRequest> HealthRequest_default_instance_;

HealthRequest* HealthRequest::New(::google::protobuf::Arena* arena) const {
  HealthRequest* n = new HealthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HealthRequest)
}

bool HealthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HealthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:HealthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HealthRequest)
  return false;
#undef DO_
}

void HealthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HealthRequest)
  // @@protoc_insertion_point(serialize_end:HealthRequest)
}

size_t HealthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HealthRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HealthRequest*>(&from));
}

void HealthRequest::MergeFrom(const HealthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HealthRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HealthRequest::UnsafeMergeFrom(const HealthRequest& from) {
  GOOGLE_DCHECK(&from != this);
}

void HealthRequest::CopyFrom(const HealthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HealthRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HealthRequest::IsInitialized() const {

  return true;
}

void HealthRequest::Swap(HealthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthRequest::InternalSwap(HealthRequest* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HealthRequest::GetTypeName() const {
  return "HealthRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HealthRequest

inline const HealthRequest* HealthRequest::internal_default_instance() {
  return &HealthRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthReply::kReadyFieldNumber;
const int HealthReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthReply::HealthReply()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_common_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:HealthReply)
}

void HealthReply::InitAsDefaultInstance() {
}

HealthReply::HealthReply(const HealthReply& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HealthReply)
}

void HealthReply::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ready_ = false;
  _cached_size_ = 0;
}

HealthReply::~HealthReply() {
  // @@protoc_insertion_point(destructor:HealthReply)
  SharedDtor();
}

void HealthReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HealthReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HealthReply& HealthReply::default_instance() {
  protobuf_InitDefaults_common_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HealthReply> HealthReply_default_instance_;

HealthReply* HealthReply::New(::google::protobuf::Arena* arena) const {
  HealthReply* n = new HealthReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthReply::Clear() {
// @@protoc_insertion_point(message_clear_start:HealthReply)
  ready_ = false;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HealthReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HealthReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ready = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HealthReply.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HealthReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HealthReply)
  return false;
#undef DO_
}

void HealthReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HealthReply)
  // optional bool ready = 1;
  if (this->ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ready(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HealthReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:HealthReply)
}

size_t HealthReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HealthReply)
  size_t total_size = 0;

  // optional bool ready = 1;
  if (this->ready() != 0) {
    total_size += 1 + 1;
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HealthReply*>(&from));
}

void HealthReply::MergeFrom(const HealthReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HealthReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HealthReply::UnsafeMergeFrom(const HealthReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.ready() != 0) {
    set_ready(from.ready());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void HealthReply::CopyFrom(const HealthReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HealthReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HealthReply::IsInitialized() const {

  return true;
}

void HealthReply::Swap(HealthReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthReply::InternalSwap(HealthReply* other) {
  std::swap(ready_, other->ready_);
  message_.Swap(&other->message_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HealthReply::GetTypeName() const {
  return "HealthReply";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HealthReply

// optional bool ready = 1;
void HealthReply::clear_ready() {
  ready_ = false;
}
bool HealthReply::ready() const {
  // @@protoc_insertion_point(field_get:HealthReply.ready)
  return ready_;
}
void HealthReply::set_ready(bool value) {
  
  ready_ = value;
  // @@protoc_insertion_point(field_set:HealthReply.ready)
}

// optional string message = 2;
void HealthReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HealthReply::message() const {
  // @@protoc_insertion_point(field_get:HealthReply.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HealthReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HealthReply.message)
}
void HealthReply::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HealthReply.message)
}
void HealthReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HealthReply.message)
}
::std::string* HealthReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:HealthReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HealthReply::release_message() {
  // @@protoc_insertion_point(field_release:HealthReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HealthReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:HealthReply.message)
}

inline const HealthReply* HealthReply::internal_default_instance() {
  return &HealthReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
