// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace pb {
class HealthRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HealthRequest>
      _instance;
} _HealthRequest_default_instance_;
class HealthReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HealthReply>
      _instance;
} _HealthReply_default_instance_;
class RPCMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCMessage>
      _instance;
  const ::pb::HealthRequest* healthrequest_;
  const ::pb::HealthReply* healthreply_;
} _RPCMessage_default_instance_;
}  // namespace pb
namespace protobuf_protocol_2eproto {
void InitDefaultsHealthRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_HealthRequest_default_instance_;
    new (ptr) ::pb::HealthRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::HealthRequest::InitAsDefaultInstance();
}

void InitDefaultsHealthRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHealthRequestImpl);
}

void InitDefaultsHealthReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_HealthReply_default_instance_;
    new (ptr) ::pb::HealthReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::HealthReply::InitAsDefaultInstance();
}

void InitDefaultsHealthReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHealthReplyImpl);
}

void InitDefaultsRPCMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protocol_2eproto::InitDefaultsHealthRequest();
  protobuf_protocol_2eproto::InitDefaultsHealthReply();
  {
    void* ptr = &::pb::_RPCMessage_default_instance_;
    new (ptr) ::pb::RPCMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCMessage::InitAsDefaultInstance();
}

void InitDefaultsRPCMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCMessageImpl);
}

}  // namespace protobuf_protocol_2eproto
namespace pb {

// ===================================================================

void HealthRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthRequest::HealthRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protocol_2eproto::InitDefaultsHealthRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.HealthRequest)
}
HealthRequest::HealthRequest(const HealthRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.HealthRequest)
}

void HealthRequest::SharedCtor() {
  _cached_size_ = 0;
}

HealthRequest::~HealthRequest() {
  // @@protoc_insertion_point(destructor:pb.HealthRequest)
  SharedDtor();
}

void HealthRequest::SharedDtor() {
}

void HealthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HealthRequest& HealthRequest::default_instance() {
  ::protobuf_protocol_2eproto::InitDefaultsHealthRequest();
  return *internal_default_instance();
}

HealthRequest* HealthRequest::New(::google::protobuf::Arena* arena) const {
  HealthRequest* n = new HealthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.HealthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool HealthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.HealthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.HealthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.HealthRequest)
  return false;
#undef DO_
}

void HealthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.HealthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.HealthRequest)
}

size_t HealthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.HealthRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HealthRequest*>(&from));
}

void HealthRequest::MergeFrom(const HealthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.HealthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HealthRequest::CopyFrom(const HealthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.HealthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthRequest::IsInitialized() const {
  return true;
}

void HealthRequest::Swap(HealthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthRequest::InternalSwap(HealthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string HealthRequest::GetTypeName() const {
  return "pb.HealthRequest";
}


// ===================================================================

void HealthReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthReply::kReadyFieldNumber;
const int HealthReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthReply::HealthReply()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protocol_2eproto::InitDefaultsHealthReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.HealthReply)
}
HealthReply::HealthReply(const HealthReply& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ready_ = from.ready_;
  // @@protoc_insertion_point(copy_constructor:pb.HealthReply)
}

void HealthReply::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ready_ = false;
  _cached_size_ = 0;
}

HealthReply::~HealthReply() {
  // @@protoc_insertion_point(destructor:pb.HealthReply)
  SharedDtor();
}

void HealthReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HealthReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HealthReply& HealthReply::default_instance() {
  ::protobuf_protocol_2eproto::InitDefaultsHealthReply();
  return *internal_default_instance();
}

HealthReply* HealthReply::New(::google::protobuf::Arena* arena) const {
  HealthReply* n = new HealthReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.HealthReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ready_ = false;
  _internal_metadata_.Clear();
}

bool HealthReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.HealthReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ready = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.HealthReply.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.HealthReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.HealthReply)
  return false;
#undef DO_
}

void HealthReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.HealthReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ready(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.HealthReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.HealthReply)
}

size_t HealthReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.HealthReply)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // bool ready = 1;
  if (this->ready() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HealthReply*>(&from));
}

void HealthReply::MergeFrom(const HealthReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.HealthReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.ready() != 0) {
    set_ready(from.ready());
  }
}

void HealthReply::CopyFrom(const HealthReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.HealthReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthReply::IsInitialized() const {
  return true;
}

void HealthReply::Swap(HealthReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthReply::InternalSwap(HealthReply* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(ready_, other->ready_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string HealthReply::GetTypeName() const {
  return "pb.HealthReply";
}


// ===================================================================

void RPCMessage::InitAsDefaultInstance() {
}
void RPCMessage::set_allocated_healthrequest(::pb::HealthRequest* healthrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (healthrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      healthrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, healthrequest, submessage_arena);
    }
    set_has_healthrequest();
    msg_.healthrequest_ = healthrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.healthRequest)
}
void RPCMessage::set_allocated_healthreply(::pb::HealthReply* healthreply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (healthreply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      healthreply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, healthreply, submessage_arena);
    }
    set_has_healthreply();
    msg_.healthreply_ = healthreply;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.HealthReply)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCMessage::kVersionFieldNumber;
const int RPCMessage::kIdFieldNumber;
const int RPCMessage::kHealthRequestFieldNumber;
const int RPCMessage::kHealthReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCMessage::RPCMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protocol_2eproto::InitDefaultsRPCMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCMessage)
}
RPCMessage::RPCMessage(const RPCMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(id_));
  clear_has_msg();
  switch (from.msg_case()) {
    case kHealthRequest: {
      mutable_healthrequest()->::pb::HealthRequest::MergeFrom(from.healthrequest());
      break;
    }
    case kHealthReply: {
      mutable_healthreply()->::pb::HealthReply::MergeFrom(from.healthreply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCMessage)
}

void RPCMessage::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(id_));
  clear_has_msg();
  _cached_size_ = 0;
}

RPCMessage::~RPCMessage() {
  // @@protoc_insertion_point(destructor:pb.RPCMessage)
  SharedDtor();
}

void RPCMessage::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void RPCMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCMessage& RPCMessage::default_instance() {
  ::protobuf_protocol_2eproto::InitDefaultsRPCMessage();
  return *internal_default_instance();
}

RPCMessage* RPCMessage::New(::google::protobuf::Arena* arena) const {
  RPCMessage* n = new RPCMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:pb.RPCMessage)
  switch (msg_case()) {
    case kHealthRequest: {
      delete msg_.healthrequest_;
      break;
    }
    case kHealthReply: {
      delete msg_.healthreply_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void RPCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(id_));
  clear_msg();
  _internal_metadata_.Clear();
}

bool RPCMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.RPCMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.HealthRequest healthRequest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_healthrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.HealthReply HealthReply = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_healthreply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCMessage)
  return false;
#undef DO_
}

void RPCMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // .pb.HealthRequest healthRequest = 3;
  if (has_healthrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *msg_.healthrequest_, output);
  }

  // .pb.HealthReply HealthReply = 4;
  if (has_healthreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *msg_.healthreply_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.RPCMessage)
}

size_t RPCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCMessage)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // int64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  switch (msg_case()) {
    // .pb.HealthRequest healthRequest = 3;
    case kHealthRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.healthrequest_);
      break;
    }
    // .pb.HealthReply HealthReply = 4;
    case kHealthReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.healthreply_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCMessage*>(&from));
}

void RPCMessage::MergeFrom(const RPCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  switch (from.msg_case()) {
    case kHealthRequest: {
      mutable_healthrequest()->::pb::HealthRequest::MergeFrom(from.healthrequest());
      break;
    }
    case kHealthReply: {
      mutable_healthreply()->::pb::HealthReply::MergeFrom(from.healthreply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void RPCMessage::CopyFrom(const RPCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCMessage::IsInitialized() const {
  return true;
}

void RPCMessage::Swap(RPCMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCMessage::InternalSwap(RPCMessage* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(id_, other->id_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCMessage::GetTypeName() const {
  return "pb.RPCMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb

// @@protoc_insertion_point(global_scope)
