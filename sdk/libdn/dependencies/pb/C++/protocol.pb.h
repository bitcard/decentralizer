// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsHealthRequestImpl();
void InitDefaultsHealthRequest();
void InitDefaultsHealthReplyImpl();
void InitDefaultsHealthReply();
void InitDefaultsRPCMessageImpl();
void InitDefaultsRPCMessage();
inline void InitDefaults() {
  InitDefaultsHealthRequest();
  InitDefaultsHealthReply();
  InitDefaultsRPCMessage();
}
}  // namespace protobuf_protocol_2eproto
namespace pb {
class HealthReply;
class HealthReplyDefaultTypeInternal;
extern HealthReplyDefaultTypeInternal _HealthReply_default_instance_;
class HealthRequest;
class HealthRequestDefaultTypeInternal;
extern HealthRequestDefaultTypeInternal _HealthRequest_default_instance_;
class RPCMessage;
class RPCMessageDefaultTypeInternal;
extern RPCMessageDefaultTypeInternal _RPCMessage_default_instance_;
}  // namespace pb
namespace pb {

// ===================================================================

class HealthRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.HealthRequest) */ {
 public:
  HealthRequest();
  virtual ~HealthRequest();

  HealthRequest(const HealthRequest& from);

  inline HealthRequest& operator=(const HealthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HealthRequest(HealthRequest&& from) noexcept
    : HealthRequest() {
    *this = ::std::move(from);
  }

  inline HealthRequest& operator=(HealthRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const HealthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthRequest* internal_default_instance() {
    return reinterpret_cast<const HealthRequest*>(
               &_HealthRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HealthRequest* other);
  friend void swap(HealthRequest& a, HealthRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HealthRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HealthRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HealthRequest& from);
  void MergeFrom(const HealthRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HealthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:pb.HealthRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsHealthRequestImpl();
};
// -------------------------------------------------------------------

class HealthReply : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.HealthReply) */ {
 public:
  HealthReply();
  virtual ~HealthReply();

  HealthReply(const HealthReply& from);

  inline HealthReply& operator=(const HealthReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HealthReply(HealthReply&& from) noexcept
    : HealthReply() {
    *this = ::std::move(from);
  }

  inline HealthReply& operator=(HealthReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const HealthReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthReply* internal_default_instance() {
    return reinterpret_cast<const HealthReply*>(
               &_HealthReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HealthReply* other);
  friend void swap(HealthReply& a, HealthReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HealthReply* New() const PROTOBUF_FINAL { return New(NULL); }

  HealthReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HealthReply& from);
  void MergeFrom(const HealthReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HealthReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool ready = 1;
  void clear_ready();
  static const int kReadyFieldNumber = 1;
  bool ready() const;
  void set_ready(bool value);

  // @@protoc_insertion_point(class_scope:pb.HealthReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool ready_;
  mutable int _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsHealthReplyImpl();
};
// -------------------------------------------------------------------

class RPCMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.RPCMessage) */ {
 public:
  RPCMessage();
  virtual ~RPCMessage();

  RPCMessage(const RPCMessage& from);

  inline RPCMessage& operator=(const RPCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCMessage(RPCMessage&& from) noexcept
    : RPCMessage() {
    *this = ::std::move(from);
  }

  inline RPCMessage& operator=(RPCMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RPCMessage& default_instance();

  enum MsgCase {
    kHealthRequest = 3,
    kHealthReply = 4,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCMessage* internal_default_instance() {
    return reinterpret_cast<const RPCMessage*>(
               &_RPCMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RPCMessage* other);
  friend void swap(RPCMessage& a, RPCMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RPCMessage& from);
  void MergeFrom(const RPCMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // int64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // .pb.HealthRequest healthRequest = 3;
  bool has_healthrequest() const;
  void clear_healthrequest();
  static const int kHealthRequestFieldNumber = 3;
  const ::pb::HealthRequest& healthrequest() const;
  ::pb::HealthRequest* release_healthrequest();
  ::pb::HealthRequest* mutable_healthrequest();
  void set_allocated_healthrequest(::pb::HealthRequest* healthrequest);

  // .pb.HealthReply HealthReply = 4;
  bool has_healthreply() const;
  void clear_healthreply();
  static const int kHealthReplyFieldNumber = 4;
  const ::pb::HealthReply& healthreply() const;
  ::pb::HealthReply* release_healthreply();
  ::pb::HealthReply* mutable_healthreply();
  void set_allocated_healthreply(::pb::HealthReply* healthreply);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:pb.RPCMessage)
 private:
  void set_has_healthrequest();
  void set_has_healthreply();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 version_;
  ::google::protobuf::int64 id_;
  union MsgUnion {
    MsgUnion() {}
    ::pb::HealthRequest* healthrequest_;
    ::pb::HealthReply* healthreply_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsRPCMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HealthRequest

// string msg = 1;
inline void HealthRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HealthRequest::msg() const {
  // @@protoc_insertion_point(field_get:pb.HealthRequest.msg)
  return msg_.GetNoArena();
}
inline void HealthRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.HealthRequest.msg)
}
#if LANG_CXX11
inline void HealthRequest::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.HealthRequest.msg)
}
#endif
inline void HealthRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.HealthRequest.msg)
}
inline void HealthRequest::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.HealthRequest.msg)
}
inline ::std::string* HealthRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.HealthRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HealthRequest::release_msg() {
  // @@protoc_insertion_point(field_release:pb.HealthRequest.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HealthRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:pb.HealthRequest.msg)
}

// -------------------------------------------------------------------

// HealthReply

// bool ready = 1;
inline void HealthReply::clear_ready() {
  ready_ = false;
}
inline bool HealthReply::ready() const {
  // @@protoc_insertion_point(field_get:pb.HealthReply.ready)
  return ready_;
}
inline void HealthReply::set_ready(bool value) {
  
  ready_ = value;
  // @@protoc_insertion_point(field_set:pb.HealthReply.ready)
}

// string message = 2;
inline void HealthReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HealthReply::message() const {
  // @@protoc_insertion_point(field_get:pb.HealthReply.message)
  return message_.GetNoArena();
}
inline void HealthReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.HealthReply.message)
}
#if LANG_CXX11
inline void HealthReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.HealthReply.message)
}
#endif
inline void HealthReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.HealthReply.message)
}
inline void HealthReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.HealthReply.message)
}
inline ::std::string* HealthReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:pb.HealthReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HealthReply::release_message() {
  // @@protoc_insertion_point(field_release:pb.HealthReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HealthReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pb.HealthReply.message)
}

// -------------------------------------------------------------------

// RPCMessage

// int64 version = 1;
inline void RPCMessage::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPCMessage::version() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.version)
  return version_;
}
inline void RPCMessage::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCMessage.version)
}

// int64 id = 2;
inline void RPCMessage::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPCMessage::id() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.id)
  return id_;
}
inline void RPCMessage::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCMessage.id)
}

// .pb.HealthRequest healthRequest = 3;
inline bool RPCMessage::has_healthrequest() const {
  return msg_case() == kHealthRequest;
}
inline void RPCMessage::set_has_healthrequest() {
  _oneof_case_[0] = kHealthRequest;
}
inline void RPCMessage::clear_healthrequest() {
  if (has_healthrequest()) {
    delete msg_.healthrequest_;
    clear_has_msg();
  }
}
inline ::pb::HealthRequest* RPCMessage::release_healthrequest() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.healthRequest)
  if (has_healthrequest()) {
    clear_has_msg();
      ::pb::HealthRequest* temp = msg_.healthrequest_;
    msg_.healthrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::HealthRequest& RPCMessage::healthrequest() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.healthRequest)
  return has_healthrequest()
      ? *msg_.healthrequest_
      : *reinterpret_cast< ::pb::HealthRequest*>(&::pb::_HealthRequest_default_instance_);
}
inline ::pb::HealthRequest* RPCMessage::mutable_healthrequest() {
  if (!has_healthrequest()) {
    clear_msg();
    set_has_healthrequest();
    msg_.healthrequest_ = new ::pb::HealthRequest;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.healthRequest)
  return msg_.healthrequest_;
}

// .pb.HealthReply HealthReply = 4;
inline bool RPCMessage::has_healthreply() const {
  return msg_case() == kHealthReply;
}
inline void RPCMessage::set_has_healthreply() {
  _oneof_case_[0] = kHealthReply;
}
inline void RPCMessage::clear_healthreply() {
  if (has_healthreply()) {
    delete msg_.healthreply_;
    clear_has_msg();
  }
}
inline ::pb::HealthReply* RPCMessage::release_healthreply() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.HealthReply)
  if (has_healthreply()) {
    clear_has_msg();
      ::pb::HealthReply* temp = msg_.healthreply_;
    msg_.healthreply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::HealthReply& RPCMessage::healthreply() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.HealthReply)
  return has_healthreply()
      ? *msg_.healthreply_
      : *reinterpret_cast< ::pb::HealthReply*>(&::pb::_HealthReply_default_instance_);
}
inline ::pb::HealthReply* RPCMessage::mutable_healthreply() {
  if (!has_healthreply()) {
    clear_msg();
    set_has_healthreply();
    msg_.healthreply_ = new ::pb::HealthReply;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.HealthReply)
  return msg_.healthreply_;
}

inline bool RPCMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void RPCMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline RPCMessage::MsgCase RPCMessage::msg_case() const {
  return RPCMessage::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
