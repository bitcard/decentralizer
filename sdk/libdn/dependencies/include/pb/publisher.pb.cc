// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/publisher.proto

#include "pb/publisher.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_pb_2fpublisher_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pb_2fpublisher_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PublisherDefinition_DetailsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pb_2fpublisher_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PublisherDefinition_FilesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pb_2fpublisher_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PublisherDefinition_LinksEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pb_2fpublisher_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PublisherDefinition;
}  // namespace protobuf_pb_2fpublisher_2eproto
namespace pb {
class PublisherDefinition_FilesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublisherDefinition_FilesEntry_DoNotUse>
      _instance;
} _PublisherDefinition_FilesEntry_DoNotUse_default_instance_;
class PublisherDefinition_LinksEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublisherDefinition_LinksEntry_DoNotUse>
      _instance;
} _PublisherDefinition_LinksEntry_DoNotUse_default_instance_;
class PublisherDefinition_DetailsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublisherDefinition_DetailsEntry_DoNotUse>
      _instance;
} _PublisherDefinition_DetailsEntry_DoNotUse_default_instance_;
class PublisherDefinitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublisherDefinition>
      _instance;
} _PublisherDefinition_default_instance_;
class DNPublisherRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNPublisherRecord>
      _instance;
} _DNPublisherRecord_default_instance_;
class RPCPublishPublisherUpdateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCPublishPublisherUpdateRequest>
      _instance;
} _RPCPublishPublisherUpdateRequest_default_instance_;
class RPCGetPublisherFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetPublisherFileRequest>
      _instance;
} _RPCGetPublisherFileRequest_default_instance_;
class RPCGetPublisherFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetPublisherFileResponse>
      _instance;
} _RPCGetPublisherFileResponse_default_instance_;
class GetPublisherDefinitionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPublisherDefinitionRequest>
      _instance;
} _GetPublisherDefinitionRequest_default_instance_;
class loadPublisherDefinitionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<loadPublisherDefinitionRequest>
      _instance;
} _loadPublisherDefinitionRequest_default_instance_;
}  // namespace pb
namespace protobuf_pb_2fpublisher_2eproto {
static void InitDefaultsPublisherDefinition_FilesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PublisherDefinition_FilesEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::PublisherDefinition_FilesEntry_DoNotUse();
  }
  ::pb::PublisherDefinition_FilesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublisherDefinition_FilesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublisherDefinition_FilesEntry_DoNotUse}, {}};

static void InitDefaultsPublisherDefinition_LinksEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PublisherDefinition_LinksEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::PublisherDefinition_LinksEntry_DoNotUse();
  }
  ::pb::PublisherDefinition_LinksEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublisherDefinition_LinksEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublisherDefinition_LinksEntry_DoNotUse}, {}};

static void InitDefaultsPublisherDefinition_DetailsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PublisherDefinition_DetailsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::PublisherDefinition_DetailsEntry_DoNotUse();
  }
  ::pb::PublisherDefinition_DetailsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublisherDefinition_DetailsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublisherDefinition_DetailsEntry_DoNotUse}, {}};

static void InitDefaultsPublisherDefinition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PublisherDefinition_default_instance_;
    new (ptr) ::pb::PublisherDefinition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PublisherDefinition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PublisherDefinition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPublisherDefinition}, {
      &protobuf_pb_2fpublisher_2eproto::scc_info_PublisherDefinition_FilesEntry_DoNotUse.base,
      &protobuf_pb_2fpublisher_2eproto::scc_info_PublisherDefinition_LinksEntry_DoNotUse.base,
      &protobuf_pb_2fpublisher_2eproto::scc_info_PublisherDefinition_DetailsEntry_DoNotUse.base,}};

static void InitDefaultsDNPublisherRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_DNPublisherRecord_default_instance_;
    new (ptr) ::pb::DNPublisherRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DNPublisherRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DNPublisherRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDNPublisherRecord}, {}};

static void InitDefaultsRPCPublishPublisherUpdateRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RPCPublishPublisherUpdateRequest_default_instance_;
    new (ptr) ::pb::RPCPublishPublisherUpdateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCPublishPublisherUpdateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RPCPublishPublisherUpdateRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRPCPublishPublisherUpdateRequest}, {
      &protobuf_pb_2fpublisher_2eproto::scc_info_PublisherDefinition.base,}};

static void InitDefaultsRPCGetPublisherFileRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RPCGetPublisherFileRequest_default_instance_;
    new (ptr) ::pb::RPCGetPublisherFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetPublisherFileRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RPCGetPublisherFileRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRPCGetPublisherFileRequest}, {}};

static void InitDefaultsRPCGetPublisherFileResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RPCGetPublisherFileResponse_default_instance_;
    new (ptr) ::pb::RPCGetPublisherFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetPublisherFileResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RPCGetPublisherFileResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRPCGetPublisherFileResponse}, {}};

static void InitDefaultsGetPublisherDefinitionRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetPublisherDefinitionRequest_default_instance_;
    new (ptr) ::pb::GetPublisherDefinitionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetPublisherDefinitionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetPublisherDefinitionRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetPublisherDefinitionRequest}, {}};

static void InitDefaultsloadPublisherDefinitionRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_loadPublisherDefinitionRequest_default_instance_;
    new (ptr) ::pb::loadPublisherDefinitionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::loadPublisherDefinitionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_loadPublisherDefinitionRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsloadPublisherDefinitionRequest}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PublisherDefinition_FilesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublisherDefinition_LinksEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublisherDefinition_DetailsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublisherDefinition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DNPublisherRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPCPublishPublisherUpdateRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPCGetPublisherFileRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPCGetPublisherFileResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPublisherDefinitionRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_loadPublisherDefinitionRequest.base);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_FilesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_FilesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_FilesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_FilesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_LinksEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_LinksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_LinksEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_LinksEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_DetailsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_DetailsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_DetailsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_DetailsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, published_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNPublisherRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNPublisherRecord, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNPublisherRecord, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNPublisherRecord, definition_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCPublishPublisherUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCPublishPublisherUpdateRequest, definition_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPublisherFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPublisherFileRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPublisherFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPublisherFileResponse, file_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::GetPublisherDefinitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::loadPublisherDefinitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::loadPublisherDefinitionRequest, definition_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pb::PublisherDefinition_FilesEntry_DoNotUse)},
  { 9, 16, sizeof(::pb::PublisherDefinition_LinksEntry_DoNotUse)},
  { 18, 25, sizeof(::pb::PublisherDefinition_DetailsEntry_DoNotUse)},
  { 27, -1, sizeof(::pb::PublisherDefinition)},
  { 37, -1, sizeof(::pb::DNPublisherRecord)},
  { 45, -1, sizeof(::pb::RPCPublishPublisherUpdateRequest)},
  { 51, -1, sizeof(::pb::RPCGetPublisherFileRequest)},
  { 57, -1, sizeof(::pb::RPCGetPublisherFileResponse)},
  { 63, -1, sizeof(::pb::GetPublisherDefinitionRequest)},
  { 68, -1, sizeof(::pb::loadPublisherDefinitionRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_PublisherDefinition_FilesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_PublisherDefinition_LinksEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_PublisherDefinition_DetailsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_PublisherDefinition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_DNPublisherRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCPublishPublisherUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetPublisherFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetPublisherFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_GetPublisherDefinitionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_loadPublisherDefinitionRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "pb/publisher.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022pb/publisher.proto\022\002pb\"\341\002\n\023PublisherDe"
      "finition\022\021\n\tpublished\030\001 \001(\004\0221\n\005files\030\002 \003"
      "(\0132\".pb.PublisherDefinition.FilesEntry\0221"
      "\n\005links\030\003 \003(\0132\".pb.PublisherDefinition.L"
      "inksEntry\0225\n\007details\030\004 \003(\0132$.pb.Publishe"
      "rDefinition.DetailsEntry\022\016\n\006status\030\005 \001(\010"
      "\032,\n\nFilesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
      "(\014:\0028\001\032,\n\nLinksEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
      "ue\030\002 \001(\t:\0028\001\032.\n\014DetailsEntry\022\013\n\003key\030\001 \001("
      "\t\022\r\n\005value\030\002 \001(\t:\0028\001\"H\n\021DNPublisherRecor"
      "d\022\021\n\tsignature\030\001 \001(\014\022\014\n\004path\030\002 \001(\t\022\022\n\nde"
      "finition\030\003 \001(\014\"O\n RPCPublishPublisherUpd"
      "ateRequest\022+\n\ndefinition\030\001 \001(\0132\027.pb.Publ"
      "isherDefinition\"*\n\032RPCGetPublisherFileRe"
      "quest\022\014\n\004name\030\001 \001(\t\"+\n\033RPCGetPublisherFi"
      "leResponse\022\014\n\004file\030\001 \001(\014\"\037\n\035GetPublisher"
      "DefinitionRequest\"4\n\036loadPublisherDefini"
      "tionRequest\022\022\n\ndefinition\030\001 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 719);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb/publisher.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pb_2fpublisher_2eproto
namespace pb {

// ===================================================================

PublisherDefinition_FilesEntry_DoNotUse::PublisherDefinition_FilesEntry_DoNotUse() {}
PublisherDefinition_FilesEntry_DoNotUse::PublisherDefinition_FilesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PublisherDefinition_FilesEntry_DoNotUse::MergeFrom(const PublisherDefinition_FilesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PublisherDefinition_FilesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[0];
}
void PublisherDefinition_FilesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

PublisherDefinition_LinksEntry_DoNotUse::PublisherDefinition_LinksEntry_DoNotUse() {}
PublisherDefinition_LinksEntry_DoNotUse::PublisherDefinition_LinksEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PublisherDefinition_LinksEntry_DoNotUse::MergeFrom(const PublisherDefinition_LinksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PublisherDefinition_LinksEntry_DoNotUse::GetMetadata() const {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[1];
}
void PublisherDefinition_LinksEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

PublisherDefinition_DetailsEntry_DoNotUse::PublisherDefinition_DetailsEntry_DoNotUse() {}
PublisherDefinition_DetailsEntry_DoNotUse::PublisherDefinition_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PublisherDefinition_DetailsEntry_DoNotUse::MergeFrom(const PublisherDefinition_DetailsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PublisherDefinition_DetailsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[2];
}
void PublisherDefinition_DetailsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void PublisherDefinition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublisherDefinition::kPublishedFieldNumber;
const int PublisherDefinition::kFilesFieldNumber;
const int PublisherDefinition::kLinksFieldNumber;
const int PublisherDefinition::kDetailsFieldNumber;
const int PublisherDefinition::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublisherDefinition::PublisherDefinition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2fpublisher_2eproto::scc_info_PublisherDefinition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PublisherDefinition)
}
PublisherDefinition::PublisherDefinition(const PublisherDefinition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  files_.MergeFrom(from.files_);
  links_.MergeFrom(from.links_);
  details_.MergeFrom(from.details_);
  ::memcpy(&published_, &from.published_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&published_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:pb.PublisherDefinition)
}

void PublisherDefinition::SharedCtor() {
  ::memset(&published_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&published_)) + sizeof(status_));
}

PublisherDefinition::~PublisherDefinition() {
  // @@protoc_insertion_point(destructor:pb.PublisherDefinition)
  SharedDtor();
}

void PublisherDefinition::SharedDtor() {
}

void PublisherDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublisherDefinition::descriptor() {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublisherDefinition& PublisherDefinition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2fpublisher_2eproto::scc_info_PublisherDefinition.base);
  return *internal_default_instance();
}


void PublisherDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PublisherDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  links_.Clear();
  details_.Clear();
  ::memset(&published_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&published_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool PublisherDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PublisherDefinition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 published = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &published_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> files = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          PublisherDefinition_FilesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PublisherDefinition_FilesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&files_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PublisherDefinition.FilesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> links = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          PublisherDefinition_LinksEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PublisherDefinition_LinksEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&links_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PublisherDefinition.LinksEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PublisherDefinition.LinksEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          PublisherDefinition_DetailsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PublisherDefinition_DetailsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&details_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PublisherDefinition.DetailsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PublisherDefinition.DetailsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PublisherDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PublisherDefinition)
  return false;
#undef DO_
}

void PublisherDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PublisherDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 published = 1;
  if (this->published() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->published(), output);
  }

  // map<string, bytes> files = 2;
  if (!this->files().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.FilesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->files().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->files().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->files().begin();
          it != this->files().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PublisherDefinition_FilesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(files_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PublisherDefinition_FilesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->files().begin();
          it != this->files().end(); ++it) {
        entry.reset(files_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> links = 3;
  if (!this->links().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.LinksEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.LinksEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->links().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->links().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PublisherDefinition_LinksEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(links_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PublisherDefinition_LinksEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it) {
        entry.reset(links_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> details = 4;
  if (!this->details().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.DetailsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.DetailsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->details().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->details().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PublisherDefinition_DetailsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(details_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PublisherDefinition_DetailsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it) {
        entry.reset(details_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PublisherDefinition)
}

::google::protobuf::uint8* PublisherDefinition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.PublisherDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 published = 1;
  if (this->published() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->published(), target);
  }

  // map<string, bytes> files = 2;
  if (!this->files().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.FilesEntry.key");
      }
    };

    if (deterministic &&
        this->files().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->files().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->files().begin();
          it != this->files().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PublisherDefinition_FilesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(files_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PublisherDefinition_FilesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->files().begin();
          it != this->files().end(); ++it) {
        entry.reset(files_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> links = 3;
  if (!this->links().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.LinksEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.LinksEntry.value");
      }
    };

    if (deterministic &&
        this->links().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->links().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PublisherDefinition_LinksEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(links_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PublisherDefinition_LinksEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it) {
        entry.reset(links_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> details = 4;
  if (!this->details().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.DetailsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.DetailsEntry.value");
      }
    };

    if (deterministic &&
        this->details().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->details().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PublisherDefinition_DetailsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(details_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PublisherDefinition_DetailsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it) {
        entry.reset(details_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool status = 5;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PublisherDefinition)
  return target;
}

size_t PublisherDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PublisherDefinition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, bytes> files = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->files_size());
  {
    ::std::unique_ptr<PublisherDefinition_FilesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->files().begin();
        it != this->files().end(); ++it) {
      entry.reset(files_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> links = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->links_size());
  {
    ::std::unique_ptr<PublisherDefinition_LinksEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->links().begin();
        it != this->links().end(); ++it) {
      entry.reset(links_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> details = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->details_size());
  {
    ::std::unique_ptr<PublisherDefinition_DetailsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->details().begin();
        it != this->details().end(); ++it) {
      entry.reset(details_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint64 published = 1;
  if (this->published() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->published());
  }

  // bool status = 5;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublisherDefinition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PublisherDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const PublisherDefinition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublisherDefinition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PublisherDefinition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PublisherDefinition)
    MergeFrom(*source);
  }
}

void PublisherDefinition::MergeFrom(const PublisherDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PublisherDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  links_.MergeFrom(from.links_);
  details_.MergeFrom(from.details_);
  if (from.published() != 0) {
    set_published(from.published());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void PublisherDefinition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PublisherDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublisherDefinition::CopyFrom(const PublisherDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PublisherDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublisherDefinition::IsInitialized() const {
  return true;
}

void PublisherDefinition::Swap(PublisherDefinition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublisherDefinition::InternalSwap(PublisherDefinition* other) {
  using std::swap;
  files_.Swap(&other->files_);
  links_.Swap(&other->links_);
  details_.Swap(&other->details_);
  swap(published_, other->published_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublisherDefinition::GetMetadata() const {
  protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DNPublisherRecord::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNPublisherRecord::kSignatureFieldNumber;
const int DNPublisherRecord::kPathFieldNumber;
const int DNPublisherRecord::kDefinitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNPublisherRecord::DNPublisherRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2fpublisher_2eproto::scc_info_DNPublisherRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNPublisherRecord)
}
DNPublisherRecord::DNPublisherRecord(const DNPublisherRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  definition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.definition().size() > 0) {
    definition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.definition_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.DNPublisherRecord)
}

void DNPublisherRecord::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  definition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DNPublisherRecord::~DNPublisherRecord() {
  // @@protoc_insertion_point(destructor:pb.DNPublisherRecord)
  SharedDtor();
}

void DNPublisherRecord::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  definition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DNPublisherRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DNPublisherRecord::descriptor() {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DNPublisherRecord& DNPublisherRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2fpublisher_2eproto::scc_info_DNPublisherRecord.base);
  return *internal_default_instance();
}


void DNPublisherRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNPublisherRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  definition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DNPublisherRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DNPublisherRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.DNPublisherRecord.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes definition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_definition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNPublisherRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNPublisherRecord)
  return false;
#undef DO_
}

void DNPublisherRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNPublisherRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.DNPublisherRecord.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // bytes definition = 3;
  if (this->definition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->definition(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.DNPublisherRecord)
}

::google::protobuf::uint8* DNPublisherRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.DNPublisherRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.DNPublisherRecord.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // bytes definition = 3;
  if (this->definition().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->definition(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DNPublisherRecord)
  return target;
}

size_t DNPublisherRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNPublisherRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bytes definition = 3;
  if (this->definition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->definition());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DNPublisherRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DNPublisherRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const DNPublisherRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNPublisherRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DNPublisherRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DNPublisherRecord)
    MergeFrom(*source);
  }
}

void DNPublisherRecord::MergeFrom(const DNPublisherRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNPublisherRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.definition().size() > 0) {

    definition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.definition_);
  }
}

void DNPublisherRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DNPublisherRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNPublisherRecord::CopyFrom(const DNPublisherRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNPublisherRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNPublisherRecord::IsInitialized() const {
  return true;
}

void DNPublisherRecord::Swap(DNPublisherRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNPublisherRecord::InternalSwap(DNPublisherRecord* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  definition_.Swap(&other->definition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DNPublisherRecord::GetMetadata() const {
  protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCPublishPublisherUpdateRequest::InitAsDefaultInstance() {
  ::pb::_RPCPublishPublisherUpdateRequest_default_instance_._instance.get_mutable()->definition_ = const_cast< ::pb::PublisherDefinition*>(
      ::pb::PublisherDefinition::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCPublishPublisherUpdateRequest::kDefinitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCPublishPublisherUpdateRequest::RPCPublishPublisherUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2fpublisher_2eproto::scc_info_RPCPublishPublisherUpdateRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCPublishPublisherUpdateRequest)
}
RPCPublishPublisherUpdateRequest::RPCPublishPublisherUpdateRequest(const RPCPublishPublisherUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_definition()) {
    definition_ = new ::pb::PublisherDefinition(*from.definition_);
  } else {
    definition_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCPublishPublisherUpdateRequest)
}

void RPCPublishPublisherUpdateRequest::SharedCtor() {
  definition_ = NULL;
}

RPCPublishPublisherUpdateRequest::~RPCPublishPublisherUpdateRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCPublishPublisherUpdateRequest)
  SharedDtor();
}

void RPCPublishPublisherUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete definition_;
}

void RPCPublishPublisherUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPCPublishPublisherUpdateRequest::descriptor() {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCPublishPublisherUpdateRequest& RPCPublishPublisherUpdateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2fpublisher_2eproto::scc_info_RPCPublishPublisherUpdateRequest.base);
  return *internal_default_instance();
}


void RPCPublishPublisherUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCPublishPublisherUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && definition_ != NULL) {
    delete definition_;
  }
  definition_ = NULL;
  _internal_metadata_.Clear();
}

bool RPCPublishPublisherUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCPublishPublisherUpdateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.PublisherDefinition definition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_definition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCPublishPublisherUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCPublishPublisherUpdateRequest)
  return false;
#undef DO_
}

void RPCPublishPublisherUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCPublishPublisherUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.PublisherDefinition definition = 1;
  if (this->has_definition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_definition(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCPublishPublisherUpdateRequest)
}

::google::protobuf::uint8* RPCPublishPublisherUpdateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCPublishPublisherUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.PublisherDefinition definition = 1;
  if (this->has_definition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_definition(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCPublishPublisherUpdateRequest)
  return target;
}

size_t RPCPublishPublisherUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCPublishPublisherUpdateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .pb.PublisherDefinition definition = 1;
  if (this->has_definition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *definition_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCPublishPublisherUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCPublishPublisherUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCPublishPublisherUpdateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCPublishPublisherUpdateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCPublishPublisherUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCPublishPublisherUpdateRequest)
    MergeFrom(*source);
  }
}

void RPCPublishPublisherUpdateRequest::MergeFrom(const RPCPublishPublisherUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCPublishPublisherUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_definition()) {
    mutable_definition()->::pb::PublisherDefinition::MergeFrom(from.definition());
  }
}

void RPCPublishPublisherUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCPublishPublisherUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCPublishPublisherUpdateRequest::CopyFrom(const RPCPublishPublisherUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCPublishPublisherUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCPublishPublisherUpdateRequest::IsInitialized() const {
  return true;
}

void RPCPublishPublisherUpdateRequest::Swap(RPCPublishPublisherUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCPublishPublisherUpdateRequest::InternalSwap(RPCPublishPublisherUpdateRequest* other) {
  using std::swap;
  swap(definition_, other->definition_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPCPublishPublisherUpdateRequest::GetMetadata() const {
  protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetPublisherFileRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetPublisherFileRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetPublisherFileRequest::RPCGetPublisherFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2fpublisher_2eproto::scc_info_RPCGetPublisherFileRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetPublisherFileRequest)
}
RPCGetPublisherFileRequest::RPCGetPublisherFileRequest(const RPCGetPublisherFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetPublisherFileRequest)
}

void RPCGetPublisherFileRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RPCGetPublisherFileRequest::~RPCGetPublisherFileRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCGetPublisherFileRequest)
  SharedDtor();
}

void RPCGetPublisherFileRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCGetPublisherFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPCGetPublisherFileRequest::descriptor() {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetPublisherFileRequest& RPCGetPublisherFileRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2fpublisher_2eproto::scc_info_RPCGetPublisherFileRequest.base);
  return *internal_default_instance();
}


void RPCGetPublisherFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetPublisherFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RPCGetPublisherFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetPublisherFileRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetPublisherFileRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetPublisherFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetPublisherFileRequest)
  return false;
#undef DO_
}

void RPCGetPublisherFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetPublisherFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPublisherFileRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetPublisherFileRequest)
}

::google::protobuf::uint8* RPCGetPublisherFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetPublisherFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPublisherFileRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetPublisherFileRequest)
  return target;
}

size_t RPCGetPublisherFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetPublisherFileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCGetPublisherFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetPublisherFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetPublisherFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetPublisherFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetPublisherFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetPublisherFileRequest)
    MergeFrom(*source);
  }
}

void RPCGetPublisherFileRequest::MergeFrom(const RPCGetPublisherFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetPublisherFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void RPCGetPublisherFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetPublisherFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetPublisherFileRequest::CopyFrom(const RPCGetPublisherFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetPublisherFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetPublisherFileRequest::IsInitialized() const {
  return true;
}

void RPCGetPublisherFileRequest::Swap(RPCGetPublisherFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetPublisherFileRequest::InternalSwap(RPCGetPublisherFileRequest* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPCGetPublisherFileRequest::GetMetadata() const {
  protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetPublisherFileResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetPublisherFileResponse::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetPublisherFileResponse::RPCGetPublisherFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2fpublisher_2eproto::scc_info_RPCGetPublisherFileResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetPublisherFileResponse)
}
RPCGetPublisherFileResponse::RPCGetPublisherFileResponse(const RPCGetPublisherFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetPublisherFileResponse)
}

void RPCGetPublisherFileResponse::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RPCGetPublisherFileResponse::~RPCGetPublisherFileResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCGetPublisherFileResponse)
  SharedDtor();
}

void RPCGetPublisherFileResponse::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCGetPublisherFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPCGetPublisherFileResponse::descriptor() {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetPublisherFileResponse& RPCGetPublisherFileResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2fpublisher_2eproto::scc_info_RPCGetPublisherFileResponse.base);
  return *internal_default_instance();
}


void RPCGetPublisherFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetPublisherFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RPCGetPublisherFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetPublisherFileResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetPublisherFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetPublisherFileResponse)
  return false;
#undef DO_
}

void RPCGetPublisherFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetPublisherFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetPublisherFileResponse)
}

::google::protobuf::uint8* RPCGetPublisherFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetPublisherFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes file = 1;
  if (this->file().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetPublisherFileResponse)
  return target;
}

size_t RPCGetPublisherFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetPublisherFileResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes file = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCGetPublisherFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetPublisherFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetPublisherFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetPublisherFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetPublisherFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetPublisherFileResponse)
    MergeFrom(*source);
  }
}

void RPCGetPublisherFileResponse::MergeFrom(const RPCGetPublisherFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetPublisherFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
}

void RPCGetPublisherFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetPublisherFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetPublisherFileResponse::CopyFrom(const RPCGetPublisherFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetPublisherFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetPublisherFileResponse::IsInitialized() const {
  return true;
}

void RPCGetPublisherFileResponse::Swap(RPCGetPublisherFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetPublisherFileResponse::InternalSwap(RPCGetPublisherFileResponse* other) {
  using std::swap;
  file_.Swap(&other->file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPCGetPublisherFileResponse::GetMetadata() const {
  protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPublisherDefinitionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPublisherDefinitionRequest::GetPublisherDefinitionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2fpublisher_2eproto::scc_info_GetPublisherDefinitionRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GetPublisherDefinitionRequest)
}
GetPublisherDefinitionRequest::GetPublisherDefinitionRequest(const GetPublisherDefinitionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetPublisherDefinitionRequest)
}

void GetPublisherDefinitionRequest::SharedCtor() {
}

GetPublisherDefinitionRequest::~GetPublisherDefinitionRequest() {
  // @@protoc_insertion_point(destructor:pb.GetPublisherDefinitionRequest)
  SharedDtor();
}

void GetPublisherDefinitionRequest::SharedDtor() {
}

void GetPublisherDefinitionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetPublisherDefinitionRequest::descriptor() {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPublisherDefinitionRequest& GetPublisherDefinitionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2fpublisher_2eproto::scc_info_GetPublisherDefinitionRequest.base);
  return *internal_default_instance();
}


void GetPublisherDefinitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetPublisherDefinitionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetPublisherDefinitionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GetPublisherDefinitionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GetPublisherDefinitionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GetPublisherDefinitionRequest)
  return false;
#undef DO_
}

void GetPublisherDefinitionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GetPublisherDefinitionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GetPublisherDefinitionRequest)
}

::google::protobuf::uint8* GetPublisherDefinitionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetPublisherDefinitionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetPublisherDefinitionRequest)
  return target;
}

size_t GetPublisherDefinitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetPublisherDefinitionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPublisherDefinitionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetPublisherDefinitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPublisherDefinitionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPublisherDefinitionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetPublisherDefinitionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetPublisherDefinitionRequest)
    MergeFrom(*source);
  }
}

void GetPublisherDefinitionRequest::MergeFrom(const GetPublisherDefinitionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetPublisherDefinitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetPublisherDefinitionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetPublisherDefinitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPublisherDefinitionRequest::CopyFrom(const GetPublisherDefinitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetPublisherDefinitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPublisherDefinitionRequest::IsInitialized() const {
  return true;
}

void GetPublisherDefinitionRequest::Swap(GetPublisherDefinitionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPublisherDefinitionRequest::InternalSwap(GetPublisherDefinitionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetPublisherDefinitionRequest::GetMetadata() const {
  protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void loadPublisherDefinitionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int loadPublisherDefinitionRequest::kDefinitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

loadPublisherDefinitionRequest::loadPublisherDefinitionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2fpublisher_2eproto::scc_info_loadPublisherDefinitionRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.loadPublisherDefinitionRequest)
}
loadPublisherDefinitionRequest::loadPublisherDefinitionRequest(const loadPublisherDefinitionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  definition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.definition().size() > 0) {
    definition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.definition_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.loadPublisherDefinitionRequest)
}

void loadPublisherDefinitionRequest::SharedCtor() {
  definition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

loadPublisherDefinitionRequest::~loadPublisherDefinitionRequest() {
  // @@protoc_insertion_point(destructor:pb.loadPublisherDefinitionRequest)
  SharedDtor();
}

void loadPublisherDefinitionRequest::SharedDtor() {
  definition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void loadPublisherDefinitionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* loadPublisherDefinitionRequest::descriptor() {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const loadPublisherDefinitionRequest& loadPublisherDefinitionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2fpublisher_2eproto::scc_info_loadPublisherDefinitionRequest.base);
  return *internal_default_instance();
}


void loadPublisherDefinitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.loadPublisherDefinitionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  definition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool loadPublisherDefinitionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.loadPublisherDefinitionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes definition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_definition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.loadPublisherDefinitionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.loadPublisherDefinitionRequest)
  return false;
#undef DO_
}

void loadPublisherDefinitionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.loadPublisherDefinitionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes definition = 1;
  if (this->definition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->definition(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.loadPublisherDefinitionRequest)
}

::google::protobuf::uint8* loadPublisherDefinitionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.loadPublisherDefinitionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes definition = 1;
  if (this->definition().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->definition(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.loadPublisherDefinitionRequest)
  return target;
}

size_t loadPublisherDefinitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.loadPublisherDefinitionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes definition = 1;
  if (this->definition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->definition());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void loadPublisherDefinitionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.loadPublisherDefinitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const loadPublisherDefinitionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const loadPublisherDefinitionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.loadPublisherDefinitionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.loadPublisherDefinitionRequest)
    MergeFrom(*source);
  }
}

void loadPublisherDefinitionRequest::MergeFrom(const loadPublisherDefinitionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.loadPublisherDefinitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.definition().size() > 0) {

    definition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.definition_);
  }
}

void loadPublisherDefinitionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.loadPublisherDefinitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loadPublisherDefinitionRequest::CopyFrom(const loadPublisherDefinitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.loadPublisherDefinitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loadPublisherDefinitionRequest::IsInitialized() const {
  return true;
}

void loadPublisherDefinitionRequest::Swap(loadPublisherDefinitionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void loadPublisherDefinitionRequest::InternalSwap(loadPublisherDefinitionRequest* other) {
  using std::swap;
  definition_.Swap(&other->definition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata loadPublisherDefinitionRequest::GetMetadata() const {
  protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::PublisherDefinition_FilesEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::PublisherDefinition_FilesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PublisherDefinition_FilesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::PublisherDefinition_LinksEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::PublisherDefinition_LinksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PublisherDefinition_LinksEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::PublisherDefinition_DetailsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::PublisherDefinition_DetailsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PublisherDefinition_DetailsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::PublisherDefinition* Arena::CreateMaybeMessage< ::pb::PublisherDefinition >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PublisherDefinition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::DNPublisherRecord* Arena::CreateMaybeMessage< ::pb::DNPublisherRecord >(Arena* arena) {
  return Arena::CreateInternal< ::pb::DNPublisherRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::RPCPublishPublisherUpdateRequest* Arena::CreateMaybeMessage< ::pb::RPCPublishPublisherUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RPCPublishPublisherUpdateRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::RPCGetPublisherFileRequest* Arena::CreateMaybeMessage< ::pb::RPCGetPublisherFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RPCGetPublisherFileRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::RPCGetPublisherFileResponse* Arena::CreateMaybeMessage< ::pb::RPCGetPublisherFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RPCGetPublisherFileResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::GetPublisherDefinitionRequest* Arena::CreateMaybeMessage< ::pb::GetPublisherDefinitionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::GetPublisherDefinitionRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::loadPublisherDefinitionRequest* Arena::CreateMaybeMessage< ::pb::loadPublisherDefinitionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::loadPublisherDefinitionRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
