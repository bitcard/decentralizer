// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/publisher.proto

#include "pb/publisher.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace pb {
class PublisherDefinition_FilesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublisherDefinition_FilesEntry_DoNotUse>
      _instance;
} _PublisherDefinition_FilesEntry_DoNotUse_default_instance_;
class PublisherDefinition_InstructionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublisherDefinition_InstructionsEntry_DoNotUse>
      _instance;
} _PublisherDefinition_InstructionsEntry_DoNotUse_default_instance_;
class PublisherDefinitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublisherDefinition>
      _instance;
} _PublisherDefinition_default_instance_;
}  // namespace pb
namespace protobuf_pb_2fpublisher_2eproto {
void InitDefaultsPublisherDefinition_FilesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_PublisherDefinition_FilesEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::PublisherDefinition_FilesEntry_DoNotUse();
  }
  ::pb::PublisherDefinition_FilesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsPublisherDefinition_FilesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublisherDefinition_FilesEntry_DoNotUseImpl);
}

void InitDefaultsPublisherDefinition_InstructionsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_PublisherDefinition_InstructionsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::PublisherDefinition_InstructionsEntry_DoNotUse();
  }
  ::pb::PublisherDefinition_InstructionsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsPublisherDefinition_InstructionsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublisherDefinition_InstructionsEntry_DoNotUseImpl);
}

void InitDefaultsPublisherDefinitionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fpublisher_2eproto::InitDefaultsPublisherDefinition_FilesEntry_DoNotUse();
  protobuf_pb_2fpublisher_2eproto::InitDefaultsPublisherDefinition_InstructionsEntry_DoNotUse();
  {
    void* ptr = &::pb::_PublisherDefinition_default_instance_;
    new (ptr) ::pb::PublisherDefinition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PublisherDefinition::InitAsDefaultInstance();
}

void InitDefaultsPublisherDefinition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublisherDefinitionImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_FilesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_FilesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_FilesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_FilesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_InstructionsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_InstructionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_InstructionsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition_InstructionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, instructions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::PublisherDefinition, status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pb::PublisherDefinition_FilesEntry_DoNotUse)},
  { 9, 16, sizeof(::pb::PublisherDefinition_InstructionsEntry_DoNotUse)},
  { 18, -1, sizeof(::pb::PublisherDefinition)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_PublisherDefinition_FilesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_PublisherDefinition_InstructionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_PublisherDefinition_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "pb/publisher.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022pb/publisher.proto\022\002pb\"\235\002\n\023PublisherDe"
      "finition\022\014\n\004hash\030\001 \001(\t\022\021\n\tsignature\030\002 \001("
      "\t\0221\n\005files\030\003 \003(\0132\".pb.PublisherDefinitio"
      "n.FilesEntry\022\?\n\014instructions\030\004 \003(\0132).pb."
      "PublisherDefinition.InstructionsEntry\022\016\n"
      "\006status\030\005 \001(\010\032,\n\nFilesEntry\022\013\n\003key\030\001 \001(\t"
      "\022\r\n\005value\030\002 \001(\t:\0028\001\0323\n\021InstructionsEntry"
      "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb/publisher.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pb_2fpublisher_2eproto
namespace pb {

// ===================================================================

PublisherDefinition_FilesEntry_DoNotUse::PublisherDefinition_FilesEntry_DoNotUse() {}
PublisherDefinition_FilesEntry_DoNotUse::PublisherDefinition_FilesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PublisherDefinition_FilesEntry_DoNotUse::MergeFrom(const PublisherDefinition_FilesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PublisherDefinition_FilesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[0];
}
void PublisherDefinition_FilesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

PublisherDefinition_InstructionsEntry_DoNotUse::PublisherDefinition_InstructionsEntry_DoNotUse() {}
PublisherDefinition_InstructionsEntry_DoNotUse::PublisherDefinition_InstructionsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PublisherDefinition_InstructionsEntry_DoNotUse::MergeFrom(const PublisherDefinition_InstructionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PublisherDefinition_InstructionsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[1];
}
void PublisherDefinition_InstructionsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void PublisherDefinition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublisherDefinition::kHashFieldNumber;
const int PublisherDefinition::kSignatureFieldNumber;
const int PublisherDefinition::kFilesFieldNumber;
const int PublisherDefinition::kInstructionsFieldNumber;
const int PublisherDefinition::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublisherDefinition::PublisherDefinition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fpublisher_2eproto::InitDefaultsPublisherDefinition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PublisherDefinition)
}
PublisherDefinition::PublisherDefinition(const PublisherDefinition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  files_.MergeFrom(from.files_);
  instructions_.MergeFrom(from.instructions_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:pb.PublisherDefinition)
}

void PublisherDefinition::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = false;
  _cached_size_ = 0;
}

PublisherDefinition::~PublisherDefinition() {
  // @@protoc_insertion_point(destructor:pb.PublisherDefinition)
  SharedDtor();
}

void PublisherDefinition::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublisherDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublisherDefinition::descriptor() {
  ::protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublisherDefinition& PublisherDefinition::default_instance() {
  ::protobuf_pb_2fpublisher_2eproto::InitDefaultsPublisherDefinition();
  return *internal_default_instance();
}

PublisherDefinition* PublisherDefinition::New(::google::protobuf::Arena* arena) const {
  PublisherDefinition* n = new PublisherDefinition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublisherDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PublisherDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  instructions_.Clear();
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = false;
  _internal_metadata_.Clear();
}

bool PublisherDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PublisherDefinition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PublisherDefinition.hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), static_cast<int>(this->signature().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PublisherDefinition.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> files = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          PublisherDefinition_FilesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PublisherDefinition_FilesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&files_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PublisherDefinition.FilesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PublisherDefinition.FilesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> instructions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          PublisherDefinition_InstructionsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PublisherDefinition_InstructionsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&instructions_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PublisherDefinition.InstructionsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.PublisherDefinition.InstructionsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PublisherDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PublisherDefinition)
  return false;
#undef DO_
}

void PublisherDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PublisherDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.PublisherDefinition.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash(), output);
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.PublisherDefinition.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signature(), output);
  }

  // map<string, string> files = 3;
  if (!this->files().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.FilesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.FilesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->files().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->files().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->files().begin();
          it != this->files().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PublisherDefinition_FilesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(files_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PublisherDefinition_FilesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->files().begin();
          it != this->files().end(); ++it) {
        entry.reset(files_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> instructions = 4;
  if (!this->instructions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.InstructionsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.InstructionsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->instructions().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->instructions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->instructions().begin();
          it != this->instructions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PublisherDefinition_InstructionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(instructions_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PublisherDefinition_InstructionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->instructions().begin();
          it != this->instructions().end(); ++it) {
        entry.reset(instructions_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PublisherDefinition)
}

::google::protobuf::uint8* PublisherDefinition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.PublisherDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.PublisherDefinition.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hash(), target);
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.PublisherDefinition.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  // map<string, string> files = 3;
  if (!this->files().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.FilesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.FilesEntry.value");
      }
    };

    if (deterministic &&
        this->files().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->files().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->files().begin();
          it != this->files().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PublisherDefinition_FilesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(files_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PublisherDefinition_FilesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->files().begin();
          it != this->files().end(); ++it) {
        entry.reset(files_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> instructions = 4;
  if (!this->instructions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.InstructionsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.PublisherDefinition.InstructionsEntry.value");
      }
    };

    if (deterministic &&
        this->instructions().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->instructions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->instructions().begin();
          it != this->instructions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PublisherDefinition_InstructionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(instructions_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PublisherDefinition_InstructionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->instructions().begin();
          it != this->instructions().end(); ++it) {
        entry.reset(instructions_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool status = 5;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PublisherDefinition)
  return target;
}

size_t PublisherDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PublisherDefinition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> files = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->files_size());
  {
    ::google::protobuf::scoped_ptr<PublisherDefinition_FilesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->files().begin();
        it != this->files().end(); ++it) {
      entry.reset(files_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> instructions = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->instructions_size());
  {
    ::google::protobuf::scoped_ptr<PublisherDefinition_InstructionsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->instructions().begin();
        it != this->instructions().end(); ++it) {
      entry.reset(instructions_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // bool status = 5;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublisherDefinition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PublisherDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const PublisherDefinition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublisherDefinition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PublisherDefinition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PublisherDefinition)
    MergeFrom(*source);
  }
}

void PublisherDefinition::MergeFrom(const PublisherDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PublisherDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  instructions_.MergeFrom(from.instructions_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void PublisherDefinition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PublisherDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublisherDefinition::CopyFrom(const PublisherDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PublisherDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublisherDefinition::IsInitialized() const {
  return true;
}

void PublisherDefinition::Swap(PublisherDefinition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublisherDefinition::InternalSwap(PublisherDefinition* other) {
  using std::swap;
  files_.Swap(&other->files_);
  instructions_.Swap(&other->instructions_);
  hash_.Swap(&other->hash_);
  signature_.Swap(&other->signature_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublisherDefinition::GetMetadata() const {
  protobuf_pb_2fpublisher_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fpublisher_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb

// @@protoc_insertion_point(global_scope)
