// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb/platform.proto

#include "pb/platform.pb.h"
#include "pb/platform.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace pb {

static const char* Decentralizer_method_names[] = {
  "/pb.Decentralizer/GetHealth",
  "/pb.Decentralizer/UpsertSession",
  "/pb.Decentralizer/DeleteSession",
  "/pb.Decentralizer/GetSessionIds",
  "/pb.Decentralizer/GetSession",
  "/pb.Decentralizer/UpsertPeer",
  "/pb.Decentralizer/GetPeerIds",
  "/pb.Decentralizer/GetPeer",
  "/pb.Decentralizer/WritePeerFile",
  "/pb.Decentralizer/GetPeerFile",
  "/pb.Decentralizer/GetPublisherFile",
  "/pb.Decentralizer/SendDirectMessage",
};

std::unique_ptr< Decentralizer::Stub> Decentralizer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Decentralizer::Stub> stub(new Decentralizer::Stub(channel));
  return stub;
}

Decentralizer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetHealth_(Decentralizer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpsertSession_(Decentralizer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSession_(Decentralizer_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSessionIds_(Decentralizer_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSession_(Decentralizer_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpsertPeer_(Decentralizer_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeerIds_(Decentralizer_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeer_(Decentralizer_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WritePeerFile_(Decentralizer_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeerFile_(Decentralizer_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPublisherFile_(Decentralizer_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendDirectMessage_(Decentralizer_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Decentralizer::Stub::GetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::pb::RPCHealthReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetHealth_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>* Decentralizer::Stub::AsyncGetHealthRaw(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>::Create(channel_.get(), cq, rpcmethod_GetHealth_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>* Decentralizer::Stub::PrepareAsyncGetHealthRaw(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>::Create(channel_.get(), cq, rpcmethod_GetHealth_, context, request, false);
}

::grpc::Status Decentralizer::Stub::UpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::pb::RPCUpsertSessionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpsertSession_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>* Decentralizer::Stub::AsyncUpsertSessionRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>::Create(channel_.get(), cq, rpcmethod_UpsertSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>* Decentralizer::Stub::PrepareAsyncUpsertSessionRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>::Create(channel_.get(), cq, rpcmethod_UpsertSession_, context, request, false);
}

::grpc::Status Decentralizer::Stub::DeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::pb::RPCDeleteSessionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteSession_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>* Decentralizer::Stub::AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>* Decentralizer::Stub::PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSession_, context, request, false);
}

::grpc::Status Decentralizer::Stub::GetSessionIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsRequest& request, ::pb::RPCGetSessionIdsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetSessionIds_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>* Decentralizer::Stub::AsyncGetSessionIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>::Create(channel_.get(), cq, rpcmethod_GetSessionIds_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>* Decentralizer::Stub::PrepareAsyncGetSessionIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>::Create(channel_.get(), cq, rpcmethod_GetSessionIds_, context, request, false);
}

::grpc::Status Decentralizer::Stub::GetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::pb::RPCGetSessionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetSession_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>* Decentralizer::Stub::AsyncGetSessionRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>::Create(channel_.get(), cq, rpcmethod_GetSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>* Decentralizer::Stub::PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>::Create(channel_.get(), cq, rpcmethod_GetSession_, context, request, false);
}

::grpc::Status Decentralizer::Stub::UpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::pb::RPCUpsertPeerResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpsertPeer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>* Decentralizer::Stub::AsyncUpsertPeerRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>::Create(channel_.get(), cq, rpcmethod_UpsertPeer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>* Decentralizer::Stub::PrepareAsyncUpsertPeerRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>::Create(channel_.get(), cq, rpcmethod_UpsertPeer_, context, request, false);
}

::grpc::Status Decentralizer::Stub::GetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::pb::RPCGetPeerIdsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetPeerIds_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>* Decentralizer::Stub::AsyncGetPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>::Create(channel_.get(), cq, rpcmethod_GetPeerIds_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>* Decentralizer::Stub::PrepareAsyncGetPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>::Create(channel_.get(), cq, rpcmethod_GetPeerIds_, context, request, false);
}

::grpc::Status Decentralizer::Stub::GetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::pb::RPCGetPeerResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetPeer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>* Decentralizer::Stub::AsyncGetPeerRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>::Create(channel_.get(), cq, rpcmethod_GetPeer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>* Decentralizer::Stub::PrepareAsyncGetPeerRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>::Create(channel_.get(), cq, rpcmethod_GetPeer_, context, request, false);
}

::grpc::Status Decentralizer::Stub::WritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::pb::RPCWritePeerFileResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_WritePeerFile_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>* Decentralizer::Stub::AsyncWritePeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>::Create(channel_.get(), cq, rpcmethod_WritePeerFile_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>* Decentralizer::Stub::PrepareAsyncWritePeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>::Create(channel_.get(), cq, rpcmethod_WritePeerFile_, context, request, false);
}

::grpc::Status Decentralizer::Stub::GetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::pb::RPCGetPeerFileResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetPeerFile_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>* Decentralizer::Stub::AsyncGetPeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>::Create(channel_.get(), cq, rpcmethod_GetPeerFile_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>* Decentralizer::Stub::PrepareAsyncGetPeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>::Create(channel_.get(), cq, rpcmethod_GetPeerFile_, context, request, false);
}

::grpc::Status Decentralizer::Stub::GetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::pb::RPCGetPublisherFileResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetPublisherFile_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>* Decentralizer::Stub::AsyncGetPublisherFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>::Create(channel_.get(), cq, rpcmethod_GetPublisherFile_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>* Decentralizer::Stub::PrepareAsyncGetPublisherFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>::Create(channel_.get(), cq, rpcmethod_GetPublisherFile_, context, request, false);
}

::grpc::Status Decentralizer::Stub::SendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessageRequest& request, ::pb::RPCDirectMessageResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendDirectMessage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCDirectMessageResponse>* Decentralizer::Stub::AsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCDirectMessageResponse>::Create(channel_.get(), cq, rpcmethod_SendDirectMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RPCDirectMessageResponse>* Decentralizer::Stub::PrepareAsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pb::RPCDirectMessageResponse>::Create(channel_.get(), cq, rpcmethod_SendDirectMessage_, context, request, false);
}

Decentralizer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCHealthRequest, ::pb::RPCHealthReply>(
          std::mem_fn(&Decentralizer::Service::GetHealth), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCUpsertSessionRequest, ::pb::RPCUpsertSessionResponse>(
          std::mem_fn(&Decentralizer::Service::UpsertSession), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCDeleteSessionRequest, ::pb::RPCDeleteSessionResponse>(
          std::mem_fn(&Decentralizer::Service::DeleteSession), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCGetSessionIdsRequest, ::pb::RPCGetSessionIdsResponse>(
          std::mem_fn(&Decentralizer::Service::GetSessionIds), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCGetSessionRequest, ::pb::RPCGetSessionResponse>(
          std::mem_fn(&Decentralizer::Service::GetSession), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCUpsertPeerRequest, ::pb::RPCUpsertPeerResponse>(
          std::mem_fn(&Decentralizer::Service::UpsertPeer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCGetPeerIdsRequest, ::pb::RPCGetPeerIdsResponse>(
          std::mem_fn(&Decentralizer::Service::GetPeerIds), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCGetPeerRequest, ::pb::RPCGetPeerResponse>(
          std::mem_fn(&Decentralizer::Service::GetPeer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCWritePeerFileRequest, ::pb::RPCWritePeerFileResponse>(
          std::mem_fn(&Decentralizer::Service::WritePeerFile), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCGetPeerFileRequest, ::pb::RPCGetPeerFileResponse>(
          std::mem_fn(&Decentralizer::Service::GetPeerFile), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCGetPublisherFileRequest, ::pb::RPCGetPublisherFileResponse>(
          std::mem_fn(&Decentralizer::Service::GetPublisherFile), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Decentralizer_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Decentralizer::Service, ::pb::RPCDirectMessageRequest, ::pb::RPCDirectMessageResponse>(
          std::mem_fn(&Decentralizer::Service::SendDirectMessage), this)));
}

Decentralizer::Service::~Service() {
}

::grpc::Status Decentralizer::Service::GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Decentralizer::Service::UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Decentralizer::Service::DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Decentralizer::Service::GetSessionIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Decentralizer::Service::GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Decentralizer::Service::UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Decentralizer::Service::GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Decentralizer::Service::GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Decentralizer::Service::WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Decentralizer::Service::GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Decentralizer::Service::GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Decentralizer::Service::SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessageRequest* request, ::pb::RPCDirectMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pb

