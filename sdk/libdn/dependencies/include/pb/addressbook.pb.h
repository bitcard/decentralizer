// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/addressbook.proto

#ifndef PROTOBUF_pb_2faddressbook_2eproto__INCLUDED
#define PROTOBUF_pb_2faddressbook_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_pb_2faddressbook_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPeer_DetailsEntry_DoNotUseImpl();
void InitDefaultsPeer_DetailsEntry_DoNotUse();
void InitDefaultsPeerImpl();
void InitDefaultsPeer();
void InitDefaultsDNPeerResponseImpl();
void InitDefaultsDNPeerResponse();
void InitDefaultsDNPeerRequestImpl();
void InitDefaultsDNPeerRequest();
void InitDefaultsRPCUpsertPeerRequestImpl();
void InitDefaultsRPCUpsertPeerRequest();
void InitDefaultsRPCUpsertPeerResponseImpl();
void InitDefaultsRPCUpsertPeerResponse();
void InitDefaultsRPCGetPeerIdsRequestImpl();
void InitDefaultsRPCGetPeerIdsRequest();
void InitDefaultsRPCGetPeerIdsResponseImpl();
void InitDefaultsRPCGetPeerIdsResponse();
void InitDefaultsRPCGetPeerRequestImpl();
void InitDefaultsRPCGetPeerRequest();
void InitDefaultsRPCGetPeerResponseImpl();
void InitDefaultsRPCGetPeerResponse();
inline void InitDefaults() {
  InitDefaultsPeer_DetailsEntry_DoNotUse();
  InitDefaultsPeer();
  InitDefaultsDNPeerResponse();
  InitDefaultsDNPeerRequest();
  InitDefaultsRPCUpsertPeerRequest();
  InitDefaultsRPCUpsertPeerResponse();
  InitDefaultsRPCGetPeerIdsRequest();
  InitDefaultsRPCGetPeerIdsResponse();
  InitDefaultsRPCGetPeerRequest();
  InitDefaultsRPCGetPeerResponse();
}
}  // namespace protobuf_pb_2faddressbook_2eproto
namespace pb {
class DNPeerRequest;
class DNPeerRequestDefaultTypeInternal;
extern DNPeerRequestDefaultTypeInternal _DNPeerRequest_default_instance_;
class DNPeerResponse;
class DNPeerResponseDefaultTypeInternal;
extern DNPeerResponseDefaultTypeInternal _DNPeerResponse_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class Peer_DetailsEntry_DoNotUse;
class Peer_DetailsEntry_DoNotUseDefaultTypeInternal;
extern Peer_DetailsEntry_DoNotUseDefaultTypeInternal _Peer_DetailsEntry_DoNotUse_default_instance_;
class RPCGetPeerIdsRequest;
class RPCGetPeerIdsRequestDefaultTypeInternal;
extern RPCGetPeerIdsRequestDefaultTypeInternal _RPCGetPeerIdsRequest_default_instance_;
class RPCGetPeerIdsResponse;
class RPCGetPeerIdsResponseDefaultTypeInternal;
extern RPCGetPeerIdsResponseDefaultTypeInternal _RPCGetPeerIdsResponse_default_instance_;
class RPCGetPeerRequest;
class RPCGetPeerRequestDefaultTypeInternal;
extern RPCGetPeerRequestDefaultTypeInternal _RPCGetPeerRequest_default_instance_;
class RPCGetPeerResponse;
class RPCGetPeerResponseDefaultTypeInternal;
extern RPCGetPeerResponseDefaultTypeInternal _RPCGetPeerResponse_default_instance_;
class RPCUpsertPeerRequest;
class RPCUpsertPeerRequestDefaultTypeInternal;
extern RPCUpsertPeerRequestDefaultTypeInternal _RPCUpsertPeerRequest_default_instance_;
class RPCUpsertPeerResponse;
class RPCUpsertPeerResponseDefaultTypeInternal;
extern RPCUpsertPeerResponseDefaultTypeInternal _RPCUpsertPeerResponse_default_instance_;
}  // namespace pb
namespace pb {

// ===================================================================

class Peer_DetailsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Peer_DetailsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Peer_DetailsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Peer_DetailsEntry_DoNotUse();
  Peer_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Peer_DetailsEntry_DoNotUse& other);
  static const Peer_DetailsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Peer_DetailsEntry_DoNotUse*>(&_Peer_DetailsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Peer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Peer) */ {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Peer* other);
  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const PROTOBUF_FINAL { return New(NULL); }

  Peer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Peer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> details = 3;
  int details_size() const;
  void clear_details();
  static const int kDetailsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      details() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_details();

  // string pId = 1;
  void clear_pid();
  static const int kPIdFieldNumber = 1;
  const ::std::string& pid() const;
  void set_pid(const ::std::string& value);
  #if LANG_CXX11
  void set_pid(::std::string&& value);
  #endif
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  ::std::string* mutable_pid();
  ::std::string* release_pid();
  void set_allocated_pid(::std::string* pid);

  // uint64 dnId = 2;
  void clear_dnid();
  static const int kDnIdFieldNumber = 2;
  ::google::protobuf::uint64 dnid() const;
  void set_dnid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.Peer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Peer_DetailsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > details_;
  ::google::protobuf::internal::ArenaStringPtr pid_;
  ::google::protobuf::uint64 dnid_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2faddressbook_2eproto::TableStruct;
  friend void ::protobuf_pb_2faddressbook_2eproto::InitDefaultsPeerImpl();
};
// -------------------------------------------------------------------

class DNPeerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DNPeerResponse) */ {
 public:
  DNPeerResponse();
  virtual ~DNPeerResponse();

  DNPeerResponse(const DNPeerResponse& from);

  inline DNPeerResponse& operator=(const DNPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DNPeerResponse(DNPeerResponse&& from) noexcept
    : DNPeerResponse() {
    *this = ::std::move(from);
  }

  inline DNPeerResponse& operator=(DNPeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DNPeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNPeerResponse* internal_default_instance() {
    return reinterpret_cast<const DNPeerResponse*>(
               &_DNPeerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DNPeerResponse* other);
  friend void swap(DNPeerResponse& a, DNPeerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DNPeerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DNPeerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DNPeerResponse& from);
  void MergeFrom(const DNPeerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DNPeerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::pb::Peer& peer() const;
  ::pb::Peer* release_peer();
  ::pb::Peer* mutable_peer();
  void set_allocated_peer(::pb::Peer* peer);

  // @@protoc_insertion_point(class_scope:pb.DNPeerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Peer* peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2faddressbook_2eproto::TableStruct;
  friend void ::protobuf_pb_2faddressbook_2eproto::InitDefaultsDNPeerResponseImpl();
};
// -------------------------------------------------------------------

class DNPeerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DNPeerRequest) */ {
 public:
  DNPeerRequest();
  virtual ~DNPeerRequest();

  DNPeerRequest(const DNPeerRequest& from);

  inline DNPeerRequest& operator=(const DNPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DNPeerRequest(DNPeerRequest&& from) noexcept
    : DNPeerRequest() {
    *this = ::std::move(from);
  }

  inline DNPeerRequest& operator=(DNPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DNPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNPeerRequest* internal_default_instance() {
    return reinterpret_cast<const DNPeerRequest*>(
               &_DNPeerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DNPeerRequest* other);
  friend void swap(DNPeerRequest& a, DNPeerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DNPeerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DNPeerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DNPeerRequest& from);
  void MergeFrom(const DNPeerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DNPeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.DNPeerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2faddressbook_2eproto::TableStruct;
  friend void ::protobuf_pb_2faddressbook_2eproto::InitDefaultsDNPeerRequestImpl();
};
// -------------------------------------------------------------------

class RPCUpsertPeerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCUpsertPeerRequest) */ {
 public:
  RPCUpsertPeerRequest();
  virtual ~RPCUpsertPeerRequest();

  RPCUpsertPeerRequest(const RPCUpsertPeerRequest& from);

  inline RPCUpsertPeerRequest& operator=(const RPCUpsertPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCUpsertPeerRequest(RPCUpsertPeerRequest&& from) noexcept
    : RPCUpsertPeerRequest() {
    *this = ::std::move(from);
  }

  inline RPCUpsertPeerRequest& operator=(RPCUpsertPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCUpsertPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCUpsertPeerRequest* internal_default_instance() {
    return reinterpret_cast<const RPCUpsertPeerRequest*>(
               &_RPCUpsertPeerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RPCUpsertPeerRequest* other);
  friend void swap(RPCUpsertPeerRequest& a, RPCUpsertPeerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCUpsertPeerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCUpsertPeerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCUpsertPeerRequest& from);
  void MergeFrom(const RPCUpsertPeerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCUpsertPeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::pb::Peer& peer() const;
  ::pb::Peer* release_peer();
  ::pb::Peer* mutable_peer();
  void set_allocated_peer(::pb::Peer* peer);

  // @@protoc_insertion_point(class_scope:pb.RPCUpsertPeerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Peer* peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2faddressbook_2eproto::TableStruct;
  friend void ::protobuf_pb_2faddressbook_2eproto::InitDefaultsRPCUpsertPeerRequestImpl();
};
// -------------------------------------------------------------------

class RPCUpsertPeerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCUpsertPeerResponse) */ {
 public:
  RPCUpsertPeerResponse();
  virtual ~RPCUpsertPeerResponse();

  RPCUpsertPeerResponse(const RPCUpsertPeerResponse& from);

  inline RPCUpsertPeerResponse& operator=(const RPCUpsertPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCUpsertPeerResponse(RPCUpsertPeerResponse&& from) noexcept
    : RPCUpsertPeerResponse() {
    *this = ::std::move(from);
  }

  inline RPCUpsertPeerResponse& operator=(RPCUpsertPeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCUpsertPeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCUpsertPeerResponse* internal_default_instance() {
    return reinterpret_cast<const RPCUpsertPeerResponse*>(
               &_RPCUpsertPeerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RPCUpsertPeerResponse* other);
  friend void swap(RPCUpsertPeerResponse& a, RPCUpsertPeerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCUpsertPeerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCUpsertPeerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCUpsertPeerResponse& from);
  void MergeFrom(const RPCUpsertPeerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCUpsertPeerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:pb.RPCUpsertPeerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2faddressbook_2eproto::TableStruct;
  friend void ::protobuf_pb_2faddressbook_2eproto::InitDefaultsRPCUpsertPeerResponseImpl();
};
// -------------------------------------------------------------------

class RPCGetPeerIdsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetPeerIdsRequest) */ {
 public:
  RPCGetPeerIdsRequest();
  virtual ~RPCGetPeerIdsRequest();

  RPCGetPeerIdsRequest(const RPCGetPeerIdsRequest& from);

  inline RPCGetPeerIdsRequest& operator=(const RPCGetPeerIdsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetPeerIdsRequest(RPCGetPeerIdsRequest&& from) noexcept
    : RPCGetPeerIdsRequest() {
    *this = ::std::move(from);
  }

  inline RPCGetPeerIdsRequest& operator=(RPCGetPeerIdsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetPeerIdsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetPeerIdsRequest* internal_default_instance() {
    return reinterpret_cast<const RPCGetPeerIdsRequest*>(
               &_RPCGetPeerIdsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RPCGetPeerIdsRequest* other);
  friend void swap(RPCGetPeerIdsRequest& a, RPCGetPeerIdsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetPeerIdsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCGetPeerIdsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCGetPeerIdsRequest& from);
  void MergeFrom(const RPCGetPeerIdsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCGetPeerIdsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:pb.RPCGetPeerIdsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2faddressbook_2eproto::TableStruct;
  friend void ::protobuf_pb_2faddressbook_2eproto::InitDefaultsRPCGetPeerIdsRequestImpl();
};
// -------------------------------------------------------------------

class RPCGetPeerIdsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetPeerIdsResponse) */ {
 public:
  RPCGetPeerIdsResponse();
  virtual ~RPCGetPeerIdsResponse();

  RPCGetPeerIdsResponse(const RPCGetPeerIdsResponse& from);

  inline RPCGetPeerIdsResponse& operator=(const RPCGetPeerIdsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetPeerIdsResponse(RPCGetPeerIdsResponse&& from) noexcept
    : RPCGetPeerIdsResponse() {
    *this = ::std::move(from);
  }

  inline RPCGetPeerIdsResponse& operator=(RPCGetPeerIdsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetPeerIdsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetPeerIdsResponse* internal_default_instance() {
    return reinterpret_cast<const RPCGetPeerIdsResponse*>(
               &_RPCGetPeerIdsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(RPCGetPeerIdsResponse* other);
  friend void swap(RPCGetPeerIdsResponse& a, RPCGetPeerIdsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetPeerIdsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCGetPeerIdsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCGetPeerIdsResponse& from);
  void MergeFrom(const RPCGetPeerIdsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCGetPeerIdsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string peerId = 1;
  int peerid_size() const;
  void clear_peerid();
  static const int kPeerIdFieldNumber = 1;
  const ::std::string& peerid(int index) const;
  ::std::string* mutable_peerid(int index);
  void set_peerid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_peerid(int index, ::std::string&& value);
  #endif
  void set_peerid(int index, const char* value);
  void set_peerid(int index, const char* value, size_t size);
  ::std::string* add_peerid();
  void add_peerid(const ::std::string& value);
  #if LANG_CXX11
  void add_peerid(::std::string&& value);
  #endif
  void add_peerid(const char* value);
  void add_peerid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& peerid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peerid();

  // @@protoc_insertion_point(class_scope:pb.RPCGetPeerIdsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peerid_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2faddressbook_2eproto::TableStruct;
  friend void ::protobuf_pb_2faddressbook_2eproto::InitDefaultsRPCGetPeerIdsResponseImpl();
};
// -------------------------------------------------------------------

class RPCGetPeerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetPeerRequest) */ {
 public:
  RPCGetPeerRequest();
  virtual ~RPCGetPeerRequest();

  RPCGetPeerRequest(const RPCGetPeerRequest& from);

  inline RPCGetPeerRequest& operator=(const RPCGetPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetPeerRequest(RPCGetPeerRequest&& from) noexcept
    : RPCGetPeerRequest() {
    *this = ::std::move(from);
  }

  inline RPCGetPeerRequest& operator=(RPCGetPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetPeerRequest* internal_default_instance() {
    return reinterpret_cast<const RPCGetPeerRequest*>(
               &_RPCGetPeerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(RPCGetPeerRequest* other);
  friend void swap(RPCGetPeerRequest& a, RPCGetPeerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetPeerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCGetPeerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCGetPeerRequest& from);
  void MergeFrom(const RPCGetPeerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCGetPeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pId = 1;
  void clear_pid();
  static const int kPIdFieldNumber = 1;
  const ::std::string& pid() const;
  void set_pid(const ::std::string& value);
  #if LANG_CXX11
  void set_pid(::std::string&& value);
  #endif
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  ::std::string* mutable_pid();
  ::std::string* release_pid();
  void set_allocated_pid(::std::string* pid);

  // uint64 dnId = 2;
  void clear_dnid();
  static const int kDnIdFieldNumber = 2;
  ::google::protobuf::uint64 dnid() const;
  void set_dnid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.RPCGetPeerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pid_;
  ::google::protobuf::uint64 dnid_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2faddressbook_2eproto::TableStruct;
  friend void ::protobuf_pb_2faddressbook_2eproto::InitDefaultsRPCGetPeerRequestImpl();
};
// -------------------------------------------------------------------

class RPCGetPeerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetPeerResponse) */ {
 public:
  RPCGetPeerResponse();
  virtual ~RPCGetPeerResponse();

  RPCGetPeerResponse(const RPCGetPeerResponse& from);

  inline RPCGetPeerResponse& operator=(const RPCGetPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetPeerResponse(RPCGetPeerResponse&& from) noexcept
    : RPCGetPeerResponse() {
    *this = ::std::move(from);
  }

  inline RPCGetPeerResponse& operator=(RPCGetPeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetPeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetPeerResponse* internal_default_instance() {
    return reinterpret_cast<const RPCGetPeerResponse*>(
               &_RPCGetPeerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(RPCGetPeerResponse* other);
  friend void swap(RPCGetPeerResponse& a, RPCGetPeerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetPeerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCGetPeerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCGetPeerResponse& from);
  void MergeFrom(const RPCGetPeerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCGetPeerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::pb::Peer& peer() const;
  ::pb::Peer* release_peer();
  ::pb::Peer* mutable_peer();
  void set_allocated_peer(::pb::Peer* peer);

  // @@protoc_insertion_point(class_scope:pb.RPCGetPeerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Peer* peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2faddressbook_2eproto::TableStruct;
  friend void ::protobuf_pb_2faddressbook_2eproto::InitDefaultsRPCGetPeerResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Peer

// string pId = 1;
inline void Peer::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Peer::pid() const {
  // @@protoc_insertion_point(field_get:pb.Peer.pId)
  return pid_.GetNoArena();
}
inline void Peer::set_pid(const ::std::string& value) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Peer.pId)
}
#if LANG_CXX11
inline void Peer::set_pid(::std::string&& value) {
  
  pid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Peer.pId)
}
#endif
inline void Peer::set_pid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Peer.pId)
}
inline void Peer::set_pid(const char* value, size_t size) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Peer.pId)
}
inline ::std::string* Peer::mutable_pid() {
  
  // @@protoc_insertion_point(field_mutable:pb.Peer.pId)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Peer::release_pid() {
  // @@protoc_insertion_point(field_release:pb.Peer.pId)
  
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    
  } else {
    
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:pb.Peer.pId)
}

// uint64 dnId = 2;
inline void Peer::clear_dnid() {
  dnid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Peer::dnid() const {
  // @@protoc_insertion_point(field_get:pb.Peer.dnId)
  return dnid_;
}
inline void Peer::set_dnid(::google::protobuf::uint64 value) {
  
  dnid_ = value;
  // @@protoc_insertion_point(field_set:pb.Peer.dnId)
}

// map<string, string> details = 3;
inline int Peer::details_size() const {
  return details_.size();
}
inline void Peer::clear_details() {
  details_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Peer::details() const {
  // @@protoc_insertion_point(field_map:pb.Peer.details)
  return details_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Peer::mutable_details() {
  // @@protoc_insertion_point(field_mutable_map:pb.Peer.details)
  return details_.MutableMap();
}

// -------------------------------------------------------------------

// DNPeerResponse

// .pb.Peer peer = 1;
inline bool DNPeerResponse::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void DNPeerResponse::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::pb::Peer& DNPeerResponse::peer() const {
  const ::pb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:pb.DNPeerResponse.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Peer*>(
      &::pb::_Peer_default_instance_);
}
inline ::pb::Peer* DNPeerResponse::release_peer() {
  // @@protoc_insertion_point(field_release:pb.DNPeerResponse.peer)
  
  ::pb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::pb::Peer* DNPeerResponse::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::pb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:pb.DNPeerResponse.peer)
  return peer_;
}
inline void DNPeerResponse::set_allocated_peer(::pb::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:pb.DNPeerResponse.peer)
}

// -------------------------------------------------------------------

// DNPeerRequest

// -------------------------------------------------------------------

// RPCUpsertPeerRequest

// .pb.Peer peer = 1;
inline bool RPCUpsertPeerRequest::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void RPCUpsertPeerRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::pb::Peer& RPCUpsertPeerRequest::peer() const {
  const ::pb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:pb.RPCUpsertPeerRequest.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Peer*>(
      &::pb::_Peer_default_instance_);
}
inline ::pb::Peer* RPCUpsertPeerRequest::release_peer() {
  // @@protoc_insertion_point(field_release:pb.RPCUpsertPeerRequest.peer)
  
  ::pb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::pb::Peer* RPCUpsertPeerRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::pb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCUpsertPeerRequest.peer)
  return peer_;
}
inline void RPCUpsertPeerRequest::set_allocated_peer(::pb::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:pb.RPCUpsertPeerRequest.peer)
}

// -------------------------------------------------------------------

// RPCUpsertPeerResponse

// bool result = 1;
inline void RPCUpsertPeerResponse::clear_result() {
  result_ = false;
}
inline bool RPCUpsertPeerResponse::result() const {
  // @@protoc_insertion_point(field_get:pb.RPCUpsertPeerResponse.result)
  return result_;
}
inline void RPCUpsertPeerResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCUpsertPeerResponse.result)
}

// -------------------------------------------------------------------

// RPCGetPeerIdsRequest

// string key = 1;
inline void RPCGetPeerIdsRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetPeerIdsRequest::key() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetPeerIdsRequest.key)
  return key_.GetNoArena();
}
inline void RPCGetPeerIdsRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetPeerIdsRequest.key)
}
#if LANG_CXX11
inline void RPCGetPeerIdsRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetPeerIdsRequest.key)
}
#endif
inline void RPCGetPeerIdsRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetPeerIdsRequest.key)
}
inline void RPCGetPeerIdsRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetPeerIdsRequest.key)
}
inline ::std::string* RPCGetPeerIdsRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetPeerIdsRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetPeerIdsRequest::release_key() {
  // @@protoc_insertion_point(field_release:pb.RPCGetPeerIdsRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetPeerIdsRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetPeerIdsRequest.key)
}

// string value = 2;
inline void RPCGetPeerIdsRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetPeerIdsRequest::value() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetPeerIdsRequest.value)
  return value_.GetNoArena();
}
inline void RPCGetPeerIdsRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetPeerIdsRequest.value)
}
#if LANG_CXX11
inline void RPCGetPeerIdsRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetPeerIdsRequest.value)
}
#endif
inline void RPCGetPeerIdsRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetPeerIdsRequest.value)
}
inline void RPCGetPeerIdsRequest::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetPeerIdsRequest.value)
}
inline ::std::string* RPCGetPeerIdsRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetPeerIdsRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetPeerIdsRequest::release_value() {
  // @@protoc_insertion_point(field_release:pb.RPCGetPeerIdsRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetPeerIdsRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetPeerIdsRequest.value)
}

// -------------------------------------------------------------------

// RPCGetPeerIdsResponse

// repeated string peerId = 1;
inline int RPCGetPeerIdsResponse::peerid_size() const {
  return peerid_.size();
}
inline void RPCGetPeerIdsResponse::clear_peerid() {
  peerid_.Clear();
}
inline const ::std::string& RPCGetPeerIdsResponse::peerid(int index) const {
  // @@protoc_insertion_point(field_get:pb.RPCGetPeerIdsResponse.peerId)
  return peerid_.Get(index);
}
inline ::std::string* RPCGetPeerIdsResponse::mutable_peerid(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RPCGetPeerIdsResponse.peerId)
  return peerid_.Mutable(index);
}
inline void RPCGetPeerIdsResponse::set_peerid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.RPCGetPeerIdsResponse.peerId)
  peerid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RPCGetPeerIdsResponse::set_peerid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.RPCGetPeerIdsResponse.peerId)
  peerid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RPCGetPeerIdsResponse::set_peerid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peerid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.RPCGetPeerIdsResponse.peerId)
}
inline void RPCGetPeerIdsResponse::set_peerid(int index, const char* value, size_t size) {
  peerid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetPeerIdsResponse.peerId)
}
inline ::std::string* RPCGetPeerIdsResponse::add_peerid() {
  // @@protoc_insertion_point(field_add_mutable:pb.RPCGetPeerIdsResponse.peerId)
  return peerid_.Add();
}
inline void RPCGetPeerIdsResponse::add_peerid(const ::std::string& value) {
  peerid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.RPCGetPeerIdsResponse.peerId)
}
#if LANG_CXX11
inline void RPCGetPeerIdsResponse::add_peerid(::std::string&& value) {
  peerid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.RPCGetPeerIdsResponse.peerId)
}
#endif
inline void RPCGetPeerIdsResponse::add_peerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peerid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.RPCGetPeerIdsResponse.peerId)
}
inline void RPCGetPeerIdsResponse::add_peerid(const char* value, size_t size) {
  peerid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.RPCGetPeerIdsResponse.peerId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RPCGetPeerIdsResponse::peerid() const {
  // @@protoc_insertion_point(field_list:pb.RPCGetPeerIdsResponse.peerId)
  return peerid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RPCGetPeerIdsResponse::mutable_peerid() {
  // @@protoc_insertion_point(field_mutable_list:pb.RPCGetPeerIdsResponse.peerId)
  return &peerid_;
}

// -------------------------------------------------------------------

// RPCGetPeerRequest

// string pId = 1;
inline void RPCGetPeerRequest::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetPeerRequest::pid() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetPeerRequest.pId)
  return pid_.GetNoArena();
}
inline void RPCGetPeerRequest::set_pid(const ::std::string& value) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetPeerRequest.pId)
}
#if LANG_CXX11
inline void RPCGetPeerRequest::set_pid(::std::string&& value) {
  
  pid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetPeerRequest.pId)
}
#endif
inline void RPCGetPeerRequest::set_pid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetPeerRequest.pId)
}
inline void RPCGetPeerRequest::set_pid(const char* value, size_t size) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetPeerRequest.pId)
}
inline ::std::string* RPCGetPeerRequest::mutable_pid() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetPeerRequest.pId)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetPeerRequest::release_pid() {
  // @@protoc_insertion_point(field_release:pb.RPCGetPeerRequest.pId)
  
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetPeerRequest::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    
  } else {
    
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetPeerRequest.pId)
}

// uint64 dnId = 2;
inline void RPCGetPeerRequest::clear_dnid() {
  dnid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RPCGetPeerRequest::dnid() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetPeerRequest.dnId)
  return dnid_;
}
inline void RPCGetPeerRequest::set_dnid(::google::protobuf::uint64 value) {
  
  dnid_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCGetPeerRequest.dnId)
}

// -------------------------------------------------------------------

// RPCGetPeerResponse

// .pb.Peer peer = 1;
inline bool RPCGetPeerResponse::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void RPCGetPeerResponse::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::pb::Peer& RPCGetPeerResponse::peer() const {
  const ::pb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:pb.RPCGetPeerResponse.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Peer*>(
      &::pb::_Peer_default_instance_);
}
inline ::pb::Peer* RPCGetPeerResponse::release_peer() {
  // @@protoc_insertion_point(field_release:pb.RPCGetPeerResponse.peer)
  
  ::pb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::pb::Peer* RPCGetPeerResponse::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::pb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCGetPeerResponse.peer)
  return peer_;
}
inline void RPCGetPeerResponse::set_allocated_peer(::pb::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetPeerResponse.peer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_2faddressbook_2eproto__INCLUDED
