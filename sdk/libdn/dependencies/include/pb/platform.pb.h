// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/platform.proto

#ifndef PROTOBUF_pb_2fplatform_2eproto__INCLUDED
#define PROTOBUF_pb_2fplatform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "pb/matchmaking.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_pb_2fplatform_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsRPCHealthRequestImpl();
void InitDefaultsRPCHealthRequest();
void InitDefaultsRPCHealthReplyImpl();
void InitDefaultsRPCHealthReply();
void InitDefaultsRPCMessageImpl();
void InitDefaultsRPCMessage();
inline void InitDefaults() {
  InitDefaultsRPCHealthRequest();
  InitDefaultsRPCHealthReply();
  InitDefaultsRPCMessage();
}
}  // namespace protobuf_pb_2fplatform_2eproto
namespace pb {
class RPCHealthReply;
class RPCHealthReplyDefaultTypeInternal;
extern RPCHealthReplyDefaultTypeInternal _RPCHealthReply_default_instance_;
class RPCHealthRequest;
class RPCHealthRequestDefaultTypeInternal;
extern RPCHealthRequestDefaultTypeInternal _RPCHealthRequest_default_instance_;
class RPCMessage;
class RPCMessageDefaultTypeInternal;
extern RPCMessageDefaultTypeInternal _RPCMessage_default_instance_;
}  // namespace pb
namespace pb {

// ===================================================================

class RPCHealthRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.RPCHealthRequest) */ {
 public:
  RPCHealthRequest();
  virtual ~RPCHealthRequest();

  RPCHealthRequest(const RPCHealthRequest& from);

  inline RPCHealthRequest& operator=(const RPCHealthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCHealthRequest(RPCHealthRequest&& from) noexcept
    : RPCHealthRequest() {
    *this = ::std::move(from);
  }

  inline RPCHealthRequest& operator=(RPCHealthRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RPCHealthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCHealthRequest* internal_default_instance() {
    return reinterpret_cast<const RPCHealthRequest*>(
               &_RPCHealthRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RPCHealthRequest* other);
  friend void swap(RPCHealthRequest& a, RPCHealthRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCHealthRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCHealthRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RPCHealthRequest& from);
  void MergeFrom(const RPCHealthRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCHealthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RPCHealthRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fplatform_2eproto::TableStruct;
  friend void ::protobuf_pb_2fplatform_2eproto::InitDefaultsRPCHealthRequestImpl();
};
// -------------------------------------------------------------------

class RPCHealthReply : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.RPCHealthReply) */ {
 public:
  RPCHealthReply();
  virtual ~RPCHealthReply();

  RPCHealthReply(const RPCHealthReply& from);

  inline RPCHealthReply& operator=(const RPCHealthReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCHealthReply(RPCHealthReply&& from) noexcept
    : RPCHealthReply() {
    *this = ::std::move(from);
  }

  inline RPCHealthReply& operator=(RPCHealthReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RPCHealthReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCHealthReply* internal_default_instance() {
    return reinterpret_cast<const RPCHealthReply*>(
               &_RPCHealthReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RPCHealthReply* other);
  friend void swap(RPCHealthReply& a, RPCHealthReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCHealthReply* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCHealthReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RPCHealthReply& from);
  void MergeFrom(const RPCHealthReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCHealthReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool ready = 1;
  void clear_ready();
  static const int kReadyFieldNumber = 1;
  bool ready() const;
  void set_ready(bool value);

  // @@protoc_insertion_point(class_scope:pb.RPCHealthReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool ready_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fplatform_2eproto::TableStruct;
  friend void ::protobuf_pb_2fplatform_2eproto::InitDefaultsRPCHealthReplyImpl();
};
// -------------------------------------------------------------------

class RPCMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.RPCMessage) */ {
 public:
  RPCMessage();
  virtual ~RPCMessage();

  RPCMessage(const RPCMessage& from);

  inline RPCMessage& operator=(const RPCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCMessage(RPCMessage&& from) noexcept
    : RPCMessage() {
    *this = ::std::move(from);
  }

  inline RPCMessage& operator=(RPCMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RPCMessage& default_instance();

  enum MsgCase {
    kHealthRequest = 3,
    kHealthReply = 4,
    kUpsertSessionRequest = 5,
    kUpsertSessionResponse = 6,
    kDeleteSessionRequest = 7,
    kDeleteSessionResponse = 8,
    kRefreshSessionsRequest = 9,
    kRefreshSessionsResponse = 10,
    kSessionIdsRequest = 11,
    kSessionIdsResponse = 12,
    kGetSessionRequest = 13,
    kGetSessionResponse = 14,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCMessage* internal_default_instance() {
    return reinterpret_cast<const RPCMessage*>(
               &_RPCMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RPCMessage* other);
  friend void swap(RPCMessage& a, RPCMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RPCMessage& from);
  void MergeFrom(const RPCMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // int64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // .pb.RPCHealthRequest healthRequest = 3;
  bool has_healthrequest() const;
  void clear_healthrequest();
  static const int kHealthRequestFieldNumber = 3;
  const ::pb::RPCHealthRequest& healthrequest() const;
  ::pb::RPCHealthRequest* release_healthrequest();
  ::pb::RPCHealthRequest* mutable_healthrequest();
  void set_allocated_healthrequest(::pb::RPCHealthRequest* healthrequest);

  // .pb.RPCHealthReply HealthReply = 4;
  bool has_healthreply() const;
  void clear_healthreply();
  static const int kHealthReplyFieldNumber = 4;
  const ::pb::RPCHealthReply& healthreply() const;
  ::pb::RPCHealthReply* release_healthreply();
  ::pb::RPCHealthReply* mutable_healthreply();
  void set_allocated_healthreply(::pb::RPCHealthReply* healthreply);

  // .pb.RPCUpsertSessionRequest UpsertSessionRequest = 5;
  bool has_upsertsessionrequest() const;
  void clear_upsertsessionrequest();
  static const int kUpsertSessionRequestFieldNumber = 5;
  const ::pb::RPCUpsertSessionRequest& upsertsessionrequest() const;
  ::pb::RPCUpsertSessionRequest* release_upsertsessionrequest();
  ::pb::RPCUpsertSessionRequest* mutable_upsertsessionrequest();
  void set_allocated_upsertsessionrequest(::pb::RPCUpsertSessionRequest* upsertsessionrequest);

  // .pb.RPCUpsertSessionResponse UpsertSessionResponse = 6;
  bool has_upsertsessionresponse() const;
  void clear_upsertsessionresponse();
  static const int kUpsertSessionResponseFieldNumber = 6;
  const ::pb::RPCUpsertSessionResponse& upsertsessionresponse() const;
  ::pb::RPCUpsertSessionResponse* release_upsertsessionresponse();
  ::pb::RPCUpsertSessionResponse* mutable_upsertsessionresponse();
  void set_allocated_upsertsessionresponse(::pb::RPCUpsertSessionResponse* upsertsessionresponse);

  // .pb.RPCDeleteSessionRequest DeleteSessionRequest = 7;
  bool has_deletesessionrequest() const;
  void clear_deletesessionrequest();
  static const int kDeleteSessionRequestFieldNumber = 7;
  const ::pb::RPCDeleteSessionRequest& deletesessionrequest() const;
  ::pb::RPCDeleteSessionRequest* release_deletesessionrequest();
  ::pb::RPCDeleteSessionRequest* mutable_deletesessionrequest();
  void set_allocated_deletesessionrequest(::pb::RPCDeleteSessionRequest* deletesessionrequest);

  // .pb.RPCDeleteSessionResponse DeleteSessionResponse = 8;
  bool has_deletesessionresponse() const;
  void clear_deletesessionresponse();
  static const int kDeleteSessionResponseFieldNumber = 8;
  const ::pb::RPCDeleteSessionResponse& deletesessionresponse() const;
  ::pb::RPCDeleteSessionResponse* release_deletesessionresponse();
  ::pb::RPCDeleteSessionResponse* mutable_deletesessionresponse();
  void set_allocated_deletesessionresponse(::pb::RPCDeleteSessionResponse* deletesessionresponse);

  // .pb.RPCRefreshSessionsRequest RefreshSessionsRequest = 9;
  bool has_refreshsessionsrequest() const;
  void clear_refreshsessionsrequest();
  static const int kRefreshSessionsRequestFieldNumber = 9;
  const ::pb::RPCRefreshSessionsRequest& refreshsessionsrequest() const;
  ::pb::RPCRefreshSessionsRequest* release_refreshsessionsrequest();
  ::pb::RPCRefreshSessionsRequest* mutable_refreshsessionsrequest();
  void set_allocated_refreshsessionsrequest(::pb::RPCRefreshSessionsRequest* refreshsessionsrequest);

  // .pb.RPCRefreshSessionsResponse RefreshSessionsResponse = 10;
  bool has_refreshsessionsresponse() const;
  void clear_refreshsessionsresponse();
  static const int kRefreshSessionsResponseFieldNumber = 10;
  const ::pb::RPCRefreshSessionsResponse& refreshsessionsresponse() const;
  ::pb::RPCRefreshSessionsResponse* release_refreshsessionsresponse();
  ::pb::RPCRefreshSessionsResponse* mutable_refreshsessionsresponse();
  void set_allocated_refreshsessionsresponse(::pb::RPCRefreshSessionsResponse* refreshsessionsresponse);

  // .pb.RPCSessionIdsRequest SessionIdsRequest = 11;
  bool has_sessionidsrequest() const;
  void clear_sessionidsrequest();
  static const int kSessionIdsRequestFieldNumber = 11;
  const ::pb::RPCSessionIdsRequest& sessionidsrequest() const;
  ::pb::RPCSessionIdsRequest* release_sessionidsrequest();
  ::pb::RPCSessionIdsRequest* mutable_sessionidsrequest();
  void set_allocated_sessionidsrequest(::pb::RPCSessionIdsRequest* sessionidsrequest);

  // .pb.RPCSessionIdsResponse SessionIdsResponse = 12;
  bool has_sessionidsresponse() const;
  void clear_sessionidsresponse();
  static const int kSessionIdsResponseFieldNumber = 12;
  const ::pb::RPCSessionIdsResponse& sessionidsresponse() const;
  ::pb::RPCSessionIdsResponse* release_sessionidsresponse();
  ::pb::RPCSessionIdsResponse* mutable_sessionidsresponse();
  void set_allocated_sessionidsresponse(::pb::RPCSessionIdsResponse* sessionidsresponse);

  // .pb.RPCGetSessionRequest GetSessionRequest = 13;
  bool has_getsessionrequest() const;
  void clear_getsessionrequest();
  static const int kGetSessionRequestFieldNumber = 13;
  const ::pb::RPCGetSessionRequest& getsessionrequest() const;
  ::pb::RPCGetSessionRequest* release_getsessionrequest();
  ::pb::RPCGetSessionRequest* mutable_getsessionrequest();
  void set_allocated_getsessionrequest(::pb::RPCGetSessionRequest* getsessionrequest);

  // .pb.RPCGetSessionResponse GetSessionResponse = 14;
  bool has_getsessionresponse() const;
  void clear_getsessionresponse();
  static const int kGetSessionResponseFieldNumber = 14;
  const ::pb::RPCGetSessionResponse& getsessionresponse() const;
  ::pb::RPCGetSessionResponse* release_getsessionresponse();
  ::pb::RPCGetSessionResponse* mutable_getsessionresponse();
  void set_allocated_getsessionresponse(::pb::RPCGetSessionResponse* getsessionresponse);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:pb.RPCMessage)
 private:
  void set_has_healthrequest();
  void set_has_healthreply();
  void set_has_upsertsessionrequest();
  void set_has_upsertsessionresponse();
  void set_has_deletesessionrequest();
  void set_has_deletesessionresponse();
  void set_has_refreshsessionsrequest();
  void set_has_refreshsessionsresponse();
  void set_has_sessionidsrequest();
  void set_has_sessionidsresponse();
  void set_has_getsessionrequest();
  void set_has_getsessionresponse();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 version_;
  ::google::protobuf::int64 id_;
  union MsgUnion {
    MsgUnion() {}
    ::pb::RPCHealthRequest* healthrequest_;
    ::pb::RPCHealthReply* healthreply_;
    ::pb::RPCUpsertSessionRequest* upsertsessionrequest_;
    ::pb::RPCUpsertSessionResponse* upsertsessionresponse_;
    ::pb::RPCDeleteSessionRequest* deletesessionrequest_;
    ::pb::RPCDeleteSessionResponse* deletesessionresponse_;
    ::pb::RPCRefreshSessionsRequest* refreshsessionsrequest_;
    ::pb::RPCRefreshSessionsResponse* refreshsessionsresponse_;
    ::pb::RPCSessionIdsRequest* sessionidsrequest_;
    ::pb::RPCSessionIdsResponse* sessionidsresponse_;
    ::pb::RPCGetSessionRequest* getsessionrequest_;
    ::pb::RPCGetSessionResponse* getsessionresponse_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_pb_2fplatform_2eproto::TableStruct;
  friend void ::protobuf_pb_2fplatform_2eproto::InitDefaultsRPCMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPCHealthRequest

// -------------------------------------------------------------------

// RPCHealthReply

// bool ready = 1;
inline void RPCHealthReply::clear_ready() {
  ready_ = false;
}
inline bool RPCHealthReply::ready() const {
  // @@protoc_insertion_point(field_get:pb.RPCHealthReply.ready)
  return ready_;
}
inline void RPCHealthReply::set_ready(bool value) {
  
  ready_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCHealthReply.ready)
}

// string message = 2;
inline void RPCHealthReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCHealthReply::message() const {
  // @@protoc_insertion_point(field_get:pb.RPCHealthReply.message)
  return message_.GetNoArena();
}
inline void RPCHealthReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCHealthReply.message)
}
#if LANG_CXX11
inline void RPCHealthReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCHealthReply.message)
}
#endif
inline void RPCHealthReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCHealthReply.message)
}
inline void RPCHealthReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCHealthReply.message)
}
inline ::std::string* RPCHealthReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCHealthReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCHealthReply::release_message() {
  // @@protoc_insertion_point(field_release:pb.RPCHealthReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCHealthReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCHealthReply.message)
}

// -------------------------------------------------------------------

// RPCMessage

// int64 version = 1;
inline void RPCMessage::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPCMessage::version() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.version)
  return version_;
}
inline void RPCMessage::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCMessage.version)
}

// int64 id = 2;
inline void RPCMessage::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPCMessage::id() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.id)
  return id_;
}
inline void RPCMessage::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCMessage.id)
}

// .pb.RPCHealthRequest healthRequest = 3;
inline bool RPCMessage::has_healthrequest() const {
  return msg_case() == kHealthRequest;
}
inline void RPCMessage::set_has_healthrequest() {
  _oneof_case_[0] = kHealthRequest;
}
inline void RPCMessage::clear_healthrequest() {
  if (has_healthrequest()) {
    delete msg_.healthrequest_;
    clear_has_msg();
  }
}
inline ::pb::RPCHealthRequest* RPCMessage::release_healthrequest() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.healthRequest)
  if (has_healthrequest()) {
    clear_has_msg();
      ::pb::RPCHealthRequest* temp = msg_.healthrequest_;
    msg_.healthrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCHealthRequest& RPCMessage::healthrequest() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.healthRequest)
  return has_healthrequest()
      ? *msg_.healthrequest_
      : *reinterpret_cast< ::pb::RPCHealthRequest*>(&::pb::_RPCHealthRequest_default_instance_);
}
inline ::pb::RPCHealthRequest* RPCMessage::mutable_healthrequest() {
  if (!has_healthrequest()) {
    clear_msg();
    set_has_healthrequest();
    msg_.healthrequest_ = new ::pb::RPCHealthRequest;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.healthRequest)
  return msg_.healthrequest_;
}

// .pb.RPCHealthReply HealthReply = 4;
inline bool RPCMessage::has_healthreply() const {
  return msg_case() == kHealthReply;
}
inline void RPCMessage::set_has_healthreply() {
  _oneof_case_[0] = kHealthReply;
}
inline void RPCMessage::clear_healthreply() {
  if (has_healthreply()) {
    delete msg_.healthreply_;
    clear_has_msg();
  }
}
inline ::pb::RPCHealthReply* RPCMessage::release_healthreply() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.HealthReply)
  if (has_healthreply()) {
    clear_has_msg();
      ::pb::RPCHealthReply* temp = msg_.healthreply_;
    msg_.healthreply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCHealthReply& RPCMessage::healthreply() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.HealthReply)
  return has_healthreply()
      ? *msg_.healthreply_
      : *reinterpret_cast< ::pb::RPCHealthReply*>(&::pb::_RPCHealthReply_default_instance_);
}
inline ::pb::RPCHealthReply* RPCMessage::mutable_healthreply() {
  if (!has_healthreply()) {
    clear_msg();
    set_has_healthreply();
    msg_.healthreply_ = new ::pb::RPCHealthReply;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.HealthReply)
  return msg_.healthreply_;
}

// .pb.RPCUpsertSessionRequest UpsertSessionRequest = 5;
inline bool RPCMessage::has_upsertsessionrequest() const {
  return msg_case() == kUpsertSessionRequest;
}
inline void RPCMessage::set_has_upsertsessionrequest() {
  _oneof_case_[0] = kUpsertSessionRequest;
}
inline ::pb::RPCUpsertSessionRequest* RPCMessage::release_upsertsessionrequest() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.UpsertSessionRequest)
  if (has_upsertsessionrequest()) {
    clear_has_msg();
      ::pb::RPCUpsertSessionRequest* temp = msg_.upsertsessionrequest_;
    msg_.upsertsessionrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCUpsertSessionRequest& RPCMessage::upsertsessionrequest() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.UpsertSessionRequest)
  return has_upsertsessionrequest()
      ? *msg_.upsertsessionrequest_
      : *reinterpret_cast< ::pb::RPCUpsertSessionRequest*>(&::pb::_RPCUpsertSessionRequest_default_instance_);
}
inline ::pb::RPCUpsertSessionRequest* RPCMessage::mutable_upsertsessionrequest() {
  if (!has_upsertsessionrequest()) {
    clear_msg();
    set_has_upsertsessionrequest();
    msg_.upsertsessionrequest_ = new ::pb::RPCUpsertSessionRequest;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.UpsertSessionRequest)
  return msg_.upsertsessionrequest_;
}

// .pb.RPCUpsertSessionResponse UpsertSessionResponse = 6;
inline bool RPCMessage::has_upsertsessionresponse() const {
  return msg_case() == kUpsertSessionResponse;
}
inline void RPCMessage::set_has_upsertsessionresponse() {
  _oneof_case_[0] = kUpsertSessionResponse;
}
inline ::pb::RPCUpsertSessionResponse* RPCMessage::release_upsertsessionresponse() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.UpsertSessionResponse)
  if (has_upsertsessionresponse()) {
    clear_has_msg();
      ::pb::RPCUpsertSessionResponse* temp = msg_.upsertsessionresponse_;
    msg_.upsertsessionresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCUpsertSessionResponse& RPCMessage::upsertsessionresponse() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.UpsertSessionResponse)
  return has_upsertsessionresponse()
      ? *msg_.upsertsessionresponse_
      : *reinterpret_cast< ::pb::RPCUpsertSessionResponse*>(&::pb::_RPCUpsertSessionResponse_default_instance_);
}
inline ::pb::RPCUpsertSessionResponse* RPCMessage::mutable_upsertsessionresponse() {
  if (!has_upsertsessionresponse()) {
    clear_msg();
    set_has_upsertsessionresponse();
    msg_.upsertsessionresponse_ = new ::pb::RPCUpsertSessionResponse;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.UpsertSessionResponse)
  return msg_.upsertsessionresponse_;
}

// .pb.RPCDeleteSessionRequest DeleteSessionRequest = 7;
inline bool RPCMessage::has_deletesessionrequest() const {
  return msg_case() == kDeleteSessionRequest;
}
inline void RPCMessage::set_has_deletesessionrequest() {
  _oneof_case_[0] = kDeleteSessionRequest;
}
inline ::pb::RPCDeleteSessionRequest* RPCMessage::release_deletesessionrequest() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.DeleteSessionRequest)
  if (has_deletesessionrequest()) {
    clear_has_msg();
      ::pb::RPCDeleteSessionRequest* temp = msg_.deletesessionrequest_;
    msg_.deletesessionrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCDeleteSessionRequest& RPCMessage::deletesessionrequest() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.DeleteSessionRequest)
  return has_deletesessionrequest()
      ? *msg_.deletesessionrequest_
      : *reinterpret_cast< ::pb::RPCDeleteSessionRequest*>(&::pb::_RPCDeleteSessionRequest_default_instance_);
}
inline ::pb::RPCDeleteSessionRequest* RPCMessage::mutable_deletesessionrequest() {
  if (!has_deletesessionrequest()) {
    clear_msg();
    set_has_deletesessionrequest();
    msg_.deletesessionrequest_ = new ::pb::RPCDeleteSessionRequest;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.DeleteSessionRequest)
  return msg_.deletesessionrequest_;
}

// .pb.RPCDeleteSessionResponse DeleteSessionResponse = 8;
inline bool RPCMessage::has_deletesessionresponse() const {
  return msg_case() == kDeleteSessionResponse;
}
inline void RPCMessage::set_has_deletesessionresponse() {
  _oneof_case_[0] = kDeleteSessionResponse;
}
inline ::pb::RPCDeleteSessionResponse* RPCMessage::release_deletesessionresponse() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.DeleteSessionResponse)
  if (has_deletesessionresponse()) {
    clear_has_msg();
      ::pb::RPCDeleteSessionResponse* temp = msg_.deletesessionresponse_;
    msg_.deletesessionresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCDeleteSessionResponse& RPCMessage::deletesessionresponse() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.DeleteSessionResponse)
  return has_deletesessionresponse()
      ? *msg_.deletesessionresponse_
      : *reinterpret_cast< ::pb::RPCDeleteSessionResponse*>(&::pb::_RPCDeleteSessionResponse_default_instance_);
}
inline ::pb::RPCDeleteSessionResponse* RPCMessage::mutable_deletesessionresponse() {
  if (!has_deletesessionresponse()) {
    clear_msg();
    set_has_deletesessionresponse();
    msg_.deletesessionresponse_ = new ::pb::RPCDeleteSessionResponse;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.DeleteSessionResponse)
  return msg_.deletesessionresponse_;
}

// .pb.RPCRefreshSessionsRequest RefreshSessionsRequest = 9;
inline bool RPCMessage::has_refreshsessionsrequest() const {
  return msg_case() == kRefreshSessionsRequest;
}
inline void RPCMessage::set_has_refreshsessionsrequest() {
  _oneof_case_[0] = kRefreshSessionsRequest;
}
inline ::pb::RPCRefreshSessionsRequest* RPCMessage::release_refreshsessionsrequest() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.RefreshSessionsRequest)
  if (has_refreshsessionsrequest()) {
    clear_has_msg();
      ::pb::RPCRefreshSessionsRequest* temp = msg_.refreshsessionsrequest_;
    msg_.refreshsessionsrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCRefreshSessionsRequest& RPCMessage::refreshsessionsrequest() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.RefreshSessionsRequest)
  return has_refreshsessionsrequest()
      ? *msg_.refreshsessionsrequest_
      : *reinterpret_cast< ::pb::RPCRefreshSessionsRequest*>(&::pb::_RPCRefreshSessionsRequest_default_instance_);
}
inline ::pb::RPCRefreshSessionsRequest* RPCMessage::mutable_refreshsessionsrequest() {
  if (!has_refreshsessionsrequest()) {
    clear_msg();
    set_has_refreshsessionsrequest();
    msg_.refreshsessionsrequest_ = new ::pb::RPCRefreshSessionsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.RefreshSessionsRequest)
  return msg_.refreshsessionsrequest_;
}

// .pb.RPCRefreshSessionsResponse RefreshSessionsResponse = 10;
inline bool RPCMessage::has_refreshsessionsresponse() const {
  return msg_case() == kRefreshSessionsResponse;
}
inline void RPCMessage::set_has_refreshsessionsresponse() {
  _oneof_case_[0] = kRefreshSessionsResponse;
}
inline ::pb::RPCRefreshSessionsResponse* RPCMessage::release_refreshsessionsresponse() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.RefreshSessionsResponse)
  if (has_refreshsessionsresponse()) {
    clear_has_msg();
      ::pb::RPCRefreshSessionsResponse* temp = msg_.refreshsessionsresponse_;
    msg_.refreshsessionsresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCRefreshSessionsResponse& RPCMessage::refreshsessionsresponse() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.RefreshSessionsResponse)
  return has_refreshsessionsresponse()
      ? *msg_.refreshsessionsresponse_
      : *reinterpret_cast< ::pb::RPCRefreshSessionsResponse*>(&::pb::_RPCRefreshSessionsResponse_default_instance_);
}
inline ::pb::RPCRefreshSessionsResponse* RPCMessage::mutable_refreshsessionsresponse() {
  if (!has_refreshsessionsresponse()) {
    clear_msg();
    set_has_refreshsessionsresponse();
    msg_.refreshsessionsresponse_ = new ::pb::RPCRefreshSessionsResponse;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.RefreshSessionsResponse)
  return msg_.refreshsessionsresponse_;
}

// .pb.RPCSessionIdsRequest SessionIdsRequest = 11;
inline bool RPCMessage::has_sessionidsrequest() const {
  return msg_case() == kSessionIdsRequest;
}
inline void RPCMessage::set_has_sessionidsrequest() {
  _oneof_case_[0] = kSessionIdsRequest;
}
inline ::pb::RPCSessionIdsRequest* RPCMessage::release_sessionidsrequest() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.SessionIdsRequest)
  if (has_sessionidsrequest()) {
    clear_has_msg();
      ::pb::RPCSessionIdsRequest* temp = msg_.sessionidsrequest_;
    msg_.sessionidsrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCSessionIdsRequest& RPCMessage::sessionidsrequest() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.SessionIdsRequest)
  return has_sessionidsrequest()
      ? *msg_.sessionidsrequest_
      : *reinterpret_cast< ::pb::RPCSessionIdsRequest*>(&::pb::_RPCSessionIdsRequest_default_instance_);
}
inline ::pb::RPCSessionIdsRequest* RPCMessage::mutable_sessionidsrequest() {
  if (!has_sessionidsrequest()) {
    clear_msg();
    set_has_sessionidsrequest();
    msg_.sessionidsrequest_ = new ::pb::RPCSessionIdsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.SessionIdsRequest)
  return msg_.sessionidsrequest_;
}

// .pb.RPCSessionIdsResponse SessionIdsResponse = 12;
inline bool RPCMessage::has_sessionidsresponse() const {
  return msg_case() == kSessionIdsResponse;
}
inline void RPCMessage::set_has_sessionidsresponse() {
  _oneof_case_[0] = kSessionIdsResponse;
}
inline ::pb::RPCSessionIdsResponse* RPCMessage::release_sessionidsresponse() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.SessionIdsResponse)
  if (has_sessionidsresponse()) {
    clear_has_msg();
      ::pb::RPCSessionIdsResponse* temp = msg_.sessionidsresponse_;
    msg_.sessionidsresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCSessionIdsResponse& RPCMessage::sessionidsresponse() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.SessionIdsResponse)
  return has_sessionidsresponse()
      ? *msg_.sessionidsresponse_
      : *reinterpret_cast< ::pb::RPCSessionIdsResponse*>(&::pb::_RPCSessionIdsResponse_default_instance_);
}
inline ::pb::RPCSessionIdsResponse* RPCMessage::mutable_sessionidsresponse() {
  if (!has_sessionidsresponse()) {
    clear_msg();
    set_has_sessionidsresponse();
    msg_.sessionidsresponse_ = new ::pb::RPCSessionIdsResponse;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.SessionIdsResponse)
  return msg_.sessionidsresponse_;
}

// .pb.RPCGetSessionRequest GetSessionRequest = 13;
inline bool RPCMessage::has_getsessionrequest() const {
  return msg_case() == kGetSessionRequest;
}
inline void RPCMessage::set_has_getsessionrequest() {
  _oneof_case_[0] = kGetSessionRequest;
}
inline ::pb::RPCGetSessionRequest* RPCMessage::release_getsessionrequest() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.GetSessionRequest)
  if (has_getsessionrequest()) {
    clear_has_msg();
      ::pb::RPCGetSessionRequest* temp = msg_.getsessionrequest_;
    msg_.getsessionrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCGetSessionRequest& RPCMessage::getsessionrequest() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.GetSessionRequest)
  return has_getsessionrequest()
      ? *msg_.getsessionrequest_
      : *reinterpret_cast< ::pb::RPCGetSessionRequest*>(&::pb::_RPCGetSessionRequest_default_instance_);
}
inline ::pb::RPCGetSessionRequest* RPCMessage::mutable_getsessionrequest() {
  if (!has_getsessionrequest()) {
    clear_msg();
    set_has_getsessionrequest();
    msg_.getsessionrequest_ = new ::pb::RPCGetSessionRequest;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.GetSessionRequest)
  return msg_.getsessionrequest_;
}

// .pb.RPCGetSessionResponse GetSessionResponse = 14;
inline bool RPCMessage::has_getsessionresponse() const {
  return msg_case() == kGetSessionResponse;
}
inline void RPCMessage::set_has_getsessionresponse() {
  _oneof_case_[0] = kGetSessionResponse;
}
inline ::pb::RPCGetSessionResponse* RPCMessage::release_getsessionresponse() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.GetSessionResponse)
  if (has_getsessionresponse()) {
    clear_has_msg();
      ::pb::RPCGetSessionResponse* temp = msg_.getsessionresponse_;
    msg_.getsessionresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::RPCGetSessionResponse& RPCMessage::getsessionresponse() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.GetSessionResponse)
  return has_getsessionresponse()
      ? *msg_.getsessionresponse_
      : *reinterpret_cast< ::pb::RPCGetSessionResponse*>(&::pb::_RPCGetSessionResponse_default_instance_);
}
inline ::pb::RPCGetSessionResponse* RPCMessage::mutable_getsessionresponse() {
  if (!has_getsessionresponse()) {
    clear_msg();
    set_has_getsessionresponse();
    msg_.getsessionresponse_ = new ::pb::RPCGetSessionResponse;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.GetSessionResponse)
  return msg_.getsessionresponse_;
}

inline bool RPCMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void RPCMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline RPCMessage::MsgCase RPCMessage::msg_case() const {
  return RPCMessage::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_2fplatform_2eproto__INCLUDED
