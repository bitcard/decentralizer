// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/storage.proto

#include "pb/storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace pb {
class RPCWritePeerFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCWritePeerFileRequest>
      _instance;
} _RPCWritePeerFileRequest_default_instance_;
class RPCWritePeerFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCWritePeerFileResponse>
      _instance;
} _RPCWritePeerFileResponse_default_instance_;
class RPCGetPeerFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetPeerFileRequest>
      _instance;
} _RPCGetPeerFileRequest_default_instance_;
class RPCGetPeerFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetPeerFileResponse>
      _instance;
} _RPCGetPeerFileResponse_default_instance_;
class RPCGetPublisherFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetPublisherFileRequest>
      _instance;
} _RPCGetPublisherFileRequest_default_instance_;
class RPCGetPublisherFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetPublisherFileResponse>
      _instance;
} _RPCGetPublisherFileResponse_default_instance_;
}  // namespace pb
namespace protobuf_pb_2fstorage_2eproto {
void InitDefaultsRPCWritePeerFileRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCWritePeerFileRequest_default_instance_;
    new (ptr) ::pb::RPCWritePeerFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCWritePeerFileRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCWritePeerFileRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCWritePeerFileRequestImpl);
}

void InitDefaultsRPCWritePeerFileResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCWritePeerFileResponse_default_instance_;
    new (ptr) ::pb::RPCWritePeerFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCWritePeerFileResponse::InitAsDefaultInstance();
}

void InitDefaultsRPCWritePeerFileResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCWritePeerFileResponseImpl);
}

void InitDefaultsRPCGetPeerFileRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCGetPeerFileRequest_default_instance_;
    new (ptr) ::pb::RPCGetPeerFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetPeerFileRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCGetPeerFileRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetPeerFileRequestImpl);
}

void InitDefaultsRPCGetPeerFileResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCGetPeerFileResponse_default_instance_;
    new (ptr) ::pb::RPCGetPeerFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetPeerFileResponse::InitAsDefaultInstance();
}

void InitDefaultsRPCGetPeerFileResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetPeerFileResponseImpl);
}

void InitDefaultsRPCGetPublisherFileRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCGetPublisherFileRequest_default_instance_;
    new (ptr) ::pb::RPCGetPublisherFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetPublisherFileRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCGetPublisherFileRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetPublisherFileRequestImpl);
}

void InitDefaultsRPCGetPublisherFileResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCGetPublisherFileResponse_default_instance_;
    new (ptr) ::pb::RPCGetPublisherFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetPublisherFileResponse::InitAsDefaultInstance();
}

void InitDefaultsRPCGetPublisherFileResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetPublisherFileResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCWritePeerFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCWritePeerFileRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCWritePeerFileRequest, file_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCWritePeerFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCWritePeerFileResponse, success_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerFileRequest, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerFileRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerFileResponse, file_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPublisherFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPublisherFileRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPublisherFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPublisherFileResponse, file_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::RPCWritePeerFileRequest)},
  { 7, -1, sizeof(::pb::RPCWritePeerFileResponse)},
  { 13, -1, sizeof(::pb::RPCGetPeerFileRequest)},
  { 20, -1, sizeof(::pb::RPCGetPeerFileResponse)},
  { 26, -1, sizeof(::pb::RPCGetPublisherFileRequest)},
  { 32, -1, sizeof(::pb::RPCGetPublisherFileResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCWritePeerFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCWritePeerFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetPeerFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetPeerFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetPublisherFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetPublisherFileResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "pb/storage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020pb/storage.proto\022\002pb\"5\n\027RPCWritePeerFi"
      "leRequest\022\014\n\004name\030\001 \001(\t\022\014\n\004file\030\002 \001(\014\"+\n"
      "\030RPCWritePeerFileResponse\022\017\n\007success\030\001 \001"
      "(\010\"2\n\025RPCGetPeerFileRequest\022\013\n\003pId\030\001 \001(\t"
      "\022\014\n\004name\030\002 \001(\t\"&\n\026RPCGetPeerFileResponse"
      "\022\014\n\004file\030\001 \001(\014\"*\n\032RPCGetPublisherFileReq"
      "uest\022\014\n\004name\030\001 \001(\t\"+\n\033RPCGetPublisherFil"
      "eResponse\022\014\n\004file\030\001 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb/storage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pb_2fstorage_2eproto
namespace pb {

// ===================================================================

void RPCWritePeerFileRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCWritePeerFileRequest::kNameFieldNumber;
const int RPCWritePeerFileRequest::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCWritePeerFileRequest::RPCWritePeerFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCWritePeerFileRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCWritePeerFileRequest)
}
RPCWritePeerFileRequest::RPCWritePeerFileRequest(const RPCWritePeerFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCWritePeerFileRequest)
}

void RPCWritePeerFileRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RPCWritePeerFileRequest::~RPCWritePeerFileRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCWritePeerFileRequest)
  SharedDtor();
}

void RPCWritePeerFileRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCWritePeerFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCWritePeerFileRequest::descriptor() {
  ::protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCWritePeerFileRequest& RPCWritePeerFileRequest::default_instance() {
  ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCWritePeerFileRequest();
  return *internal_default_instance();
}

RPCWritePeerFileRequest* RPCWritePeerFileRequest::New(::google::protobuf::Arena* arena) const {
  RPCWritePeerFileRequest* n = new RPCWritePeerFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCWritePeerFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCWritePeerFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RPCWritePeerFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCWritePeerFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCWritePeerFileRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCWritePeerFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCWritePeerFileRequest)
  return false;
#undef DO_
}

void RPCWritePeerFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCWritePeerFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCWritePeerFileRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bytes file = 2;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->file(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCWritePeerFileRequest)
}

::google::protobuf::uint8* RPCWritePeerFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCWritePeerFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCWritePeerFileRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bytes file = 2;
  if (this->file().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCWritePeerFileRequest)
  return target;
}

size_t RPCWritePeerFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCWritePeerFileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes file = 2;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCWritePeerFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCWritePeerFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCWritePeerFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCWritePeerFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCWritePeerFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCWritePeerFileRequest)
    MergeFrom(*source);
  }
}

void RPCWritePeerFileRequest::MergeFrom(const RPCWritePeerFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCWritePeerFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
}

void RPCWritePeerFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCWritePeerFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCWritePeerFileRequest::CopyFrom(const RPCWritePeerFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCWritePeerFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCWritePeerFileRequest::IsInitialized() const {
  return true;
}

void RPCWritePeerFileRequest::Swap(RPCWritePeerFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCWritePeerFileRequest::InternalSwap(RPCWritePeerFileRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  file_.Swap(&other->file_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCWritePeerFileRequest::GetMetadata() const {
  protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCWritePeerFileResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCWritePeerFileResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCWritePeerFileResponse::RPCWritePeerFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCWritePeerFileResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCWritePeerFileResponse)
}
RPCWritePeerFileResponse::RPCWritePeerFileResponse(const RPCWritePeerFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:pb.RPCWritePeerFileResponse)
}

void RPCWritePeerFileResponse::SharedCtor() {
  success_ = false;
  _cached_size_ = 0;
}

RPCWritePeerFileResponse::~RPCWritePeerFileResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCWritePeerFileResponse)
  SharedDtor();
}

void RPCWritePeerFileResponse::SharedDtor() {
}

void RPCWritePeerFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCWritePeerFileResponse::descriptor() {
  ::protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCWritePeerFileResponse& RPCWritePeerFileResponse::default_instance() {
  ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCWritePeerFileResponse();
  return *internal_default_instance();
}

RPCWritePeerFileResponse* RPCWritePeerFileResponse::New(::google::protobuf::Arena* arena) const {
  RPCWritePeerFileResponse* n = new RPCWritePeerFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCWritePeerFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCWritePeerFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

bool RPCWritePeerFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCWritePeerFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCWritePeerFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCWritePeerFileResponse)
  return false;
#undef DO_
}

void RPCWritePeerFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCWritePeerFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCWritePeerFileResponse)
}

::google::protobuf::uint8* RPCWritePeerFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCWritePeerFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCWritePeerFileResponse)
  return target;
}

size_t RPCWritePeerFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCWritePeerFileResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCWritePeerFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCWritePeerFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCWritePeerFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCWritePeerFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCWritePeerFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCWritePeerFileResponse)
    MergeFrom(*source);
  }
}

void RPCWritePeerFileResponse::MergeFrom(const RPCWritePeerFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCWritePeerFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void RPCWritePeerFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCWritePeerFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCWritePeerFileResponse::CopyFrom(const RPCWritePeerFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCWritePeerFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCWritePeerFileResponse::IsInitialized() const {
  return true;
}

void RPCWritePeerFileResponse::Swap(RPCWritePeerFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCWritePeerFileResponse::InternalSwap(RPCWritePeerFileResponse* other) {
  using std::swap;
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCWritePeerFileResponse::GetMetadata() const {
  protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetPeerFileRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetPeerFileRequest::kPIdFieldNumber;
const int RPCGetPeerFileRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetPeerFileRequest::RPCGetPeerFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetPeerFileRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetPeerFileRequest)
}
RPCGetPeerFileRequest::RPCGetPeerFileRequest(const RPCGetPeerFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pid().size() > 0) {
    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetPeerFileRequest)
}

void RPCGetPeerFileRequest::SharedCtor() {
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RPCGetPeerFileRequest::~RPCGetPeerFileRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCGetPeerFileRequest)
  SharedDtor();
}

void RPCGetPeerFileRequest::SharedDtor() {
  pid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCGetPeerFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCGetPeerFileRequest::descriptor() {
  ::protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetPeerFileRequest& RPCGetPeerFileRequest::default_instance() {
  ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetPeerFileRequest();
  return *internal_default_instance();
}

RPCGetPeerFileRequest* RPCGetPeerFileRequest::New(::google::protobuf::Arena* arena) const {
  RPCGetPeerFileRequest* n = new RPCGetPeerFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetPeerFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetPeerFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RPCGetPeerFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetPeerFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pid().data(), static_cast<int>(this->pid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetPeerFileRequest.pId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetPeerFileRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetPeerFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetPeerFileRequest)
  return false;
#undef DO_
}

void RPCGetPeerFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetPeerFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pId = 1;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), static_cast<int>(this->pid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerFileRequest.pId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerFileRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetPeerFileRequest)
}

::google::protobuf::uint8* RPCGetPeerFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetPeerFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pId = 1;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), static_cast<int>(this->pid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerFileRequest.pId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerFileRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetPeerFileRequest)
  return target;
}

size_t RPCGetPeerFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetPeerFileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pId = 1;
  if (this->pid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pid());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetPeerFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetPeerFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetPeerFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetPeerFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetPeerFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetPeerFileRequest)
    MergeFrom(*source);
  }
}

void RPCGetPeerFileRequest::MergeFrom(const RPCGetPeerFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetPeerFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pid().size() > 0) {

    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void RPCGetPeerFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetPeerFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetPeerFileRequest::CopyFrom(const RPCGetPeerFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetPeerFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetPeerFileRequest::IsInitialized() const {
  return true;
}

void RPCGetPeerFileRequest::Swap(RPCGetPeerFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetPeerFileRequest::InternalSwap(RPCGetPeerFileRequest* other) {
  using std::swap;
  pid_.Swap(&other->pid_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCGetPeerFileRequest::GetMetadata() const {
  protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetPeerFileResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetPeerFileResponse::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetPeerFileResponse::RPCGetPeerFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetPeerFileResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetPeerFileResponse)
}
RPCGetPeerFileResponse::RPCGetPeerFileResponse(const RPCGetPeerFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetPeerFileResponse)
}

void RPCGetPeerFileResponse::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RPCGetPeerFileResponse::~RPCGetPeerFileResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCGetPeerFileResponse)
  SharedDtor();
}

void RPCGetPeerFileResponse::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCGetPeerFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCGetPeerFileResponse::descriptor() {
  ::protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetPeerFileResponse& RPCGetPeerFileResponse::default_instance() {
  ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetPeerFileResponse();
  return *internal_default_instance();
}

RPCGetPeerFileResponse* RPCGetPeerFileResponse::New(::google::protobuf::Arena* arena) const {
  RPCGetPeerFileResponse* n = new RPCGetPeerFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetPeerFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetPeerFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RPCGetPeerFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetPeerFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetPeerFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetPeerFileResponse)
  return false;
#undef DO_
}

void RPCGetPeerFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetPeerFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetPeerFileResponse)
}

::google::protobuf::uint8* RPCGetPeerFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetPeerFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes file = 1;
  if (this->file().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetPeerFileResponse)
  return target;
}

size_t RPCGetPeerFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetPeerFileResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes file = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetPeerFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetPeerFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetPeerFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetPeerFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetPeerFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetPeerFileResponse)
    MergeFrom(*source);
  }
}

void RPCGetPeerFileResponse::MergeFrom(const RPCGetPeerFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetPeerFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
}

void RPCGetPeerFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetPeerFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetPeerFileResponse::CopyFrom(const RPCGetPeerFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetPeerFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetPeerFileResponse::IsInitialized() const {
  return true;
}

void RPCGetPeerFileResponse::Swap(RPCGetPeerFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetPeerFileResponse::InternalSwap(RPCGetPeerFileResponse* other) {
  using std::swap;
  file_.Swap(&other->file_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCGetPeerFileResponse::GetMetadata() const {
  protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetPublisherFileRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetPublisherFileRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetPublisherFileRequest::RPCGetPublisherFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetPublisherFileRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetPublisherFileRequest)
}
RPCGetPublisherFileRequest::RPCGetPublisherFileRequest(const RPCGetPublisherFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetPublisherFileRequest)
}

void RPCGetPublisherFileRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RPCGetPublisherFileRequest::~RPCGetPublisherFileRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCGetPublisherFileRequest)
  SharedDtor();
}

void RPCGetPublisherFileRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCGetPublisherFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCGetPublisherFileRequest::descriptor() {
  ::protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetPublisherFileRequest& RPCGetPublisherFileRequest::default_instance() {
  ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetPublisherFileRequest();
  return *internal_default_instance();
}

RPCGetPublisherFileRequest* RPCGetPublisherFileRequest::New(::google::protobuf::Arena* arena) const {
  RPCGetPublisherFileRequest* n = new RPCGetPublisherFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetPublisherFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetPublisherFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RPCGetPublisherFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetPublisherFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetPublisherFileRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetPublisherFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetPublisherFileRequest)
  return false;
#undef DO_
}

void RPCGetPublisherFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetPublisherFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPublisherFileRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetPublisherFileRequest)
}

::google::protobuf::uint8* RPCGetPublisherFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetPublisherFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPublisherFileRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetPublisherFileRequest)
  return target;
}

size_t RPCGetPublisherFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetPublisherFileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetPublisherFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetPublisherFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetPublisherFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetPublisherFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetPublisherFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetPublisherFileRequest)
    MergeFrom(*source);
  }
}

void RPCGetPublisherFileRequest::MergeFrom(const RPCGetPublisherFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetPublisherFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void RPCGetPublisherFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetPublisherFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetPublisherFileRequest::CopyFrom(const RPCGetPublisherFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetPublisherFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetPublisherFileRequest::IsInitialized() const {
  return true;
}

void RPCGetPublisherFileRequest::Swap(RPCGetPublisherFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetPublisherFileRequest::InternalSwap(RPCGetPublisherFileRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCGetPublisherFileRequest::GetMetadata() const {
  protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetPublisherFileResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetPublisherFileResponse::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetPublisherFileResponse::RPCGetPublisherFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetPublisherFileResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetPublisherFileResponse)
}
RPCGetPublisherFileResponse::RPCGetPublisherFileResponse(const RPCGetPublisherFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetPublisherFileResponse)
}

void RPCGetPublisherFileResponse::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RPCGetPublisherFileResponse::~RPCGetPublisherFileResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCGetPublisherFileResponse)
  SharedDtor();
}

void RPCGetPublisherFileResponse::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCGetPublisherFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCGetPublisherFileResponse::descriptor() {
  ::protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetPublisherFileResponse& RPCGetPublisherFileResponse::default_instance() {
  ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetPublisherFileResponse();
  return *internal_default_instance();
}

RPCGetPublisherFileResponse* RPCGetPublisherFileResponse::New(::google::protobuf::Arena* arena) const {
  RPCGetPublisherFileResponse* n = new RPCGetPublisherFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetPublisherFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetPublisherFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RPCGetPublisherFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetPublisherFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetPublisherFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetPublisherFileResponse)
  return false;
#undef DO_
}

void RPCGetPublisherFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetPublisherFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetPublisherFileResponse)
}

::google::protobuf::uint8* RPCGetPublisherFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetPublisherFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes file = 1;
  if (this->file().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetPublisherFileResponse)
  return target;
}

size_t RPCGetPublisherFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetPublisherFileResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes file = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetPublisherFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetPublisherFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetPublisherFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetPublisherFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetPublisherFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetPublisherFileResponse)
    MergeFrom(*source);
  }
}

void RPCGetPublisherFileResponse::MergeFrom(const RPCGetPublisherFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetPublisherFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
}

void RPCGetPublisherFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetPublisherFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetPublisherFileResponse::CopyFrom(const RPCGetPublisherFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetPublisherFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetPublisherFileResponse::IsInitialized() const {
  return true;
}

void RPCGetPublisherFileResponse::Swap(RPCGetPublisherFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetPublisherFileResponse::InternalSwap(RPCGetPublisherFileResponse* other) {
  using std::swap;
  file_.Swap(&other->file_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCGetPublisherFileResponse::GetMetadata() const {
  protobuf_pb_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb

// @@protoc_insertion_point(global_scope)
