// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/addressbook.proto

#include "pb/addressbook.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_pb_2faddressbook_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pb_2faddressbook_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Peer_DetailsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pb_2faddressbook_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Peer;
}  // namespace protobuf_pb_2faddressbook_2eproto
namespace pb {
class Peer_DetailsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Peer_DetailsEntry_DoNotUse>
      _instance;
} _Peer_DetailsEntry_DoNotUse_default_instance_;
class PeerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Peer>
      _instance;
} _Peer_default_instance_;
class DNPeerRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNPeerRecord>
      _instance;
} _DNPeerRecord_default_instance_;
class DNAddressbookDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNAddressbook>
      _instance;
} _DNAddressbook_default_instance_;
class RPCUpsertPeerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCUpsertPeerRequest>
      _instance;
} _RPCUpsertPeerRequest_default_instance_;
class RPCUpsertPeerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCUpsertPeerResponse>
      _instance;
} _RPCUpsertPeerResponse_default_instance_;
class RPCGetPeerIdsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetPeerIdsRequest>
      _instance;
} _RPCGetPeerIdsRequest_default_instance_;
class RPCGetPeerIdsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetPeerIdsResponse>
      _instance;
} _RPCGetPeerIdsResponse_default_instance_;
class RPCGetPeerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetPeerRequest>
      _instance;
} _RPCGetPeerRequest_default_instance_;
class RPCGetPeerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetPeerResponse>
      _instance;
} _RPCGetPeerResponse_default_instance_;
}  // namespace pb
namespace protobuf_pb_2faddressbook_2eproto {
static void InitDefaultsPeer_DetailsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Peer_DetailsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::Peer_DetailsEntry_DoNotUse();
  }
  ::pb::Peer_DetailsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Peer_DetailsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeer_DetailsEntry_DoNotUse}, {}};

static void InitDefaultsPeer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Peer_default_instance_;
    new (ptr) ::pb::Peer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Peer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Peer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPeer}, {
      &protobuf_pb_2faddressbook_2eproto::scc_info_Peer_DetailsEntry_DoNotUse.base,}};

static void InitDefaultsDNPeerRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_DNPeerRecord_default_instance_;
    new (ptr) ::pb::DNPeerRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DNPeerRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DNPeerRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDNPeerRecord}, {
      &protobuf_pb_2faddressbook_2eproto::scc_info_Peer.base,}};

static void InitDefaultsDNAddressbook() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_DNAddressbook_default_instance_;
    new (ptr) ::pb::DNAddressbook();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DNAddressbook::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DNAddressbook =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDNAddressbook}, {
      &protobuf_pb_2faddressbook_2eproto::scc_info_Peer.base,}};

static void InitDefaultsRPCUpsertPeerRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RPCUpsertPeerRequest_default_instance_;
    new (ptr) ::pb::RPCUpsertPeerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCUpsertPeerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RPCUpsertPeerRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRPCUpsertPeerRequest}, {
      &protobuf_pb_2faddressbook_2eproto::scc_info_Peer.base,}};

static void InitDefaultsRPCUpsertPeerResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RPCUpsertPeerResponse_default_instance_;
    new (ptr) ::pb::RPCUpsertPeerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCUpsertPeerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RPCUpsertPeerResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRPCUpsertPeerResponse}, {}};

static void InitDefaultsRPCGetPeerIdsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RPCGetPeerIdsRequest_default_instance_;
    new (ptr) ::pb::RPCGetPeerIdsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetPeerIdsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RPCGetPeerIdsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRPCGetPeerIdsRequest}, {}};

static void InitDefaultsRPCGetPeerIdsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RPCGetPeerIdsResponse_default_instance_;
    new (ptr) ::pb::RPCGetPeerIdsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetPeerIdsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RPCGetPeerIdsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRPCGetPeerIdsResponse}, {}};

static void InitDefaultsRPCGetPeerRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RPCGetPeerRequest_default_instance_;
    new (ptr) ::pb::RPCGetPeerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetPeerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RPCGetPeerRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRPCGetPeerRequest}, {}};

static void InitDefaultsRPCGetPeerResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RPCGetPeerResponse_default_instance_;
    new (ptr) ::pb::RPCGetPeerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetPeerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RPCGetPeerResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRPCGetPeerResponse}, {
      &protobuf_pb_2faddressbook_2eproto::scc_info_Peer.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Peer_DetailsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Peer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DNPeerRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DNAddressbook.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPCUpsertPeerRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPCUpsertPeerResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPCGetPeerIdsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPCGetPeerIdsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPCGetPeerRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPCGetPeerResponse.base);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Peer_DetailsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Peer_DetailsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Peer_DetailsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Peer_DetailsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Peer, published_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Peer, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Peer, dnid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Peer, details_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNPeerRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNPeerRecord, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNAddressbook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNAddressbook, peers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCUpsertPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCUpsertPeerRequest, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCUpsertPeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerIdsRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerIdsRequest, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerIdsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerIdsResponse, peerids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerRequest, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerRequest, dnid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetPeerResponse, peer_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pb::Peer_DetailsEntry_DoNotUse)},
  { 9, -1, sizeof(::pb::Peer)},
  { 18, -1, sizeof(::pb::DNPeerRecord)},
  { 24, -1, sizeof(::pb::DNAddressbook)},
  { 30, -1, sizeof(::pb::RPCUpsertPeerRequest)},
  { 36, -1, sizeof(::pb::RPCUpsertPeerResponse)},
  { 41, -1, sizeof(::pb::RPCGetPeerIdsRequest)},
  { 48, -1, sizeof(::pb::RPCGetPeerIdsResponse)},
  { 54, -1, sizeof(::pb::RPCGetPeerRequest)},
  { 61, -1, sizeof(::pb::RPCGetPeerResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Peer_DetailsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Peer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_DNPeerRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_DNAddressbook_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCUpsertPeerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCUpsertPeerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetPeerIdsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetPeerIdsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetPeerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetPeerResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "pb/addressbook.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024pb/addressbook.proto\022\002pb\"\214\001\n\004Peer\022\021\n\tp"
      "ublished\030\001 \001(\004\022\013\n\003pId\030\002 \001(\t\022\014\n\004dnId\030\003 \001("
      "\004\022&\n\007details\030\004 \003(\0132\025.pb.Peer.DetailsEntr"
      "y\032.\n\014DetailsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
      "\002 \001(\t:\0028\001\"&\n\014DNPeerRecord\022\026\n\004peer\030\002 \001(\0132"
      "\010.pb.Peer\"(\n\rDNAddressbook\022\027\n\005peers\030\001 \003("
      "\0132\010.pb.Peer\".\n\024RPCUpsertPeerRequest\022\026\n\004p"
      "eer\030\001 \001(\0132\010.pb.Peer\"\027\n\025RPCUpsertPeerResp"
      "onse\"2\n\024RPCGetPeerIdsRequest\022\013\n\003key\030\001 \001("
      "\t\022\r\n\005value\030\002 \001(\t\"(\n\025RPCGetPeerIdsRespons"
      "e\022\017\n\007peerIds\030\001 \003(\t\".\n\021RPCGetPeerRequest\022"
      "\013\n\003pId\030\001 \001(\t\022\014\n\004dnId\030\002 \001(\004\",\n\022RPCGetPeer"
      "Response\022\026\n\004peer\030\001 \001(\0132\010.pb.Peerb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb/addressbook.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pb_2faddressbook_2eproto
namespace pb {

// ===================================================================

Peer_DetailsEntry_DoNotUse::Peer_DetailsEntry_DoNotUse() {}
Peer_DetailsEntry_DoNotUse::Peer_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Peer_DetailsEntry_DoNotUse::MergeFrom(const Peer_DetailsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Peer_DetailsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[0];
}
void Peer_DetailsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Peer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peer::kPublishedFieldNumber;
const int Peer::kPIdFieldNumber;
const int Peer::kDnIdFieldNumber;
const int Peer::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2faddressbook_2eproto::scc_info_Peer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Peer)
}
Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_.MergeFrom(from.details_);
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pid().size() > 0) {
    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  ::memcpy(&published_, &from.published_,
    static_cast<size_t>(reinterpret_cast<char*>(&dnid_) -
    reinterpret_cast<char*>(&published_)) + sizeof(dnid_));
  // @@protoc_insertion_point(copy_constructor:pb.Peer)
}

void Peer::SharedCtor() {
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&published_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dnid_) -
      reinterpret_cast<char*>(&published_)) + sizeof(dnid_));
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:pb.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  pid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  ::protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Peer& Peer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2faddressbook_2eproto::scc_info_Peer.base);
  return *internal_default_instance();
}


void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.Clear();
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&published_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dnid_) -
      reinterpret_cast<char*>(&published_)) + sizeof(dnid_));
  _internal_metadata_.Clear();
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Peer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 published = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &published_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pid().data(), static_cast<int>(this->pid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Peer.pId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dnId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          Peer_DetailsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Peer_DetailsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&details_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Peer.DetailsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Peer.DetailsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 published = 1;
  if (this->published() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->published(), output);
  }

  // string pId = 2;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), static_cast<int>(this->pid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Peer.pId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pid(), output);
  }

  // uint64 dnId = 3;
  if (this->dnid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dnid(), output);
  }

  // map<string, string> details = 4;
  if (!this->details().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Peer.DetailsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Peer.DetailsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->details().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->details().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Peer_DetailsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(details_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Peer_DetailsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it) {
        entry.reset(details_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Peer)
}

::google::protobuf::uint8* Peer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 published = 1;
  if (this->published() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->published(), target);
  }

  // string pId = 2;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), static_cast<int>(this->pid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Peer.pId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pid(), target);
  }

  // uint64 dnId = 3;
  if (this->dnid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dnid(), target);
  }

  // map<string, string> details = 4;
  if (!this->details().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Peer.DetailsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Peer.DetailsEntry.value");
      }
    };

    if (deterministic &&
        this->details().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->details().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Peer_DetailsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(details_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Peer_DetailsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it) {
        entry.reset(details_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Peer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> details = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->details_size());
  {
    ::std::unique_ptr<Peer_DetailsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->details().begin();
        it != this->details().end(); ++it) {
      entry.reset(details_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string pId = 2;
  if (this->pid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pid());
  }

  // uint64 published = 1;
  if (this->published() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->published());
  }

  // uint64 dnId = 3;
  if (this->dnid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dnid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Peer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Peer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
  if (from.pid().size() > 0) {

    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  if (from.published() != 0) {
    set_published(from.published());
  }
  if (from.dnid() != 0) {
    set_dnid(from.dnid());
  }
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  using std::swap;
  details_.Swap(&other->details_);
  pid_.Swap(&other->pid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(published_, other->published_);
  swap(dnid_, other->dnid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DNPeerRecord::InitAsDefaultInstance() {
  ::pb::_DNPeerRecord_default_instance_._instance.get_mutable()->peer_ = const_cast< ::pb::Peer*>(
      ::pb::Peer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNPeerRecord::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNPeerRecord::DNPeerRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2faddressbook_2eproto::scc_info_DNPeerRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNPeerRecord)
}
DNPeerRecord::DNPeerRecord(const DNPeerRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::pb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.DNPeerRecord)
}

void DNPeerRecord::SharedCtor() {
  peer_ = NULL;
}

DNPeerRecord::~DNPeerRecord() {
  // @@protoc_insertion_point(destructor:pb.DNPeerRecord)
  SharedDtor();
}

void DNPeerRecord::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void DNPeerRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DNPeerRecord::descriptor() {
  ::protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DNPeerRecord& DNPeerRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2faddressbook_2eproto::scc_info_DNPeerRecord.base);
  return *internal_default_instance();
}


void DNPeerRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNPeerRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  _internal_metadata_.Clear();
}

bool DNPeerRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DNPeerRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Peer peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNPeerRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNPeerRecord)
  return false;
#undef DO_
}

void DNPeerRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNPeerRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_peer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.DNPeerRecord)
}

::google::protobuf::uint8* DNPeerRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.DNPeerRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_peer(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DNPeerRecord)
  return target;
}

size_t DNPeerRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNPeerRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .pb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DNPeerRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DNPeerRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const DNPeerRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNPeerRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DNPeerRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DNPeerRecord)
    MergeFrom(*source);
  }
}

void DNPeerRecord::MergeFrom(const DNPeerRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNPeerRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::pb::Peer::MergeFrom(from.peer());
  }
}

void DNPeerRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DNPeerRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNPeerRecord::CopyFrom(const DNPeerRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNPeerRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNPeerRecord::IsInitialized() const {
  return true;
}

void DNPeerRecord::Swap(DNPeerRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNPeerRecord::InternalSwap(DNPeerRecord* other) {
  using std::swap;
  swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DNPeerRecord::GetMetadata() const {
  protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DNAddressbook::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNAddressbook::kPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNAddressbook::DNAddressbook()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2faddressbook_2eproto::scc_info_DNAddressbook.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNAddressbook)
}
DNAddressbook::DNAddressbook(const DNAddressbook& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.DNAddressbook)
}

void DNAddressbook::SharedCtor() {
}

DNAddressbook::~DNAddressbook() {
  // @@protoc_insertion_point(destructor:pb.DNAddressbook)
  SharedDtor();
}

void DNAddressbook::SharedDtor() {
}

void DNAddressbook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DNAddressbook::descriptor() {
  ::protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DNAddressbook& DNAddressbook::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2faddressbook_2eproto::scc_info_DNAddressbook.base);
  return *internal_default_instance();
}


void DNAddressbook::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNAddressbook)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  _internal_metadata_.Clear();
}

bool DNAddressbook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DNAddressbook)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Peer peers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNAddressbook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNAddressbook)
  return false;
#undef DO_
}

void DNAddressbook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNAddressbook)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Peer peers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->peers(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.DNAddressbook)
}

::google::protobuf::uint8* DNAddressbook::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.DNAddressbook)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Peer peers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->peers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DNAddressbook)
  return target;
}

size_t DNAddressbook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNAddressbook)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.Peer peers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->peers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->peers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DNAddressbook::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DNAddressbook)
  GOOGLE_DCHECK_NE(&from, this);
  const DNAddressbook* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNAddressbook>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DNAddressbook)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DNAddressbook)
    MergeFrom(*source);
  }
}

void DNAddressbook::MergeFrom(const DNAddressbook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNAddressbook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
}

void DNAddressbook::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DNAddressbook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNAddressbook::CopyFrom(const DNAddressbook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNAddressbook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNAddressbook::IsInitialized() const {
  return true;
}

void DNAddressbook::Swap(DNAddressbook* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNAddressbook::InternalSwap(DNAddressbook* other) {
  using std::swap;
  CastToBase(&peers_)->InternalSwap(CastToBase(&other->peers_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DNAddressbook::GetMetadata() const {
  protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCUpsertPeerRequest::InitAsDefaultInstance() {
  ::pb::_RPCUpsertPeerRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::pb::Peer*>(
      ::pb::Peer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCUpsertPeerRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCUpsertPeerRequest::RPCUpsertPeerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2faddressbook_2eproto::scc_info_RPCUpsertPeerRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCUpsertPeerRequest)
}
RPCUpsertPeerRequest::RPCUpsertPeerRequest(const RPCUpsertPeerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::pb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCUpsertPeerRequest)
}

void RPCUpsertPeerRequest::SharedCtor() {
  peer_ = NULL;
}

RPCUpsertPeerRequest::~RPCUpsertPeerRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCUpsertPeerRequest)
  SharedDtor();
}

void RPCUpsertPeerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void RPCUpsertPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPCUpsertPeerRequest::descriptor() {
  ::protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCUpsertPeerRequest& RPCUpsertPeerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2faddressbook_2eproto::scc_info_RPCUpsertPeerRequest.base);
  return *internal_default_instance();
}


void RPCUpsertPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCUpsertPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  _internal_metadata_.Clear();
}

bool RPCUpsertPeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCUpsertPeerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Peer peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCUpsertPeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCUpsertPeerRequest)
  return false;
#undef DO_
}

void RPCUpsertPeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCUpsertPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_peer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCUpsertPeerRequest)
}

::google::protobuf::uint8* RPCUpsertPeerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCUpsertPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_peer(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCUpsertPeerRequest)
  return target;
}

size_t RPCUpsertPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCUpsertPeerRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .pb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCUpsertPeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCUpsertPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCUpsertPeerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCUpsertPeerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCUpsertPeerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCUpsertPeerRequest)
    MergeFrom(*source);
  }
}

void RPCUpsertPeerRequest::MergeFrom(const RPCUpsertPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCUpsertPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::pb::Peer::MergeFrom(from.peer());
  }
}

void RPCUpsertPeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCUpsertPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCUpsertPeerRequest::CopyFrom(const RPCUpsertPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCUpsertPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCUpsertPeerRequest::IsInitialized() const {
  return true;
}

void RPCUpsertPeerRequest::Swap(RPCUpsertPeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCUpsertPeerRequest::InternalSwap(RPCUpsertPeerRequest* other) {
  using std::swap;
  swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPCUpsertPeerRequest::GetMetadata() const {
  protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCUpsertPeerResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCUpsertPeerResponse::RPCUpsertPeerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2faddressbook_2eproto::scc_info_RPCUpsertPeerResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCUpsertPeerResponse)
}
RPCUpsertPeerResponse::RPCUpsertPeerResponse(const RPCUpsertPeerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RPCUpsertPeerResponse)
}

void RPCUpsertPeerResponse::SharedCtor() {
}

RPCUpsertPeerResponse::~RPCUpsertPeerResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCUpsertPeerResponse)
  SharedDtor();
}

void RPCUpsertPeerResponse::SharedDtor() {
}

void RPCUpsertPeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPCUpsertPeerResponse::descriptor() {
  ::protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCUpsertPeerResponse& RPCUpsertPeerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2faddressbook_2eproto::scc_info_RPCUpsertPeerResponse.base);
  return *internal_default_instance();
}


void RPCUpsertPeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCUpsertPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RPCUpsertPeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCUpsertPeerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCUpsertPeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCUpsertPeerResponse)
  return false;
#undef DO_
}

void RPCUpsertPeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCUpsertPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCUpsertPeerResponse)
}

::google::protobuf::uint8* RPCUpsertPeerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCUpsertPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCUpsertPeerResponse)
  return target;
}

size_t RPCUpsertPeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCUpsertPeerResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCUpsertPeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCUpsertPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCUpsertPeerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCUpsertPeerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCUpsertPeerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCUpsertPeerResponse)
    MergeFrom(*source);
  }
}

void RPCUpsertPeerResponse::MergeFrom(const RPCUpsertPeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCUpsertPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RPCUpsertPeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCUpsertPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCUpsertPeerResponse::CopyFrom(const RPCUpsertPeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCUpsertPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCUpsertPeerResponse::IsInitialized() const {
  return true;
}

void RPCUpsertPeerResponse::Swap(RPCUpsertPeerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCUpsertPeerResponse::InternalSwap(RPCUpsertPeerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPCUpsertPeerResponse::GetMetadata() const {
  protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetPeerIdsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetPeerIdsRequest::kKeyFieldNumber;
const int RPCGetPeerIdsRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetPeerIdsRequest::RPCGetPeerIdsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2faddressbook_2eproto::scc_info_RPCGetPeerIdsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetPeerIdsRequest)
}
RPCGetPeerIdsRequest::RPCGetPeerIdsRequest(const RPCGetPeerIdsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetPeerIdsRequest)
}

void RPCGetPeerIdsRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RPCGetPeerIdsRequest::~RPCGetPeerIdsRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCGetPeerIdsRequest)
  SharedDtor();
}

void RPCGetPeerIdsRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCGetPeerIdsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPCGetPeerIdsRequest::descriptor() {
  ::protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetPeerIdsRequest& RPCGetPeerIdsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2faddressbook_2eproto::scc_info_RPCGetPeerIdsRequest.base);
  return *internal_default_instance();
}


void RPCGetPeerIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetPeerIdsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RPCGetPeerIdsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetPeerIdsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetPeerIdsRequest.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetPeerIdsRequest.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetPeerIdsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetPeerIdsRequest)
  return false;
#undef DO_
}

void RPCGetPeerIdsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetPeerIdsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerIdsRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerIdsRequest.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetPeerIdsRequest)
}

::google::protobuf::uint8* RPCGetPeerIdsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetPeerIdsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerIdsRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerIdsRequest.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetPeerIdsRequest)
  return target;
}

size_t RPCGetPeerIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetPeerIdsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCGetPeerIdsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetPeerIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetPeerIdsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetPeerIdsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetPeerIdsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetPeerIdsRequest)
    MergeFrom(*source);
  }
}

void RPCGetPeerIdsRequest::MergeFrom(const RPCGetPeerIdsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetPeerIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RPCGetPeerIdsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetPeerIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetPeerIdsRequest::CopyFrom(const RPCGetPeerIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetPeerIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetPeerIdsRequest::IsInitialized() const {
  return true;
}

void RPCGetPeerIdsRequest::Swap(RPCGetPeerIdsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetPeerIdsRequest::InternalSwap(RPCGetPeerIdsRequest* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPCGetPeerIdsRequest::GetMetadata() const {
  protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetPeerIdsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetPeerIdsResponse::kPeerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetPeerIdsResponse::RPCGetPeerIdsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2faddressbook_2eproto::scc_info_RPCGetPeerIdsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetPeerIdsResponse)
}
RPCGetPeerIdsResponse::RPCGetPeerIdsResponse(const RPCGetPeerIdsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peerids_(from.peerids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetPeerIdsResponse)
}

void RPCGetPeerIdsResponse::SharedCtor() {
}

RPCGetPeerIdsResponse::~RPCGetPeerIdsResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCGetPeerIdsResponse)
  SharedDtor();
}

void RPCGetPeerIdsResponse::SharedDtor() {
}

void RPCGetPeerIdsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPCGetPeerIdsResponse::descriptor() {
  ::protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetPeerIdsResponse& RPCGetPeerIdsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2faddressbook_2eproto::scc_info_RPCGetPeerIdsResponse.base);
  return *internal_default_instance();
}


void RPCGetPeerIdsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetPeerIdsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerids_.Clear();
  _internal_metadata_.Clear();
}

bool RPCGetPeerIdsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetPeerIdsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string peerIds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peerids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peerids(this->peerids_size() - 1).data(),
            static_cast<int>(this->peerids(this->peerids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetPeerIdsResponse.peerIds"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetPeerIdsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetPeerIdsResponse)
  return false;
#undef DO_
}

void RPCGetPeerIdsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetPeerIdsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string peerIds = 1;
  for (int i = 0, n = this->peerids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerids(i).data(), static_cast<int>(this->peerids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerIdsResponse.peerIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->peerids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetPeerIdsResponse)
}

::google::protobuf::uint8* RPCGetPeerIdsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetPeerIdsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string peerIds = 1;
  for (int i = 0, n = this->peerids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerids(i).data(), static_cast<int>(this->peerids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerIdsResponse.peerIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->peerids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetPeerIdsResponse)
  return target;
}

size_t RPCGetPeerIdsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetPeerIdsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string peerIds = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->peerids_size());
  for (int i = 0, n = this->peerids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peerids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCGetPeerIdsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetPeerIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetPeerIdsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetPeerIdsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetPeerIdsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetPeerIdsResponse)
    MergeFrom(*source);
  }
}

void RPCGetPeerIdsResponse::MergeFrom(const RPCGetPeerIdsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetPeerIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peerids_.MergeFrom(from.peerids_);
}

void RPCGetPeerIdsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetPeerIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetPeerIdsResponse::CopyFrom(const RPCGetPeerIdsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetPeerIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetPeerIdsResponse::IsInitialized() const {
  return true;
}

void RPCGetPeerIdsResponse::Swap(RPCGetPeerIdsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetPeerIdsResponse::InternalSwap(RPCGetPeerIdsResponse* other) {
  using std::swap;
  peerids_.InternalSwap(CastToBase(&other->peerids_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPCGetPeerIdsResponse::GetMetadata() const {
  protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetPeerRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetPeerRequest::kPIdFieldNumber;
const int RPCGetPeerRequest::kDnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetPeerRequest::RPCGetPeerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2faddressbook_2eproto::scc_info_RPCGetPeerRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetPeerRequest)
}
RPCGetPeerRequest::RPCGetPeerRequest(const RPCGetPeerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pid().size() > 0) {
    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  dnid_ = from.dnid_;
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetPeerRequest)
}

void RPCGetPeerRequest::SharedCtor() {
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnid_ = GOOGLE_ULONGLONG(0);
}

RPCGetPeerRequest::~RPCGetPeerRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCGetPeerRequest)
  SharedDtor();
}

void RPCGetPeerRequest::SharedDtor() {
  pid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCGetPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPCGetPeerRequest::descriptor() {
  ::protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetPeerRequest& RPCGetPeerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2faddressbook_2eproto::scc_info_RPCGetPeerRequest.base);
  return *internal_default_instance();
}


void RPCGetPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RPCGetPeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetPeerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pid().data(), static_cast<int>(this->pid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetPeerRequest.pId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dnId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetPeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetPeerRequest)
  return false;
#undef DO_
}

void RPCGetPeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pId = 1;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), static_cast<int>(this->pid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerRequest.pId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pid(), output);
  }

  // uint64 dnId = 2;
  if (this->dnid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dnid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetPeerRequest)
}

::google::protobuf::uint8* RPCGetPeerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pId = 1;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), static_cast<int>(this->pid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerRequest.pId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pid(), target);
  }

  // uint64 dnId = 2;
  if (this->dnid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dnid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetPeerRequest)
  return target;
}

size_t RPCGetPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetPeerRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pId = 1;
  if (this->pid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pid());
  }

  // uint64 dnId = 2;
  if (this->dnid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dnid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCGetPeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetPeerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetPeerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetPeerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetPeerRequest)
    MergeFrom(*source);
  }
}

void RPCGetPeerRequest::MergeFrom(const RPCGetPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pid().size() > 0) {

    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  if (from.dnid() != 0) {
    set_dnid(from.dnid());
  }
}

void RPCGetPeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetPeerRequest::CopyFrom(const RPCGetPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetPeerRequest::IsInitialized() const {
  return true;
}

void RPCGetPeerRequest::Swap(RPCGetPeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetPeerRequest::InternalSwap(RPCGetPeerRequest* other) {
  using std::swap;
  pid_.Swap(&other->pid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dnid_, other->dnid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPCGetPeerRequest::GetMetadata() const {
  protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetPeerResponse::InitAsDefaultInstance() {
  ::pb::_RPCGetPeerResponse_default_instance_._instance.get_mutable()->peer_ = const_cast< ::pb::Peer*>(
      ::pb::Peer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetPeerResponse::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetPeerResponse::RPCGetPeerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pb_2faddressbook_2eproto::scc_info_RPCGetPeerResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetPeerResponse)
}
RPCGetPeerResponse::RPCGetPeerResponse(const RPCGetPeerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::pb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetPeerResponse)
}

void RPCGetPeerResponse::SharedCtor() {
  peer_ = NULL;
}

RPCGetPeerResponse::~RPCGetPeerResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCGetPeerResponse)
  SharedDtor();
}

void RPCGetPeerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void RPCGetPeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPCGetPeerResponse::descriptor() {
  ::protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetPeerResponse& RPCGetPeerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pb_2faddressbook_2eproto::scc_info_RPCGetPeerResponse.base);
  return *internal_default_instance();
}


void RPCGetPeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  _internal_metadata_.Clear();
}

bool RPCGetPeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetPeerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Peer peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetPeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetPeerResponse)
  return false;
#undef DO_
}

void RPCGetPeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_peer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetPeerResponse)
}

::google::protobuf::uint8* RPCGetPeerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_peer(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetPeerResponse)
  return target;
}

size_t RPCGetPeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetPeerResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .pb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCGetPeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetPeerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetPeerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetPeerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetPeerResponse)
    MergeFrom(*source);
  }
}

void RPCGetPeerResponse::MergeFrom(const RPCGetPeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::pb::Peer::MergeFrom(from.peer());
  }
}

void RPCGetPeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetPeerResponse::CopyFrom(const RPCGetPeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetPeerResponse::IsInitialized() const {
  return true;
}

void RPCGetPeerResponse::Swap(RPCGetPeerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetPeerResponse::InternalSwap(RPCGetPeerResponse* other) {
  using std::swap;
  swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPCGetPeerResponse::GetMetadata() const {
  protobuf_pb_2faddressbook_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2faddressbook_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::Peer_DetailsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::Peer_DetailsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Peer_DetailsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::Peer* Arena::CreateMaybeMessage< ::pb::Peer >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Peer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::DNPeerRecord* Arena::CreateMaybeMessage< ::pb::DNPeerRecord >(Arena* arena) {
  return Arena::CreateInternal< ::pb::DNPeerRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::DNAddressbook* Arena::CreateMaybeMessage< ::pb::DNAddressbook >(Arena* arena) {
  return Arena::CreateInternal< ::pb::DNAddressbook >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::RPCUpsertPeerRequest* Arena::CreateMaybeMessage< ::pb::RPCUpsertPeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RPCUpsertPeerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::RPCUpsertPeerResponse* Arena::CreateMaybeMessage< ::pb::RPCUpsertPeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RPCUpsertPeerResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::RPCGetPeerIdsRequest* Arena::CreateMaybeMessage< ::pb::RPCGetPeerIdsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RPCGetPeerIdsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::RPCGetPeerIdsResponse* Arena::CreateMaybeMessage< ::pb::RPCGetPeerIdsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RPCGetPeerIdsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::RPCGetPeerRequest* Arena::CreateMaybeMessage< ::pb::RPCGetPeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RPCGetPeerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pb::RPCGetPeerResponse* Arena::CreateMaybeMessage< ::pb::RPCGetPeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RPCGetPeerResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
