// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/matchmaking.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb/matchmaking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace pb {

void protobuf_ShutdownFile_pb_2fmatchmaking_2eproto() {
  SessionInfo_default_instance_.Shutdown();
  DNSessionResponse_default_instance_.Shutdown();
  DNSessionRequest_default_instance_.Shutdown();
  RPCUpsertSessionRequest_default_instance_.Shutdown();
  RPCUpsertSessionResponse_default_instance_.Shutdown();
  RPCGetSessionsRequest_default_instance_.Shutdown();
  RPCGetSessionsResponse_default_instance_.Shutdown();
  RPCDeleteSessionRequest_default_instance_.Shutdown();
  RPCDeleteSessionResponse_default_instance_.Shutdown();
}

void protobuf_InitDefaults_pb_2fmatchmaking_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  SessionInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DNSessionResponse_default_instance_.DefaultConstruct();
  DNSessionRequest_default_instance_.DefaultConstruct();
  RPCUpsertSessionRequest_default_instance_.DefaultConstruct();
  RPCUpsertSessionResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RPCGetSessionsRequest_default_instance_.DefaultConstruct();
  RPCGetSessionsResponse_default_instance_.DefaultConstruct();
  RPCDeleteSessionRequest_default_instance_.DefaultConstruct();
  RPCDeleteSessionResponse_default_instance_.DefaultConstruct();
  SessionInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  DNSessionResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  DNSessionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RPCUpsertSessionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RPCUpsertSessionResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RPCGetSessionsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RPCGetSessionsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RPCDeleteSessionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RPCDeleteSessionResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_pb_2fmatchmaking_2eproto_once_);
void protobuf_InitDefaults_pb_2fmatchmaking_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_pb_2fmatchmaking_2eproto_once_,
                 &protobuf_InitDefaults_pb_2fmatchmaking_2eproto_impl);
}
void protobuf_AddDesc_pb_2fmatchmaking_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_2fmatchmaking_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pb_2fmatchmaking_2eproto_once_);
void protobuf_AddDesc_pb_2fmatchmaking_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pb_2fmatchmaking_2eproto_once_,
                 &protobuf_AddDesc_pb_2fmatchmaking_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_2fmatchmaking_2eproto {
  StaticDescriptorInitializer_pb_2fmatchmaking_2eproto() {
    protobuf_AddDesc_pb_2fmatchmaking_2eproto();
  }
} static_descriptor_initializer_pb_2fmatchmaking_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionInfo::kDIdFieldNumber;
const int SessionInfo::kPIdFieldNumber;
const int SessionInfo::kSessionIdFieldNumber;
const int SessionInfo::kTypeFieldNumber;
const int SessionInfo::kNameFieldNumber;
const int SessionInfo::kAddressFieldNumber;
const int SessionInfo::kPortFieldNumber;
const int SessionInfo::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionInfo::SessionInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SessionInfo)
}

void SessionInfo::InitAsDefaultInstance() {
}

SessionInfo::SessionInfo(const SessionInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SessionInfo)
}

void SessionInfo::SharedCtor() {
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&did_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&did_) + sizeof(port_));
  _cached_size_ = 0;
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:pb.SessionInfo)
  SharedDtor();
}

void SessionInfo::SharedDtor() {
  pid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionInfo& SessionInfo::default_instance() {
  protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SessionInfo> SessionInfo_default_instance_;

SessionInfo* SessionInfo::New(::google::protobuf::Arena* arena) const {
  SessionInfo* n = new SessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SessionInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SessionInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SessionInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(did_, port_);
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  details_.Clear();
}

bool SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &did_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pId;
        break;
      }

      // optional string pId = 2;
      case 2: {
        if (tag == 18) {
         parse_pId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SessionInfo.pId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sessionId;
        break;
      }

      // optional uint64 sessionId = 3;
      case 3: {
        if (tag == 24) {
         parse_sessionId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint64 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SessionInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_address;
        break;
      }

      // optional uint64 address = 6;
      case 6: {
        if (tag == 48) {
         parse_address:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_port;
        break;
      }

      // optional uint32 port = 7;
      case 7: {
        if (tag == 56) {
         parse_port:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_details;
        break;
      }

      // map<string, string> details = 8;
      case 8: {
        if (tag == 66) {
         parse_details:
          DO_(input->IncrementRecursionDepth());
         parse_loop_details:
          SessionInfo_DetailsEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&details_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SessionInfo.DetailsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SessionInfo.DetailsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_details;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SessionInfo)
  return false;
#undef DO_
}

void SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SessionInfo)
  // optional uint64 dId = 1;
  if (this->did() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->did(), output);
  }

  // optional string pId = 2;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SessionInfo.pId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pid(), output);
  }

  // optional uint64 sessionId = 3;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sessionid(), output);
  }

  // optional uint64 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->type(), output);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SessionInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional uint64 address = 6;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->address(), output);
  }

  // optional uint32 port = 7;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->port(), output);
  }

  // map<string, string> details = 8;
  if (!this->details().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.SessionInfo.DetailsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.SessionInfo.DetailsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->details().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->details().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SessionInfo_DetailsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(details_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SessionInfo_DetailsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it) {
        entry.reset(details_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:pb.SessionInfo)
}

size_t SessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SessionInfo)
  size_t total_size = 0;

  // optional uint64 dId = 1;
  if (this->did() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->did());
  }

  // optional string pId = 2;
  if (this->pid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pid());
  }

  // optional uint64 sessionId = 3;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  // optional uint64 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint64 address = 6;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->address());
  }

  // optional uint32 port = 7;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // map<string, string> details = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->details_size());
  {
    ::google::protobuf::scoped_ptr<SessionInfo_DetailsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->details().begin();
        it != this->details().end(); ++it) {
      entry.reset(details_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionInfo*>(&from));
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SessionInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SessionInfo::UnsafeMergeFrom(const SessionInfo& from) {
  GOOGLE_DCHECK(&from != this);
  details_.MergeFrom(from.details_);
  if (from.did() != 0) {
    set_did(from.did());
  }
  if (from.pid().size() > 0) {

    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.address() != 0) {
    set_address(from.address());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SessionInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SessionInfo::IsInitialized() const {

  return true;
}

void SessionInfo::Swap(SessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionInfo::InternalSwap(SessionInfo* other) {
  std::swap(did_, other->did_);
  pid_.Swap(&other->pid_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  std::swap(address_, other->address_);
  std::swap(port_, other->port_);
  details_.Swap(&other->details_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionInfo::GetTypeName() const {
  return "pb.SessionInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionInfo

// optional uint64 dId = 1;
void SessionInfo::clear_did() {
  did_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SessionInfo::did() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.dId)
  return did_;
}
void SessionInfo::set_did(::google::protobuf::uint64 value) {
  
  did_ = value;
  // @@protoc_insertion_point(field_set:pb.SessionInfo.dId)
}

// optional string pId = 2;
void SessionInfo::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SessionInfo::pid() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.pId)
  return pid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionInfo::set_pid(const ::std::string& value) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SessionInfo.pId)
}
void SessionInfo::set_pid(const char* value) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SessionInfo.pId)
}
void SessionInfo::set_pid(const char* value, size_t size) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SessionInfo.pId)
}
::std::string* SessionInfo::mutable_pid() {
  
  // @@protoc_insertion_point(field_mutable:pb.SessionInfo.pId)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionInfo::release_pid() {
  // @@protoc_insertion_point(field_release:pb.SessionInfo.pId)
  
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionInfo::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    
  } else {
    
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:pb.SessionInfo.pId)
}

// optional uint64 sessionId = 3;
void SessionInfo::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SessionInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.sessionId)
  return sessionid_;
}
void SessionInfo::set_sessionid(::google::protobuf::uint64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:pb.SessionInfo.sessionId)
}

// optional uint64 type = 4;
void SessionInfo::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SessionInfo::type() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.type)
  return type_;
}
void SessionInfo::set_type(::google::protobuf::uint64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.SessionInfo.type)
}

// optional string name = 5;
void SessionInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SessionInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SessionInfo.name)
}
void SessionInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SessionInfo.name)
}
void SessionInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SessionInfo.name)
}
::std::string* SessionInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.SessionInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionInfo::release_name() {
  // @@protoc_insertion_point(field_release:pb.SessionInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.SessionInfo.name)
}

// optional uint64 address = 6;
void SessionInfo::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SessionInfo::address() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.address)
  return address_;
}
void SessionInfo::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:pb.SessionInfo.address)
}

// optional uint32 port = 7;
void SessionInfo::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 SessionInfo::port() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.port)
  return port_;
}
void SessionInfo::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:pb.SessionInfo.port)
}

// map<string, string> details = 8;
int SessionInfo::details_size() const {
  return details_.size();
}
void SessionInfo::clear_details() {
  details_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
SessionInfo::details() const {
  // @@protoc_insertion_point(field_map:pb.SessionInfo.details)
  return details_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
SessionInfo::mutable_details() {
  // @@protoc_insertion_point(field_mutable_map:pb.SessionInfo.details)
  return details_.MutableMap();
}

inline const SessionInfo* SessionInfo::internal_default_instance() {
  return &SessionInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSessionResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSessionResponse::DNSessionResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNSessionResponse)
}

void DNSessionResponse::InitAsDefaultInstance() {
}

DNSessionResponse::DNSessionResponse(const DNSessionResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.DNSessionResponse)
}

void DNSessionResponse::SharedCtor() {
  _cached_size_ = 0;
}

DNSessionResponse::~DNSessionResponse() {
  // @@protoc_insertion_point(destructor:pb.DNSessionResponse)
  SharedDtor();
}

void DNSessionResponse::SharedDtor() {
}

void DNSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DNSessionResponse& DNSessionResponse::default_instance() {
  protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DNSessionResponse> DNSessionResponse_default_instance_;

DNSessionResponse* DNSessionResponse::New(::google::protobuf::Arena* arena) const {
  DNSessionResponse* n = new DNSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNSessionResponse)
  results_.Clear();
}

bool DNSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DNSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.SessionInfo results = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNSessionResponse)
  return false;
#undef DO_
}

void DNSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNSessionResponse)
  // repeated .pb.SessionInfo results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.DNSessionResponse)
}

size_t DNSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNSessionResponse)
  size_t total_size = 0;

  // repeated .pb.SessionInfo results = 1;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSessionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DNSessionResponse*>(&from));
}

void DNSessionResponse::MergeFrom(const DNSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNSessionResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DNSessionResponse::UnsafeMergeFrom(const DNSessionResponse& from) {
  GOOGLE_DCHECK(&from != this);
  results_.MergeFrom(from.results_);
}

void DNSessionResponse::CopyFrom(const DNSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNSessionResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DNSessionResponse::IsInitialized() const {

  return true;
}

void DNSessionResponse::Swap(DNSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSessionResponse::InternalSwap(DNSessionResponse* other) {
  results_.UnsafeArenaSwap(&other->results_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DNSessionResponse::GetTypeName() const {
  return "pb.DNSessionResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DNSessionResponse

// repeated .pb.SessionInfo results = 1;
int DNSessionResponse::results_size() const {
  return results_.size();
}
void DNSessionResponse::clear_results() {
  results_.Clear();
}
const ::pb::SessionInfo& DNSessionResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:pb.DNSessionResponse.results)
  return results_.Get(index);
}
::pb::SessionInfo* DNSessionResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DNSessionResponse.results)
  return results_.Mutable(index);
}
::pb::SessionInfo* DNSessionResponse::add_results() {
  // @@protoc_insertion_point(field_add:pb.DNSessionResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >*
DNSessionResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:pb.DNSessionResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >&
DNSessionResponse::results() const {
  // @@protoc_insertion_point(field_list:pb.DNSessionResponse.results)
  return results_;
}

inline const DNSessionResponse* DNSessionResponse::internal_default_instance() {
  return &DNSessionResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSessionRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSessionRequest::DNSessionRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNSessionRequest)
}

void DNSessionRequest::InitAsDefaultInstance() {
}

DNSessionRequest::DNSessionRequest(const DNSessionRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.DNSessionRequest)
}

void DNSessionRequest::SharedCtor() {
  type_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

DNSessionRequest::~DNSessionRequest() {
  // @@protoc_insertion_point(destructor:pb.DNSessionRequest)
  SharedDtor();
}

void DNSessionRequest::SharedDtor() {
}

void DNSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DNSessionRequest& DNSessionRequest::default_instance() {
  protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DNSessionRequest> DNSessionRequest_default_instance_;

DNSessionRequest* DNSessionRequest::New(::google::protobuf::Arena* arena) const {
  DNSessionRequest* n = new DNSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNSessionRequest)
  type_ = GOOGLE_ULONGLONG(0);
}

bool DNSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DNSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNSessionRequest)
  return false;
#undef DO_
}

void DNSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNSessionRequest)
  // optional uint64 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.DNSessionRequest)
}

size_t DNSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNSessionRequest)
  size_t total_size = 0;

  // optional uint64 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSessionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DNSessionRequest*>(&from));
}

void DNSessionRequest::MergeFrom(const DNSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNSessionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DNSessionRequest::UnsafeMergeFrom(const DNSessionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DNSessionRequest::CopyFrom(const DNSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNSessionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DNSessionRequest::IsInitialized() const {

  return true;
}

void DNSessionRequest::Swap(DNSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSessionRequest::InternalSwap(DNSessionRequest* other) {
  std::swap(type_, other->type_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DNSessionRequest::GetTypeName() const {
  return "pb.DNSessionRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DNSessionRequest

// optional uint64 type = 1;
void DNSessionRequest::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DNSessionRequest::type() const {
  // @@protoc_insertion_point(field_get:pb.DNSessionRequest.type)
  return type_;
}
void DNSessionRequest::set_type(::google::protobuf::uint64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.DNSessionRequest.type)
}

inline const DNSessionRequest* DNSessionRequest::internal_default_instance() {
  return &DNSessionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCUpsertSessionRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCUpsertSessionRequest::RPCUpsertSessionRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCUpsertSessionRequest)
}

void RPCUpsertSessionRequest::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::SessionInfo*>(
      ::pb::SessionInfo::internal_default_instance());
}

RPCUpsertSessionRequest::RPCUpsertSessionRequest(const RPCUpsertSessionRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RPCUpsertSessionRequest)
}

void RPCUpsertSessionRequest::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

RPCUpsertSessionRequest::~RPCUpsertSessionRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCUpsertSessionRequest)
  SharedDtor();
}

void RPCUpsertSessionRequest::SharedDtor() {
  if (this != &RPCUpsertSessionRequest_default_instance_.get()) {
    delete info_;
  }
}

void RPCUpsertSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCUpsertSessionRequest& RPCUpsertSessionRequest::default_instance() {
  protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RPCUpsertSessionRequest> RPCUpsertSessionRequest_default_instance_;

RPCUpsertSessionRequest* RPCUpsertSessionRequest::New(::google::protobuf::Arena* arena) const {
  RPCUpsertSessionRequest* n = new RPCUpsertSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCUpsertSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCUpsertSessionRequest)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}

bool RPCUpsertSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCUpsertSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.SessionInfo info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCUpsertSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCUpsertSessionRequest)
  return false;
#undef DO_
}

void RPCUpsertSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCUpsertSessionRequest)
  // optional .pb.SessionInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.RPCUpsertSessionRequest)
}

size_t RPCUpsertSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCUpsertSessionRequest)
  size_t total_size = 0;

  // optional .pb.SessionInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCUpsertSessionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCUpsertSessionRequest*>(&from));
}

void RPCUpsertSessionRequest::MergeFrom(const RPCUpsertSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCUpsertSessionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RPCUpsertSessionRequest::UnsafeMergeFrom(const RPCUpsertSessionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_info()) {
    mutable_info()->::pb::SessionInfo::MergeFrom(from.info());
  }
}

void RPCUpsertSessionRequest::CopyFrom(const RPCUpsertSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCUpsertSessionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RPCUpsertSessionRequest::IsInitialized() const {

  return true;
}

void RPCUpsertSessionRequest::Swap(RPCUpsertSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCUpsertSessionRequest::InternalSwap(RPCUpsertSessionRequest* other) {
  std::swap(info_, other->info_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RPCUpsertSessionRequest::GetTypeName() const {
  return "pb.RPCUpsertSessionRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCUpsertSessionRequest

// optional .pb.SessionInfo info = 1;
bool RPCUpsertSessionRequest::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void RPCUpsertSessionRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::pb::SessionInfo& RPCUpsertSessionRequest::info() const {
  // @@protoc_insertion_point(field_get:pb.RPCUpsertSessionRequest.info)
  return info_ != NULL ? *info_
                         : *::pb::SessionInfo::internal_default_instance();
}
::pb::SessionInfo* RPCUpsertSessionRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::pb::SessionInfo;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCUpsertSessionRequest.info)
  return info_;
}
::pb::SessionInfo* RPCUpsertSessionRequest::release_info() {
  // @@protoc_insertion_point(field_release:pb.RPCUpsertSessionRequest.info)
  
  ::pb::SessionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void RPCUpsertSessionRequest::set_allocated_info(::pb::SessionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCUpsertSessionRequest.info)
}

inline const RPCUpsertSessionRequest* RPCUpsertSessionRequest::internal_default_instance() {
  return &RPCUpsertSessionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCUpsertSessionResponse::kResultFieldNumber;
const int RPCUpsertSessionResponse::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCUpsertSessionResponse::RPCUpsertSessionResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCUpsertSessionResponse)
}

void RPCUpsertSessionResponse::InitAsDefaultInstance() {
}

RPCUpsertSessionResponse::RPCUpsertSessionResponse(const RPCUpsertSessionResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RPCUpsertSessionResponse)
}

void RPCUpsertSessionResponse::SharedCtor() {
  ::memset(&sessionid_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&sessionid_) + sizeof(result_));
  _cached_size_ = 0;
}

RPCUpsertSessionResponse::~RPCUpsertSessionResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCUpsertSessionResponse)
  SharedDtor();
}

void RPCUpsertSessionResponse::SharedDtor() {
}

void RPCUpsertSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCUpsertSessionResponse& RPCUpsertSessionResponse::default_instance() {
  protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RPCUpsertSessionResponse> RPCUpsertSessionResponse_default_instance_;

RPCUpsertSessionResponse* RPCUpsertSessionResponse::New(::google::protobuf::Arena* arena) const {
  RPCUpsertSessionResponse* n = new RPCUpsertSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCUpsertSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCUpsertSessionResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RPCUpsertSessionResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RPCUpsertSessionResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sessionid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool RPCUpsertSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCUpsertSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionId;
        break;
      }

      // optional uint64 sessionId = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCUpsertSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCUpsertSessionResponse)
  return false;
#undef DO_
}

void RPCUpsertSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCUpsertSessionResponse)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sessionid(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.RPCUpsertSessionResponse)
}

size_t RPCUpsertSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCUpsertSessionResponse)
  size_t total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // optional uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCUpsertSessionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCUpsertSessionResponse*>(&from));
}

void RPCUpsertSessionResponse::MergeFrom(const RPCUpsertSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCUpsertSessionResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RPCUpsertSessionResponse::UnsafeMergeFrom(const RPCUpsertSessionResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
}

void RPCUpsertSessionResponse::CopyFrom(const RPCUpsertSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCUpsertSessionResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RPCUpsertSessionResponse::IsInitialized() const {

  return true;
}

void RPCUpsertSessionResponse::Swap(RPCUpsertSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCUpsertSessionResponse::InternalSwap(RPCUpsertSessionResponse* other) {
  std::swap(result_, other->result_);
  std::swap(sessionid_, other->sessionid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RPCUpsertSessionResponse::GetTypeName() const {
  return "pb.RPCUpsertSessionResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCUpsertSessionResponse

// optional bool result = 1;
void RPCUpsertSessionResponse::clear_result() {
  result_ = false;
}
bool RPCUpsertSessionResponse::result() const {
  // @@protoc_insertion_point(field_get:pb.RPCUpsertSessionResponse.result)
  return result_;
}
void RPCUpsertSessionResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCUpsertSessionResponse.result)
}

// optional uint64 sessionId = 2;
void RPCUpsertSessionResponse::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RPCUpsertSessionResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:pb.RPCUpsertSessionResponse.sessionId)
  return sessionid_;
}
void RPCUpsertSessionResponse::set_sessionid(::google::protobuf::uint64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCUpsertSessionResponse.sessionId)
}

inline const RPCUpsertSessionResponse* RPCUpsertSessionResponse::internal_default_instance() {
  return &RPCUpsertSessionResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetSessionsRequest::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetSessionsRequest::RPCGetSessionsRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetSessionsRequest)
}

void RPCGetSessionsRequest::InitAsDefaultInstance() {
}

RPCGetSessionsRequest::RPCGetSessionsRequest(const RPCGetSessionsRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetSessionsRequest)
}

void RPCGetSessionsRequest::SharedCtor() {
  _cached_size_ = 0;
}

RPCGetSessionsRequest::~RPCGetSessionsRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCGetSessionsRequest)
  SharedDtor();
}

void RPCGetSessionsRequest::SharedDtor() {
}

void RPCGetSessionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCGetSessionsRequest& RPCGetSessionsRequest::default_instance() {
  protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RPCGetSessionsRequest> RPCGetSessionsRequest_default_instance_;

RPCGetSessionsRequest* RPCGetSessionsRequest::New(::google::protobuf::Arena* arena) const {
  RPCGetSessionsRequest* n = new RPCGetSessionsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetSessionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetSessionsRequest)
  details_.Clear();
}

bool RPCGetSessionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetSessionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> details = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_details:
          RPCGetSessionsRequest_DetailsEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&details_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetSessionsRequest.DetailsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetSessionsRequest.DetailsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_details;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetSessionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetSessionsRequest)
  return false;
#undef DO_
}

void RPCGetSessionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetSessionsRequest)
  // map<string, string> details = 1;
  if (!this->details().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.RPCGetSessionsRequest.DetailsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.RPCGetSessionsRequest.DetailsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->details().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->details().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RPCGetSessionsRequest_DetailsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(details_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RPCGetSessionsRequest_DetailsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it) {
        entry.reset(details_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:pb.RPCGetSessionsRequest)
}

size_t RPCGetSessionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetSessionsRequest)
  size_t total_size = 0;

  // map<string, string> details = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->details_size());
  {
    ::google::protobuf::scoped_ptr<RPCGetSessionsRequest_DetailsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->details().begin();
        it != this->details().end(); ++it) {
      entry.reset(details_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetSessionsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCGetSessionsRequest*>(&from));
}

void RPCGetSessionsRequest::MergeFrom(const RPCGetSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetSessionsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RPCGetSessionsRequest::UnsafeMergeFrom(const RPCGetSessionsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  details_.MergeFrom(from.details_);
}

void RPCGetSessionsRequest::CopyFrom(const RPCGetSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetSessionsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RPCGetSessionsRequest::IsInitialized() const {

  return true;
}

void RPCGetSessionsRequest::Swap(RPCGetSessionsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetSessionsRequest::InternalSwap(RPCGetSessionsRequest* other) {
  details_.Swap(&other->details_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RPCGetSessionsRequest::GetTypeName() const {
  return "pb.RPCGetSessionsRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCGetSessionsRequest

// map<string, string> details = 1;
int RPCGetSessionsRequest::details_size() const {
  return details_.size();
}
void RPCGetSessionsRequest::clear_details() {
  details_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
RPCGetSessionsRequest::details() const {
  // @@protoc_insertion_point(field_map:pb.RPCGetSessionsRequest.details)
  return details_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
RPCGetSessionsRequest::mutable_details() {
  // @@protoc_insertion_point(field_mutable_map:pb.RPCGetSessionsRequest.details)
  return details_.MutableMap();
}

inline const RPCGetSessionsRequest* RPCGetSessionsRequest::internal_default_instance() {
  return &RPCGetSessionsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetSessionsResponse::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetSessionsResponse::RPCGetSessionsResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetSessionsResponse)
}

void RPCGetSessionsResponse::InitAsDefaultInstance() {
}

RPCGetSessionsResponse::RPCGetSessionsResponse(const RPCGetSessionsResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetSessionsResponse)
}

void RPCGetSessionsResponse::SharedCtor() {
  _cached_size_ = 0;
}

RPCGetSessionsResponse::~RPCGetSessionsResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCGetSessionsResponse)
  SharedDtor();
}

void RPCGetSessionsResponse::SharedDtor() {
}

void RPCGetSessionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCGetSessionsResponse& RPCGetSessionsResponse::default_instance() {
  protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RPCGetSessionsResponse> RPCGetSessionsResponse_default_instance_;

RPCGetSessionsResponse* RPCGetSessionsResponse::New(::google::protobuf::Arena* arena) const {
  RPCGetSessionsResponse* n = new RPCGetSessionsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetSessionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetSessionsResponse)
  sessions_.Clear();
}

bool RPCGetSessionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetSessionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.SessionInfo sessions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sessions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sessions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetSessionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetSessionsResponse)
  return false;
#undef DO_
}

void RPCGetSessionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetSessionsResponse)
  // repeated .pb.SessionInfo sessions = 1;
  for (unsigned int i = 0, n = this->sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sessions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.RPCGetSessionsResponse)
}

size_t RPCGetSessionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetSessionsResponse)
  size_t total_size = 0;

  // repeated .pb.SessionInfo sessions = 1;
  {
    unsigned int count = this->sessions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetSessionsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCGetSessionsResponse*>(&from));
}

void RPCGetSessionsResponse::MergeFrom(const RPCGetSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetSessionsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RPCGetSessionsResponse::UnsafeMergeFrom(const RPCGetSessionsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  sessions_.MergeFrom(from.sessions_);
}

void RPCGetSessionsResponse::CopyFrom(const RPCGetSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetSessionsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RPCGetSessionsResponse::IsInitialized() const {

  return true;
}

void RPCGetSessionsResponse::Swap(RPCGetSessionsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetSessionsResponse::InternalSwap(RPCGetSessionsResponse* other) {
  sessions_.UnsafeArenaSwap(&other->sessions_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RPCGetSessionsResponse::GetTypeName() const {
  return "pb.RPCGetSessionsResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCGetSessionsResponse

// repeated .pb.SessionInfo sessions = 1;
int RPCGetSessionsResponse::sessions_size() const {
  return sessions_.size();
}
void RPCGetSessionsResponse::clear_sessions() {
  sessions_.Clear();
}
const ::pb::SessionInfo& RPCGetSessionsResponse::sessions(int index) const {
  // @@protoc_insertion_point(field_get:pb.RPCGetSessionsResponse.sessions)
  return sessions_.Get(index);
}
::pb::SessionInfo* RPCGetSessionsResponse::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RPCGetSessionsResponse.sessions)
  return sessions_.Mutable(index);
}
::pb::SessionInfo* RPCGetSessionsResponse::add_sessions() {
  // @@protoc_insertion_point(field_add:pb.RPCGetSessionsResponse.sessions)
  return sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >*
RPCGetSessionsResponse::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:pb.RPCGetSessionsResponse.sessions)
  return &sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >&
RPCGetSessionsResponse::sessions() const {
  // @@protoc_insertion_point(field_list:pb.RPCGetSessionsResponse.sessions)
  return sessions_;
}

inline const RPCGetSessionsResponse* RPCGetSessionsResponse::internal_default_instance() {
  return &RPCGetSessionsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCDeleteSessionRequest::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCDeleteSessionRequest::RPCDeleteSessionRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCDeleteSessionRequest)
}

void RPCDeleteSessionRequest::InitAsDefaultInstance() {
}

RPCDeleteSessionRequest::RPCDeleteSessionRequest(const RPCDeleteSessionRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RPCDeleteSessionRequest)
}

void RPCDeleteSessionRequest::SharedCtor() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RPCDeleteSessionRequest::~RPCDeleteSessionRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCDeleteSessionRequest)
  SharedDtor();
}

void RPCDeleteSessionRequest::SharedDtor() {
}

void RPCDeleteSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCDeleteSessionRequest& RPCDeleteSessionRequest::default_instance() {
  protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RPCDeleteSessionRequest> RPCDeleteSessionRequest_default_instance_;

RPCDeleteSessionRequest* RPCDeleteSessionRequest::New(::google::protobuf::Arena* arena) const {
  RPCDeleteSessionRequest* n = new RPCDeleteSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCDeleteSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCDeleteSessionRequest)
  sessionid_ = GOOGLE_ULONGLONG(0);
}

bool RPCDeleteSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCDeleteSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCDeleteSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCDeleteSessionRequest)
  return false;
#undef DO_
}

void RPCDeleteSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCDeleteSessionRequest)
  // optional uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.RPCDeleteSessionRequest)
}

size_t RPCDeleteSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCDeleteSessionRequest)
  size_t total_size = 0;

  // optional uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCDeleteSessionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCDeleteSessionRequest*>(&from));
}

void RPCDeleteSessionRequest::MergeFrom(const RPCDeleteSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCDeleteSessionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RPCDeleteSessionRequest::UnsafeMergeFrom(const RPCDeleteSessionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
}

void RPCDeleteSessionRequest::CopyFrom(const RPCDeleteSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCDeleteSessionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RPCDeleteSessionRequest::IsInitialized() const {

  return true;
}

void RPCDeleteSessionRequest::Swap(RPCDeleteSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCDeleteSessionRequest::InternalSwap(RPCDeleteSessionRequest* other) {
  std::swap(sessionid_, other->sessionid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RPCDeleteSessionRequest::GetTypeName() const {
  return "pb.RPCDeleteSessionRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCDeleteSessionRequest

// optional uint64 sessionId = 1;
void RPCDeleteSessionRequest::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RPCDeleteSessionRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:pb.RPCDeleteSessionRequest.sessionId)
  return sessionid_;
}
void RPCDeleteSessionRequest::set_sessionid(::google::protobuf::uint64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCDeleteSessionRequest.sessionId)
}

inline const RPCDeleteSessionRequest* RPCDeleteSessionRequest::internal_default_instance() {
  return &RPCDeleteSessionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCDeleteSessionResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCDeleteSessionResponse::RPCDeleteSessionResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCDeleteSessionResponse)
}

void RPCDeleteSessionResponse::InitAsDefaultInstance() {
}

RPCDeleteSessionResponse::RPCDeleteSessionResponse(const RPCDeleteSessionResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RPCDeleteSessionResponse)
}

void RPCDeleteSessionResponse::SharedCtor() {
  result_ = false;
  _cached_size_ = 0;
}

RPCDeleteSessionResponse::~RPCDeleteSessionResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCDeleteSessionResponse)
  SharedDtor();
}

void RPCDeleteSessionResponse::SharedDtor() {
}

void RPCDeleteSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCDeleteSessionResponse& RPCDeleteSessionResponse::default_instance() {
  protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RPCDeleteSessionResponse> RPCDeleteSessionResponse_default_instance_;

RPCDeleteSessionResponse* RPCDeleteSessionResponse::New(::google::protobuf::Arena* arena) const {
  RPCDeleteSessionResponse* n = new RPCDeleteSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCDeleteSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCDeleteSessionResponse)
  result_ = false;
}

bool RPCDeleteSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCDeleteSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCDeleteSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCDeleteSessionResponse)
  return false;
#undef DO_
}

void RPCDeleteSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCDeleteSessionResponse)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.RPCDeleteSessionResponse)
}

size_t RPCDeleteSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCDeleteSessionResponse)
  size_t total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCDeleteSessionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCDeleteSessionResponse*>(&from));
}

void RPCDeleteSessionResponse::MergeFrom(const RPCDeleteSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCDeleteSessionResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RPCDeleteSessionResponse::UnsafeMergeFrom(const RPCDeleteSessionResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RPCDeleteSessionResponse::CopyFrom(const RPCDeleteSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCDeleteSessionResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RPCDeleteSessionResponse::IsInitialized() const {

  return true;
}

void RPCDeleteSessionResponse::Swap(RPCDeleteSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCDeleteSessionResponse::InternalSwap(RPCDeleteSessionResponse* other) {
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RPCDeleteSessionResponse::GetTypeName() const {
  return "pb.RPCDeleteSessionResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCDeleteSessionResponse

// optional bool result = 1;
void RPCDeleteSessionResponse::clear_result() {
  result_ = false;
}
bool RPCDeleteSessionResponse::result() const {
  // @@protoc_insertion_point(field_get:pb.RPCDeleteSessionResponse.result)
  return result_;
}
void RPCDeleteSessionResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCDeleteSessionResponse.result)
}

inline const RPCDeleteSessionResponse* RPCDeleteSessionResponse::internal_default_instance() {
  return &RPCDeleteSessionResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
