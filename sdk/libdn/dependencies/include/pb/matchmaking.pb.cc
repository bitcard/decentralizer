// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/matchmaking.proto

#include "pb/matchmaking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace pb {
class SessionInfo_DetailsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionInfo_DetailsEntry_DoNotUse>
      _instance;
} _SessionInfo_DetailsEntry_DoNotUse_default_instance_;
class SessionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionInfo>
      _instance;
} _SessionInfo_default_instance_;
class DNSessionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNSessionResponse>
      _instance;
} _DNSessionResponse_default_instance_;
class DNSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNSessionRequest>
      _instance;
} _DNSessionRequest_default_instance_;
class RPCUpsertSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCUpsertSessionRequest>
      _instance;
} _RPCUpsertSessionRequest_default_instance_;
class RPCUpsertSessionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCUpsertSessionResponse>
      _instance;
} _RPCUpsertSessionResponse_default_instance_;
class RPCGetSessionsRequest_DetailsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetSessionsRequest_DetailsEntry_DoNotUse>
      _instance;
} _RPCGetSessionsRequest_DetailsEntry_DoNotUse_default_instance_;
class RPCGetSessionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetSessionsRequest>
      _instance;
} _RPCGetSessionsRequest_default_instance_;
class RPCGetSessionsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetSessionsResponse>
      _instance;
} _RPCGetSessionsResponse_default_instance_;
class RPCDeleteSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCDeleteSessionRequest>
      _instance;
} _RPCDeleteSessionRequest_default_instance_;
class RPCDeleteSessionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCDeleteSessionResponse>
      _instance;
} _RPCDeleteSessionResponse_default_instance_;
}  // namespace pb
namespace protobuf_pb_2fmatchmaking_2eproto {
void InitDefaultsSessionInfo_DetailsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_SessionInfo_DetailsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::SessionInfo_DetailsEntry_DoNotUse();
  }
  ::pb::SessionInfo_DetailsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSessionInfo_DetailsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSessionInfo_DetailsEntry_DoNotUseImpl);
}

void InitDefaultsSessionInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSessionInfo_DetailsEntry_DoNotUse();
  {
    void* ptr = &::pb::_SessionInfo_default_instance_;
    new (ptr) ::pb::SessionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SessionInfo::InitAsDefaultInstance();
}

void InitDefaultsSessionInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSessionInfoImpl);
}

void InitDefaultsDNSessionResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSessionInfo();
  {
    void* ptr = &::pb::_DNSessionResponse_default_instance_;
    new (ptr) ::pb::DNSessionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DNSessionResponse::InitAsDefaultInstance();
}

void InitDefaultsDNSessionResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDNSessionResponseImpl);
}

void InitDefaultsDNSessionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_DNSessionRequest_default_instance_;
    new (ptr) ::pb::DNSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DNSessionRequest::InitAsDefaultInstance();
}

void InitDefaultsDNSessionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDNSessionRequestImpl);
}

void InitDefaultsRPCUpsertSessionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSessionInfo();
  {
    void* ptr = &::pb::_RPCUpsertSessionRequest_default_instance_;
    new (ptr) ::pb::RPCUpsertSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCUpsertSessionRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCUpsertSessionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCUpsertSessionRequestImpl);
}

void InitDefaultsRPCUpsertSessionResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCUpsertSessionResponse_default_instance_;
    new (ptr) ::pb::RPCUpsertSessionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCUpsertSessionResponse::InitAsDefaultInstance();
}

void InitDefaultsRPCUpsertSessionResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCUpsertSessionResponseImpl);
}

void InitDefaultsRPCGetSessionsRequest_DetailsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCGetSessionsRequest_DetailsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::RPCGetSessionsRequest_DetailsEntry_DoNotUse();
  }
  ::pb::RPCGetSessionsRequest_DetailsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsRPCGetSessionsRequest_DetailsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetSessionsRequest_DetailsEntry_DoNotUseImpl);
}

void InitDefaultsRPCGetSessionsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionsRequest_DetailsEntry_DoNotUse();
  {
    void* ptr = &::pb::_RPCGetSessionsRequest_default_instance_;
    new (ptr) ::pb::RPCGetSessionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetSessionsRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCGetSessionsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetSessionsRequestImpl);
}

void InitDefaultsRPCGetSessionsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSessionInfo();
  {
    void* ptr = &::pb::_RPCGetSessionsResponse_default_instance_;
    new (ptr) ::pb::RPCGetSessionsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetSessionsResponse::InitAsDefaultInstance();
}

void InitDefaultsRPCGetSessionsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetSessionsResponseImpl);
}

void InitDefaultsRPCDeleteSessionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCDeleteSessionRequest_default_instance_;
    new (ptr) ::pb::RPCDeleteSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCDeleteSessionRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCDeleteSessionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCDeleteSessionRequestImpl);
}

void InitDefaultsRPCDeleteSessionResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCDeleteSessionResponse_default_instance_;
    new (ptr) ::pb::RPCDeleteSessionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCDeleteSessionResponse::InitAsDefaultInstance();
}

void InitDefaultsRPCDeleteSessionResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCDeleteSessionResponseImpl);
}

}  // namespace protobuf_pb_2fmatchmaking_2eproto
namespace pb {

// ===================================================================

SessionInfo_DetailsEntry_DoNotUse::SessionInfo_DetailsEntry_DoNotUse() {}
SessionInfo_DetailsEntry_DoNotUse::SessionInfo_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SessionInfo_DetailsEntry_DoNotUse::MergeFrom(const SessionInfo_DetailsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void SessionInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionInfo::kDIdFieldNumber;
const int SessionInfo::kPIdFieldNumber;
const int SessionInfo::kSessionIdFieldNumber;
const int SessionInfo::kTypeFieldNumber;
const int SessionInfo::kNameFieldNumber;
const int SessionInfo::kAddressFieldNumber;
const int SessionInfo::kPortFieldNumber;
const int SessionInfo::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionInfo::SessionInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSessionInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SessionInfo)
}
SessionInfo::SessionInfo(const SessionInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_.MergeFrom(from.details_);
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pid().size() > 0) {
    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&did_, &from.did_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&did_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:pb.SessionInfo)
}

void SessionInfo::SharedCtor() {
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&did_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&did_)) + sizeof(port_));
  _cached_size_ = 0;
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:pb.SessionInfo)
  SharedDtor();
}

void SessionInfo::SharedDtor() {
  pid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionInfo& SessionInfo::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSessionInfo();
  return *internal_default_instance();
}

SessionInfo* SessionInfo::New(::google::protobuf::Arena* arena) const {
  SessionInfo* n = new SessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.Clear();
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&did_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&did_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.SessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 dId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &did_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pid().data(), static_cast<int>(this->pid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SessionInfo.pId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sessionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SessionInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 address = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> details = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          SessionInfo_DetailsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              SessionInfo_DetailsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&details_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SessionInfo.DetailsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SessionInfo.DetailsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SessionInfo)
  return false;
#undef DO_
}

void SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dId = 1;
  if (this->did() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->did(), output);
  }

  // string pId = 2;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), static_cast<int>(this->pid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SessionInfo.pId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pid(), output);
  }

  // uint64 sessionId = 3;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sessionid(), output);
  }

  // uint64 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->type(), output);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SessionInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // uint64 address = 6;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->address(), output);
  }

  // uint32 port = 7;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->port(), output);
  }

  // map<string, string> details = 8;
  if (!this->details().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.SessionInfo.DetailsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.SessionInfo.DetailsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->details().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->details().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SessionInfo_DetailsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(details_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SessionInfo_DetailsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it) {
        entry.reset(details_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.SessionInfo)
}

size_t SessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SessionInfo)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // map<string, string> details = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->details_size());
  {
    ::google::protobuf::scoped_ptr<SessionInfo_DetailsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->details().begin();
        it != this->details().end(); ++it) {
      entry.reset(details_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string pId = 2;
  if (this->pid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pid());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 dId = 1;
  if (this->did() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->did());
  }

  // uint64 sessionId = 3;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  // uint64 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());
  }

  // uint64 address = 6;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->address());
  }

  // uint32 port = 7;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionInfo*>(&from));
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
  if (from.pid().size() > 0) {

    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.did() != 0) {
    set_did(from.did());
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.address() != 0) {
    set_address(from.address());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {
  return true;
}

void SessionInfo::Swap(SessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionInfo::InternalSwap(SessionInfo* other) {
  using std::swap;
  details_.Swap(&other->details_);
  pid_.Swap(&other->pid_);
  name_.Swap(&other->name_);
  swap(did_, other->did_);
  swap(sessionid_, other->sessionid_);
  swap(type_, other->type_);
  swap(address_, other->address_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SessionInfo::GetTypeName() const {
  return "pb.SessionInfo";
}


// ===================================================================

void DNSessionResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSessionResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSessionResponse::DNSessionResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNSessionResponse)
}
DNSessionResponse::DNSessionResponse(const DNSessionResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.DNSessionResponse)
}

void DNSessionResponse::SharedCtor() {
  _cached_size_ = 0;
}

DNSessionResponse::~DNSessionResponse() {
  // @@protoc_insertion_point(destructor:pb.DNSessionResponse)
  SharedDtor();
}

void DNSessionResponse::SharedDtor() {
}

void DNSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DNSessionResponse& DNSessionResponse::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionResponse();
  return *internal_default_instance();
}

DNSessionResponse* DNSessionResponse::New(::google::protobuf::Arena* arena) const {
  DNSessionResponse* n = new DNSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear();
}

bool DNSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.DNSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.SessionInfo results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNSessionResponse)
  return false;
#undef DO_
}

void DNSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.SessionInfo results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->results(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.DNSessionResponse)
}

size_t DNSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNSessionResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .pb.SessionInfo results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSessionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DNSessionResponse*>(&from));
}

void DNSessionResponse::MergeFrom(const DNSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void DNSessionResponse::CopyFrom(const DNSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSessionResponse::IsInitialized() const {
  return true;
}

void DNSessionResponse::Swap(DNSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSessionResponse::InternalSwap(DNSessionResponse* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DNSessionResponse::GetTypeName() const {
  return "pb.DNSessionResponse";
}


// ===================================================================

void DNSessionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSessionRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSessionRequest::DNSessionRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNSessionRequest)
}
DNSessionRequest::DNSessionRequest(const DNSessionRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb.DNSessionRequest)
}

void DNSessionRequest::SharedCtor() {
  type_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

DNSessionRequest::~DNSessionRequest() {
  // @@protoc_insertion_point(destructor:pb.DNSessionRequest)
  SharedDtor();
}

void DNSessionRequest::SharedDtor() {
}

void DNSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DNSessionRequest& DNSessionRequest::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionRequest();
  return *internal_default_instance();
}

DNSessionRequest* DNSessionRequest::New(::google::protobuf::Arena* arena) const {
  DNSessionRequest* n = new DNSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool DNSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.DNSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNSessionRequest)
  return false;
#undef DO_
}

void DNSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.DNSessionRequest)
}

size_t DNSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNSessionRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint64 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSessionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DNSessionRequest*>(&from));
}

void DNSessionRequest::MergeFrom(const DNSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DNSessionRequest::CopyFrom(const DNSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSessionRequest::IsInitialized() const {
  return true;
}

void DNSessionRequest::Swap(DNSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSessionRequest::InternalSwap(DNSessionRequest* other) {
  using std::swap;
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DNSessionRequest::GetTypeName() const {
  return "pb.DNSessionRequest";
}


// ===================================================================

void RPCUpsertSessionRequest::InitAsDefaultInstance() {
  ::pb::_RPCUpsertSessionRequest_default_instance_._instance.get_mutable()->info_ = const_cast< ::pb::SessionInfo*>(
      ::pb::SessionInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCUpsertSessionRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCUpsertSessionRequest::RPCUpsertSessionRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCUpsertSessionRequest)
}
RPCUpsertSessionRequest::RPCUpsertSessionRequest(const RPCUpsertSessionRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::pb::SessionInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCUpsertSessionRequest)
}

void RPCUpsertSessionRequest::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

RPCUpsertSessionRequest::~RPCUpsertSessionRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCUpsertSessionRequest)
  SharedDtor();
}

void RPCUpsertSessionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void RPCUpsertSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCUpsertSessionRequest& RPCUpsertSessionRequest::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionRequest();
  return *internal_default_instance();
}

RPCUpsertSessionRequest* RPCUpsertSessionRequest::New(::google::protobuf::Arena* arena) const {
  RPCUpsertSessionRequest* n = new RPCUpsertSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCUpsertSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCUpsertSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool RPCUpsertSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.RPCUpsertSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.SessionInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCUpsertSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCUpsertSessionRequest)
  return false;
#undef DO_
}

void RPCUpsertSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCUpsertSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.SessionInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->info_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.RPCUpsertSessionRequest)
}

size_t RPCUpsertSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCUpsertSessionRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .pb.SessionInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCUpsertSessionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCUpsertSessionRequest*>(&from));
}

void RPCUpsertSessionRequest::MergeFrom(const RPCUpsertSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCUpsertSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::pb::SessionInfo::MergeFrom(from.info());
  }
}

void RPCUpsertSessionRequest::CopyFrom(const RPCUpsertSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCUpsertSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCUpsertSessionRequest::IsInitialized() const {
  return true;
}

void RPCUpsertSessionRequest::Swap(RPCUpsertSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCUpsertSessionRequest::InternalSwap(RPCUpsertSessionRequest* other) {
  using std::swap;
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCUpsertSessionRequest::GetTypeName() const {
  return "pb.RPCUpsertSessionRequest";
}


// ===================================================================

void RPCUpsertSessionResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCUpsertSessionResponse::kResultFieldNumber;
const int RPCUpsertSessionResponse::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCUpsertSessionResponse::RPCUpsertSessionResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCUpsertSessionResponse)
}
RPCUpsertSessionResponse::RPCUpsertSessionResponse(const RPCUpsertSessionResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:pb.RPCUpsertSessionResponse)
}

void RPCUpsertSessionResponse::SharedCtor() {
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(result_));
  _cached_size_ = 0;
}

RPCUpsertSessionResponse::~RPCUpsertSessionResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCUpsertSessionResponse)
  SharedDtor();
}

void RPCUpsertSessionResponse::SharedDtor() {
}

void RPCUpsertSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCUpsertSessionResponse& RPCUpsertSessionResponse::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionResponse();
  return *internal_default_instance();
}

RPCUpsertSessionResponse* RPCUpsertSessionResponse::New(::google::protobuf::Arena* arena) const {
  RPCUpsertSessionResponse* n = new RPCUpsertSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCUpsertSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCUpsertSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

bool RPCUpsertSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.RPCUpsertSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sessionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCUpsertSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCUpsertSessionResponse)
  return false;
#undef DO_
}

void RPCUpsertSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCUpsertSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sessionid(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.RPCUpsertSessionResponse)
}

size_t RPCUpsertSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCUpsertSessionResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint64 sessionId = 2;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCUpsertSessionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCUpsertSessionResponse*>(&from));
}

void RPCUpsertSessionResponse::MergeFrom(const RPCUpsertSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCUpsertSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RPCUpsertSessionResponse::CopyFrom(const RPCUpsertSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCUpsertSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCUpsertSessionResponse::IsInitialized() const {
  return true;
}

void RPCUpsertSessionResponse::Swap(RPCUpsertSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCUpsertSessionResponse::InternalSwap(RPCUpsertSessionResponse* other) {
  using std::swap;
  swap(sessionid_, other->sessionid_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCUpsertSessionResponse::GetTypeName() const {
  return "pb.RPCUpsertSessionResponse";
}


// ===================================================================

RPCGetSessionsRequest_DetailsEntry_DoNotUse::RPCGetSessionsRequest_DetailsEntry_DoNotUse() {}
RPCGetSessionsRequest_DetailsEntry_DoNotUse::RPCGetSessionsRequest_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void RPCGetSessionsRequest_DetailsEntry_DoNotUse::MergeFrom(const RPCGetSessionsRequest_DetailsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void RPCGetSessionsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetSessionsRequest::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetSessionsRequest::RPCGetSessionsRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetSessionsRequest)
}
RPCGetSessionsRequest::RPCGetSessionsRequest(const RPCGetSessionsRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_.MergeFrom(from.details_);
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetSessionsRequest)
}

void RPCGetSessionsRequest::SharedCtor() {
  _cached_size_ = 0;
}

RPCGetSessionsRequest::~RPCGetSessionsRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCGetSessionsRequest)
  SharedDtor();
}

void RPCGetSessionsRequest::SharedDtor() {
}

void RPCGetSessionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCGetSessionsRequest& RPCGetSessionsRequest::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionsRequest();
  return *internal_default_instance();
}

RPCGetSessionsRequest* RPCGetSessionsRequest::New(::google::protobuf::Arena* arena) const {
  RPCGetSessionsRequest* n = new RPCGetSessionsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetSessionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetSessionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.Clear();
  _internal_metadata_.Clear();
}

bool RPCGetSessionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.RPCGetSessionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> details = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          RPCGetSessionsRequest_DetailsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              RPCGetSessionsRequest_DetailsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&details_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetSessionsRequest.DetailsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetSessionsRequest.DetailsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetSessionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetSessionsRequest)
  return false;
#undef DO_
}

void RPCGetSessionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetSessionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> details = 1;
  if (!this->details().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.RPCGetSessionsRequest.DetailsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.RPCGetSessionsRequest.DetailsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->details().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->details().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<RPCGetSessionsRequest_DetailsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(details_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RPCGetSessionsRequest_DetailsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it) {
        entry.reset(details_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.RPCGetSessionsRequest)
}

size_t RPCGetSessionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetSessionsRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // map<string, string> details = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->details_size());
  {
    ::google::protobuf::scoped_ptr<RPCGetSessionsRequest_DetailsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->details().begin();
        it != this->details().end(); ++it) {
      entry.reset(details_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetSessionsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCGetSessionsRequest*>(&from));
}

void RPCGetSessionsRequest::MergeFrom(const RPCGetSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
}

void RPCGetSessionsRequest::CopyFrom(const RPCGetSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetSessionsRequest::IsInitialized() const {
  return true;
}

void RPCGetSessionsRequest::Swap(RPCGetSessionsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetSessionsRequest::InternalSwap(RPCGetSessionsRequest* other) {
  using std::swap;
  details_.Swap(&other->details_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCGetSessionsRequest::GetTypeName() const {
  return "pb.RPCGetSessionsRequest";
}


// ===================================================================

void RPCGetSessionsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetSessionsResponse::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetSessionsResponse::RPCGetSessionsResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetSessionsResponse)
}
RPCGetSessionsResponse::RPCGetSessionsResponse(const RPCGetSessionsResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      sessions_(from.sessions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetSessionsResponse)
}

void RPCGetSessionsResponse::SharedCtor() {
  _cached_size_ = 0;
}

RPCGetSessionsResponse::~RPCGetSessionsResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCGetSessionsResponse)
  SharedDtor();
}

void RPCGetSessionsResponse::SharedDtor() {
}

void RPCGetSessionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCGetSessionsResponse& RPCGetSessionsResponse::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionsResponse();
  return *internal_default_instance();
}

RPCGetSessionsResponse* RPCGetSessionsResponse::New(::google::protobuf::Arena* arena) const {
  RPCGetSessionsResponse* n = new RPCGetSessionsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetSessionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetSessionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  _internal_metadata_.Clear();
}

bool RPCGetSessionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.RPCGetSessionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.SessionInfo sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetSessionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetSessionsResponse)
  return false;
#undef DO_
}

void RPCGetSessionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetSessionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.SessionInfo sessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sessions(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.RPCGetSessionsResponse)
}

size_t RPCGetSessionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetSessionsResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .pb.SessionInfo sessions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sessions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetSessionsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCGetSessionsResponse*>(&from));
}

void RPCGetSessionsResponse::MergeFrom(const RPCGetSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
}

void RPCGetSessionsResponse::CopyFrom(const RPCGetSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetSessionsResponse::IsInitialized() const {
  return true;
}

void RPCGetSessionsResponse::Swap(RPCGetSessionsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetSessionsResponse::InternalSwap(RPCGetSessionsResponse* other) {
  using std::swap;
  sessions_.InternalSwap(&other->sessions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCGetSessionsResponse::GetTypeName() const {
  return "pb.RPCGetSessionsResponse";
}


// ===================================================================

void RPCDeleteSessionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCDeleteSessionRequest::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCDeleteSessionRequest::RPCDeleteSessionRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCDeleteSessionRequest)
}
RPCDeleteSessionRequest::RPCDeleteSessionRequest(const RPCDeleteSessionRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_ = from.sessionid_;
  // @@protoc_insertion_point(copy_constructor:pb.RPCDeleteSessionRequest)
}

void RPCDeleteSessionRequest::SharedCtor() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RPCDeleteSessionRequest::~RPCDeleteSessionRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCDeleteSessionRequest)
  SharedDtor();
}

void RPCDeleteSessionRequest::SharedDtor() {
}

void RPCDeleteSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCDeleteSessionRequest& RPCDeleteSessionRequest::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionRequest();
  return *internal_default_instance();
}

RPCDeleteSessionRequest* RPCDeleteSessionRequest::New(::google::protobuf::Arena* arena) const {
  RPCDeleteSessionRequest* n = new RPCDeleteSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCDeleteSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCDeleteSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RPCDeleteSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.RPCDeleteSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCDeleteSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCDeleteSessionRequest)
  return false;
#undef DO_
}

void RPCDeleteSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCDeleteSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.RPCDeleteSessionRequest)
}

size_t RPCDeleteSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCDeleteSessionRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCDeleteSessionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCDeleteSessionRequest*>(&from));
}

void RPCDeleteSessionRequest::MergeFrom(const RPCDeleteSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCDeleteSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
}

void RPCDeleteSessionRequest::CopyFrom(const RPCDeleteSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCDeleteSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCDeleteSessionRequest::IsInitialized() const {
  return true;
}

void RPCDeleteSessionRequest::Swap(RPCDeleteSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCDeleteSessionRequest::InternalSwap(RPCDeleteSessionRequest* other) {
  using std::swap;
  swap(sessionid_, other->sessionid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCDeleteSessionRequest::GetTypeName() const {
  return "pb.RPCDeleteSessionRequest";
}


// ===================================================================

void RPCDeleteSessionResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCDeleteSessionResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCDeleteSessionResponse::RPCDeleteSessionResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCDeleteSessionResponse)
}
RPCDeleteSessionResponse::RPCDeleteSessionResponse(const RPCDeleteSessionResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pb.RPCDeleteSessionResponse)
}

void RPCDeleteSessionResponse::SharedCtor() {
  result_ = false;
  _cached_size_ = 0;
}

RPCDeleteSessionResponse::~RPCDeleteSessionResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCDeleteSessionResponse)
  SharedDtor();
}

void RPCDeleteSessionResponse::SharedDtor() {
}

void RPCDeleteSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCDeleteSessionResponse& RPCDeleteSessionResponse::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionResponse();
  return *internal_default_instance();
}

RPCDeleteSessionResponse* RPCDeleteSessionResponse::New(::google::protobuf::Arena* arena) const {
  RPCDeleteSessionResponse* n = new RPCDeleteSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCDeleteSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCDeleteSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear();
}

bool RPCDeleteSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.RPCDeleteSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCDeleteSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCDeleteSessionResponse)
  return false;
#undef DO_
}

void RPCDeleteSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCDeleteSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.RPCDeleteSessionResponse)
}

size_t RPCDeleteSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCDeleteSessionResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCDeleteSessionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCDeleteSessionResponse*>(&from));
}

void RPCDeleteSessionResponse::MergeFrom(const RPCDeleteSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCDeleteSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RPCDeleteSessionResponse::CopyFrom(const RPCDeleteSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCDeleteSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCDeleteSessionResponse::IsInitialized() const {
  return true;
}

void RPCDeleteSessionResponse::Swap(RPCDeleteSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCDeleteSessionResponse::InternalSwap(RPCDeleteSessionResponse* other) {
  using std::swap;
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCDeleteSessionResponse::GetTypeName() const {
  return "pb.RPCDeleteSessionResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb

// @@protoc_insertion_point(global_scope)
