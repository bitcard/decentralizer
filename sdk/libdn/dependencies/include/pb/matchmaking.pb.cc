// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/matchmaking.proto

#include "pb/matchmaking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace pb {
class Session_DetailsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Session_DetailsEntry_DoNotUse>
      _instance;
} _Session_DetailsEntry_DoNotUse_default_instance_;
class SessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Session>
      _instance;
} _Session_default_instance_;
class DNSessionsRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNSessionsRecord>
      _instance;
} _DNSessionsRecord_default_instance_;
class DNSessionsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNSessionsResponse>
      _instance;
} _DNSessionsResponse_default_instance_;
class DNSessionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNSessionsRequest>
      _instance;
} _DNSessionsRequest_default_instance_;
class DNSessionidsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNSessionidsResponse>
      _instance;
} _DNSessionidsResponse_default_instance_;
class DNSessionidsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNSessionidsRequest>
      _instance;
} _DNSessionidsRequest_default_instance_;
class RPCUpsertSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCUpsertSessionRequest>
      _instance;
} _RPCUpsertSessionRequest_default_instance_;
class RPCUpsertSessionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCUpsertSessionResponse>
      _instance;
} _RPCUpsertSessionResponse_default_instance_;
class RPCDeleteSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCDeleteSessionRequest>
      _instance;
} _RPCDeleteSessionRequest_default_instance_;
class RPCDeleteSessionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCDeleteSessionResponse>
      _instance;
} _RPCDeleteSessionResponse_default_instance_;
class RPCGetSessionIdsByDetailsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetSessionIdsByDetailsRequest>
      _instance;
} _RPCGetSessionIdsByDetailsRequest_default_instance_;
class RPCGetSessionIdsByPeerIdsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetSessionIdsByPeerIdsRequest>
      _instance;
} _RPCGetSessionIdsByPeerIdsRequest_default_instance_;
class RPCGetSessionIdsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetSessionIdsResponse>
      _instance;
} _RPCGetSessionIdsResponse_default_instance_;
class RPCGetSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetSessionRequest>
      _instance;
} _RPCGetSessionRequest_default_instance_;
class RPCGetSessionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetSessionResponse>
      _instance;
} _RPCGetSessionResponse_default_instance_;
}  // namespace pb
namespace protobuf_pb_2fmatchmaking_2eproto {
void InitDefaultsSession_DetailsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_Session_DetailsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::Session_DetailsEntry_DoNotUse();
  }
  ::pb::Session_DetailsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSession_DetailsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSession_DetailsEntry_DoNotUseImpl);
}

void InitDefaultsSessionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSession_DetailsEntry_DoNotUse();
  {
    void* ptr = &::pb::_Session_default_instance_;
    new (ptr) ::pb::Session();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Session::InitAsDefaultInstance();
}

void InitDefaultsSession() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSessionImpl);
}

void InitDefaultsDNSessionsRecordImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSession();
  {
    void* ptr = &::pb::_DNSessionsRecord_default_instance_;
    new (ptr) ::pb::DNSessionsRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DNSessionsRecord::InitAsDefaultInstance();
}

void InitDefaultsDNSessionsRecord() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDNSessionsRecordImpl);
}

void InitDefaultsDNSessionsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSession();
  {
    void* ptr = &::pb::_DNSessionsResponse_default_instance_;
    new (ptr) ::pb::DNSessionsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DNSessionsResponse::InitAsDefaultInstance();
}

void InitDefaultsDNSessionsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDNSessionsResponseImpl);
}

void InitDefaultsDNSessionsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_DNSessionsRequest_default_instance_;
    new (ptr) ::pb::DNSessionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DNSessionsRequest::InitAsDefaultInstance();
}

void InitDefaultsDNSessionsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDNSessionsRequestImpl);
}

void InitDefaultsDNSessionidsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_DNSessionidsResponse_default_instance_;
    new (ptr) ::pb::DNSessionidsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DNSessionidsResponse::InitAsDefaultInstance();
}

void InitDefaultsDNSessionidsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDNSessionidsResponseImpl);
}

void InitDefaultsDNSessionidsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_DNSessionidsRequest_default_instance_;
    new (ptr) ::pb::DNSessionidsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DNSessionidsRequest::InitAsDefaultInstance();
}

void InitDefaultsDNSessionidsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDNSessionidsRequestImpl);
}

void InitDefaultsRPCUpsertSessionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSession();
  {
    void* ptr = &::pb::_RPCUpsertSessionRequest_default_instance_;
    new (ptr) ::pb::RPCUpsertSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCUpsertSessionRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCUpsertSessionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCUpsertSessionRequestImpl);
}

void InitDefaultsRPCUpsertSessionResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCUpsertSessionResponse_default_instance_;
    new (ptr) ::pb::RPCUpsertSessionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCUpsertSessionResponse::InitAsDefaultInstance();
}

void InitDefaultsRPCUpsertSessionResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCUpsertSessionResponseImpl);
}

void InitDefaultsRPCDeleteSessionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCDeleteSessionRequest_default_instance_;
    new (ptr) ::pb::RPCDeleteSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCDeleteSessionRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCDeleteSessionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCDeleteSessionRequestImpl);
}

void InitDefaultsRPCDeleteSessionResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCDeleteSessionResponse_default_instance_;
    new (ptr) ::pb::RPCDeleteSessionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCDeleteSessionResponse::InitAsDefaultInstance();
}

void InitDefaultsRPCDeleteSessionResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCDeleteSessionResponseImpl);
}

void InitDefaultsRPCGetSessionIdsByDetailsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCGetSessionIdsByDetailsRequest_default_instance_;
    new (ptr) ::pb::RPCGetSessionIdsByDetailsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetSessionIdsByDetailsRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCGetSessionIdsByDetailsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetSessionIdsByDetailsRequestImpl);
}

void InitDefaultsRPCGetSessionIdsByPeerIdsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCGetSessionIdsByPeerIdsRequest_default_instance_;
    new (ptr) ::pb::RPCGetSessionIdsByPeerIdsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetSessionIdsByPeerIdsRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCGetSessionIdsByPeerIdsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetSessionIdsByPeerIdsRequestImpl);
}

void InitDefaultsRPCGetSessionIdsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCGetSessionIdsResponse_default_instance_;
    new (ptr) ::pb::RPCGetSessionIdsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetSessionIdsResponse::InitAsDefaultInstance();
}

void InitDefaultsRPCGetSessionIdsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetSessionIdsResponseImpl);
}

void InitDefaultsRPCGetSessionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCGetSessionRequest_default_instance_;
    new (ptr) ::pb::RPCGetSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetSessionRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCGetSessionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetSessionRequestImpl);
}

void InitDefaultsRPCGetSessionResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSession();
  {
    void* ptr = &::pb::_RPCGetSessionResponse_default_instance_;
    new (ptr) ::pb::RPCGetSessionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetSessionResponse::InitAsDefaultInstance();
}

void InitDefaultsRPCGetSessionResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetSessionResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[16];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session_DetailsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session_DetailsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session_DetailsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session_DetailsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session, dnid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session, details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::Session, published_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionsRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionsRecord, published_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionsRecord, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionsResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionsRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionsRequest, sessionids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionidsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionidsResponse, sessionids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionidsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::DNSessionidsRequest, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCUpsertSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCUpsertSessionRequest, session_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCUpsertSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCUpsertSessionResponse, sessionid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCDeleteSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCDeleteSessionRequest, sessionid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCDeleteSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCDeleteSessionResponse, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionIdsByDetailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionIdsByDetailsRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionIdsByDetailsRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionIdsByDetailsRequest, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionIdsByPeerIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionIdsByPeerIdsRequest, peerids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionIdsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionIdsResponse, sessionids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionRequest, sessionid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pb::RPCGetSessionResponse, session_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pb::Session_DetailsEntry_DoNotUse)},
  { 9, -1, sizeof(::pb::Session)},
  { 23, -1, sizeof(::pb::DNSessionsRecord)},
  { 30, -1, sizeof(::pb::DNSessionsResponse)},
  { 36, -1, sizeof(::pb::DNSessionsRequest)},
  { 43, -1, sizeof(::pb::DNSessionidsResponse)},
  { 49, -1, sizeof(::pb::DNSessionidsRequest)},
  { 55, -1, sizeof(::pb::RPCUpsertSessionRequest)},
  { 61, -1, sizeof(::pb::RPCUpsertSessionResponse)},
  { 67, -1, sizeof(::pb::RPCDeleteSessionRequest)},
  { 73, -1, sizeof(::pb::RPCDeleteSessionResponse)},
  { 79, -1, sizeof(::pb::RPCGetSessionIdsByDetailsRequest)},
  { 87, -1, sizeof(::pb::RPCGetSessionIdsByPeerIdsRequest)},
  { 93, -1, sizeof(::pb::RPCGetSessionIdsResponse)},
  { 99, -1, sizeof(::pb::RPCGetSessionRequest)},
  { 105, -1, sizeof(::pb::RPCGetSessionResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Session_DetailsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Session_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_DNSessionsRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_DNSessionsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_DNSessionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_DNSessionidsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_DNSessionidsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCUpsertSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCUpsertSessionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCDeleteSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCDeleteSessionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetSessionIdsByDetailsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetSessionIdsByPeerIdsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetSessionIdsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RPCGetSessionResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "pb/matchmaking.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024pb/matchmaking.proto\022\002pb\"\340\001\n\007Session\022\013"
      "\n\003pId\030\001 \001(\t\022\014\n\004dnId\030\002 \001(\004\022\021\n\tsessionId\030\003"
      " \001(\004\022\014\n\004type\030\004 \001(\004\022\014\n\004name\030\005 \001(\t\022\017\n\007addr"
      "ess\030\006 \001(\r\022\014\n\004port\030\007 \001(\r\022)\n\007details\030\010 \003(\013"
      "2\030.pb.Session.DetailsEntry\022\021\n\tpublished\030"
      "\t \001(\004\032.\n\014DetailsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\t:\0028\001\"C\n\020DNSessionsRecord\022\021\n\tpub"
      "lished\030\001 \001(\004\022\034\n\007results\030\002 \003(\0132\013.pb.Sessi"
      "on\"2\n\022DNSessionsResponse\022\034\n\007results\030\001 \003("
      "\0132\013.pb.Session\"5\n\021DNSessionsRequest\022\014\n\004t"
      "ype\030\001 \001(\004\022\022\n\nsessionIds\030\002 \003(\004\"*\n\024DNSessi"
      "onidsResponse\022\022\n\nsessionIds\030\001 \003(\004\"#\n\023DNS"
      "essionidsRequest\022\014\n\004type\030\001 \001(\004\"7\n\027RPCUps"
      "ertSessionRequest\022\034\n\007session\030\001 \001(\0132\013.pb."
      "Session\"-\n\030RPCUpsertSessionResponse\022\021\n\ts"
      "essionId\030\001 \001(\004\",\n\027RPCDeleteSessionReques"
      "t\022\021\n\tsessionId\030\001 \001(\004\"*\n\030RPCDeleteSession"
      "Response\022\016\n\006result\030\001 \001(\010\"L\n RPCGetSessio"
      "nIdsByDetailsRequest\022\014\n\004type\030\001 \001(\004\022\013\n\003ke"
      "y\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"3\n RPCGetSessionI"
      "dsByPeerIdsRequest\022\017\n\007peerIds\030\001 \003(\t\".\n\030R"
      "PCGetSessionIdsResponse\022\022\n\nsessionIds\030\001 "
      "\003(\004\")\n\024RPCGetSessionRequest\022\021\n\tsessionId"
      "\030\001 \001(\004\"5\n\025RPCGetSessionResponse\022\034\n\007sessi"
      "on\030\001 \001(\0132\013.pb.Sessionb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 989);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb/matchmaking.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pb_2fmatchmaking_2eproto
namespace pb {

// ===================================================================

Session_DetailsEntry_DoNotUse::Session_DetailsEntry_DoNotUse() {}
Session_DetailsEntry_DoNotUse::Session_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Session_DetailsEntry_DoNotUse::MergeFrom(const Session_DetailsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Session_DetailsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[0];
}
void Session_DetailsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Session::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session::kPIdFieldNumber;
const int Session::kDnIdFieldNumber;
const int Session::kSessionIdFieldNumber;
const int Session::kTypeFieldNumber;
const int Session::kNameFieldNumber;
const int Session::kAddressFieldNumber;
const int Session::kPortFieldNumber;
const int Session::kDetailsFieldNumber;
const int Session::kPublishedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session::Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSession();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Session)
}
Session::Session(const Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_.MergeFrom(from.details_);
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pid().size() > 0) {
    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&dnid_, &from.dnid_,
    static_cast<size_t>(reinterpret_cast<char*>(&published_) -
    reinterpret_cast<char*>(&dnid_)) + sizeof(published_));
  // @@protoc_insertion_point(copy_constructor:pb.Session)
}

void Session::SharedCtor() {
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dnid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&published_) -
      reinterpret_cast<char*>(&dnid_)) + sizeof(published_));
  _cached_size_ = 0;
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:pb.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  pid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Session& Session::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSession();
  return *internal_default_instance();
}

Session* Session::New(::google::protobuf::Arena* arena) const {
  Session* n = new Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.Clear();
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dnid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&published_) -
      reinterpret_cast<char*>(&dnid_)) + sizeof(published_));
  _internal_metadata_.Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pid().data(), static_cast<int>(this->pid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Session.pId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dnId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sessionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Session.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 address = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> details = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          Session_DetailsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Session_DetailsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&details_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Session.DetailsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Session.DetailsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 published = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &published_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pId = 1;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), static_cast<int>(this->pid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Session.pId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pid(), output);
  }

  // uint64 dnId = 2;
  if (this->dnid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dnid(), output);
  }

  // uint64 sessionId = 3;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sessionid(), output);
  }

  // uint64 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->type(), output);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Session.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // uint32 address = 6;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->address(), output);
  }

  // uint32 port = 7;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->port(), output);
  }

  // map<string, string> details = 8;
  if (!this->details().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Session.DetailsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Session.DetailsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->details().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->details().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Session_DetailsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(details_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Session_DetailsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it) {
        entry.reset(details_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint64 published = 9;
  if (this->published() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->published(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Session)
}

::google::protobuf::uint8* Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pId = 1;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), static_cast<int>(this->pid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Session.pId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pid(), target);
  }

  // uint64 dnId = 2;
  if (this->dnid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dnid(), target);
  }

  // uint64 sessionId = 3;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sessionid(), target);
  }

  // uint64 type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->type(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Session.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // uint32 address = 6;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->address(), target);
  }

  // uint32 port = 7;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->port(), target);
  }

  // map<string, string> details = 8;
  if (!this->details().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Session.DetailsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pb.Session.DetailsEntry.value");
      }
    };

    if (deterministic &&
        this->details().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->details().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Session_DetailsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(details_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Session_DetailsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->details().begin();
          it != this->details().end(); ++it) {
        entry.reset(details_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint64 published = 9;
  if (this->published() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->published(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Session)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> details = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->details_size());
  {
    ::google::protobuf::scoped_ptr<Session_DetailsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->details().begin();
        it != this->details().end(); ++it) {
      entry.reset(details_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string pId = 1;
  if (this->pid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pid());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 dnId = 2;
  if (this->dnid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dnid());
  }

  // uint64 sessionId = 3;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  // uint64 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());
  }

  // uint32 address = 6;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->address());
  }

  // uint32 port = 7;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint64 published = 9;
  if (this->published() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->published());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
  if (from.pid().size() > 0) {

    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.dnid() != 0) {
    set_dnid(from.dnid());
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.address() != 0) {
    set_address(from.address());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.published() != 0) {
    set_published(from.published());
  }
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::Swap(Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session::InternalSwap(Session* other) {
  using std::swap;
  details_.Swap(&other->details_);
  pid_.Swap(&other->pid_);
  name_.Swap(&other->name_);
  swap(dnid_, other->dnid_);
  swap(sessionid_, other->sessionid_);
  swap(type_, other->type_);
  swap(address_, other->address_);
  swap(port_, other->port_);
  swap(published_, other->published_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DNSessionsRecord::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSessionsRecord::kPublishedFieldNumber;
const int DNSessionsRecord::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSessionsRecord::DNSessionsRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionsRecord();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNSessionsRecord)
}
DNSessionsRecord::DNSessionsRecord(const DNSessionsRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  published_ = from.published_;
  // @@protoc_insertion_point(copy_constructor:pb.DNSessionsRecord)
}

void DNSessionsRecord::SharedCtor() {
  published_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

DNSessionsRecord::~DNSessionsRecord() {
  // @@protoc_insertion_point(destructor:pb.DNSessionsRecord)
  SharedDtor();
}

void DNSessionsRecord::SharedDtor() {
}

void DNSessionsRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSessionsRecord::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DNSessionsRecord& DNSessionsRecord::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionsRecord();
  return *internal_default_instance();
}

DNSessionsRecord* DNSessionsRecord::New(::google::protobuf::Arena* arena) const {
  DNSessionsRecord* n = new DNSessionsRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSessionsRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNSessionsRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  published_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool DNSessionsRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DNSessionsRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 published = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &published_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.Session results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNSessionsRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNSessionsRecord)
  return false;
#undef DO_
}

void DNSessionsRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNSessionsRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 published = 1;
  if (this->published() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->published(), output);
  }

  // repeated .pb.Session results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.DNSessionsRecord)
}

::google::protobuf::uint8* DNSessionsRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.DNSessionsRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 published = 1;
  if (this->published() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->published(), target);
  }

  // repeated .pb.Session results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DNSessionsRecord)
  return target;
}

size_t DNSessionsRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNSessionsRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.Session results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // uint64 published = 1;
  if (this->published() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->published());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSessionsRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DNSessionsRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSessionsRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSessionsRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DNSessionsRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DNSessionsRecord)
    MergeFrom(*source);
  }
}

void DNSessionsRecord::MergeFrom(const DNSessionsRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNSessionsRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.published() != 0) {
    set_published(from.published());
  }
}

void DNSessionsRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DNSessionsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSessionsRecord::CopyFrom(const DNSessionsRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNSessionsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSessionsRecord::IsInitialized() const {
  return true;
}

void DNSessionsRecord::Swap(DNSessionsRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSessionsRecord::InternalSwap(DNSessionsRecord* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  swap(published_, other->published_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSessionsRecord::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DNSessionsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSessionsResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSessionsResponse::DNSessionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNSessionsResponse)
}
DNSessionsResponse::DNSessionsResponse(const DNSessionsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.DNSessionsResponse)
}

void DNSessionsResponse::SharedCtor() {
  _cached_size_ = 0;
}

DNSessionsResponse::~DNSessionsResponse() {
  // @@protoc_insertion_point(destructor:pb.DNSessionsResponse)
  SharedDtor();
}

void DNSessionsResponse::SharedDtor() {
}

void DNSessionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSessionsResponse::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DNSessionsResponse& DNSessionsResponse::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionsResponse();
  return *internal_default_instance();
}

DNSessionsResponse* DNSessionsResponse::New(::google::protobuf::Arena* arena) const {
  DNSessionsResponse* n = new DNSessionsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSessionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNSessionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear();
}

bool DNSessionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DNSessionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Session results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNSessionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNSessionsResponse)
  return false;
#undef DO_
}

void DNSessionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNSessionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Session results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.DNSessionsResponse)
}

::google::protobuf::uint8* DNSessionsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.DNSessionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Session results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DNSessionsResponse)
  return target;
}

size_t DNSessionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNSessionsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.Session results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSessionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DNSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSessionsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSessionsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DNSessionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DNSessionsResponse)
    MergeFrom(*source);
  }
}

void DNSessionsResponse::MergeFrom(const DNSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void DNSessionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DNSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSessionsResponse::CopyFrom(const DNSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSessionsResponse::IsInitialized() const {
  return true;
}

void DNSessionsResponse::Swap(DNSessionsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSessionsResponse::InternalSwap(DNSessionsResponse* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSessionsResponse::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DNSessionsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSessionsRequest::kTypeFieldNumber;
const int DNSessionsRequest::kSessionIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSessionsRequest::DNSessionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNSessionsRequest)
}
DNSessionsRequest::DNSessionsRequest(const DNSessionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sessionids_(from.sessionids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb.DNSessionsRequest)
}

void DNSessionsRequest::SharedCtor() {
  type_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

DNSessionsRequest::~DNSessionsRequest() {
  // @@protoc_insertion_point(destructor:pb.DNSessionsRequest)
  SharedDtor();
}

void DNSessionsRequest::SharedDtor() {
}

void DNSessionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSessionsRequest::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DNSessionsRequest& DNSessionsRequest::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionsRequest();
  return *internal_default_instance();
}

DNSessionsRequest* DNSessionsRequest::New(::google::protobuf::Arena* arena) const {
  DNSessionsRequest* n = new DNSessionsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSessionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNSessionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionids_.Clear();
  type_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool DNSessionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DNSessionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 sessionIds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_sessionids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_sessionids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNSessionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNSessionsRequest)
  return false;
#undef DO_
}

void DNSessionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNSessionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->type(), output);
  }

  // repeated uint64 sessionIds = 2;
  if (this->sessionids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sessionids_cached_byte_size_));
  }
  for (int i = 0, n = this->sessionids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->sessionids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.DNSessionsRequest)
}

::google::protobuf::uint8* DNSessionsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.DNSessionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->type(), target);
  }

  // repeated uint64 sessionIds = 2;
  if (this->sessionids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _sessionids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->sessionids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DNSessionsRequest)
  return target;
}

size_t DNSessionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNSessionsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 sessionIds = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->sessionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sessionids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSessionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DNSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSessionsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSessionsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DNSessionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DNSessionsRequest)
    MergeFrom(*source);
  }
}

void DNSessionsRequest::MergeFrom(const DNSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessionids_.MergeFrom(from.sessionids_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DNSessionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DNSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSessionsRequest::CopyFrom(const DNSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSessionsRequest::IsInitialized() const {
  return true;
}

void DNSessionsRequest::Swap(DNSessionsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSessionsRequest::InternalSwap(DNSessionsRequest* other) {
  using std::swap;
  sessionids_.InternalSwap(&other->sessionids_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSessionsRequest::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DNSessionidsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSessionidsResponse::kSessionIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSessionidsResponse::DNSessionidsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionidsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNSessionidsResponse)
}
DNSessionidsResponse::DNSessionidsResponse(const DNSessionidsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sessionids_(from.sessionids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.DNSessionidsResponse)
}

void DNSessionidsResponse::SharedCtor() {
  _cached_size_ = 0;
}

DNSessionidsResponse::~DNSessionidsResponse() {
  // @@protoc_insertion_point(destructor:pb.DNSessionidsResponse)
  SharedDtor();
}

void DNSessionidsResponse::SharedDtor() {
}

void DNSessionidsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSessionidsResponse::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DNSessionidsResponse& DNSessionidsResponse::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionidsResponse();
  return *internal_default_instance();
}

DNSessionidsResponse* DNSessionidsResponse::New(::google::protobuf::Arena* arena) const {
  DNSessionidsResponse* n = new DNSessionidsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSessionidsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNSessionidsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionids_.Clear();
  _internal_metadata_.Clear();
}

bool DNSessionidsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DNSessionidsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 sessionIds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_sessionids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_sessionids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNSessionidsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNSessionidsResponse)
  return false;
#undef DO_
}

void DNSessionidsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNSessionidsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 sessionIds = 1;
  if (this->sessionids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sessionids_cached_byte_size_));
  }
  for (int i = 0, n = this->sessionids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->sessionids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.DNSessionidsResponse)
}

::google::protobuf::uint8* DNSessionidsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.DNSessionidsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 sessionIds = 1;
  if (this->sessionids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _sessionids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->sessionids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DNSessionidsResponse)
  return target;
}

size_t DNSessionidsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNSessionidsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 sessionIds = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->sessionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sessionids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSessionidsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DNSessionidsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSessionidsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSessionidsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DNSessionidsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DNSessionidsResponse)
    MergeFrom(*source);
  }
}

void DNSessionidsResponse::MergeFrom(const DNSessionidsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNSessionidsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessionids_.MergeFrom(from.sessionids_);
}

void DNSessionidsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DNSessionidsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSessionidsResponse::CopyFrom(const DNSessionidsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNSessionidsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSessionidsResponse::IsInitialized() const {
  return true;
}

void DNSessionidsResponse::Swap(DNSessionidsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSessionidsResponse::InternalSwap(DNSessionidsResponse* other) {
  using std::swap;
  sessionids_.InternalSwap(&other->sessionids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSessionidsResponse::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DNSessionidsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSessionidsRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSessionidsRequest::DNSessionidsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionidsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DNSessionidsRequest)
}
DNSessionidsRequest::DNSessionidsRequest(const DNSessionidsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb.DNSessionidsRequest)
}

void DNSessionidsRequest::SharedCtor() {
  type_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

DNSessionidsRequest::~DNSessionidsRequest() {
  // @@protoc_insertion_point(destructor:pb.DNSessionidsRequest)
  SharedDtor();
}

void DNSessionidsRequest::SharedDtor() {
}

void DNSessionidsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSessionidsRequest::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DNSessionidsRequest& DNSessionidsRequest::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionidsRequest();
  return *internal_default_instance();
}

DNSessionidsRequest* DNSessionidsRequest::New(::google::protobuf::Arena* arena) const {
  DNSessionidsRequest* n = new DNSessionidsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSessionidsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DNSessionidsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool DNSessionidsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DNSessionidsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DNSessionidsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DNSessionidsRequest)
  return false;
#undef DO_
}

void DNSessionidsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DNSessionidsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.DNSessionidsRequest)
}

::google::protobuf::uint8* DNSessionidsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.DNSessionidsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DNSessionidsRequest)
  return target;
}

size_t DNSessionidsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DNSessionidsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSessionidsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DNSessionidsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSessionidsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSessionidsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DNSessionidsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DNSessionidsRequest)
    MergeFrom(*source);
  }
}

void DNSessionidsRequest::MergeFrom(const DNSessionidsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DNSessionidsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DNSessionidsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DNSessionidsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSessionidsRequest::CopyFrom(const DNSessionidsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DNSessionidsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSessionidsRequest::IsInitialized() const {
  return true;
}

void DNSessionidsRequest::Swap(DNSessionidsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSessionidsRequest::InternalSwap(DNSessionidsRequest* other) {
  using std::swap;
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSessionidsRequest::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCUpsertSessionRequest::InitAsDefaultInstance() {
  ::pb::_RPCUpsertSessionRequest_default_instance_._instance.get_mutable()->session_ = const_cast< ::pb::Session*>(
      ::pb::Session::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCUpsertSessionRequest::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCUpsertSessionRequest::RPCUpsertSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCUpsertSessionRequest)
}
RPCUpsertSessionRequest::RPCUpsertSessionRequest(const RPCUpsertSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session()) {
    session_ = new ::pb::Session(*from.session_);
  } else {
    session_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCUpsertSessionRequest)
}

void RPCUpsertSessionRequest::SharedCtor() {
  session_ = NULL;
  _cached_size_ = 0;
}

RPCUpsertSessionRequest::~RPCUpsertSessionRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCUpsertSessionRequest)
  SharedDtor();
}

void RPCUpsertSessionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete session_;
}

void RPCUpsertSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCUpsertSessionRequest::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCUpsertSessionRequest& RPCUpsertSessionRequest::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionRequest();
  return *internal_default_instance();
}

RPCUpsertSessionRequest* RPCUpsertSessionRequest::New(::google::protobuf::Arena* arena) const {
  RPCUpsertSessionRequest* n = new RPCUpsertSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCUpsertSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCUpsertSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && session_ != NULL) {
    delete session_;
  }
  session_ = NULL;
  _internal_metadata_.Clear();
}

bool RPCUpsertSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCUpsertSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Session session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCUpsertSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCUpsertSessionRequest)
  return false;
#undef DO_
}

void RPCUpsertSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCUpsertSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Session session = 1;
  if (this->has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->session_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCUpsertSessionRequest)
}

::google::protobuf::uint8* RPCUpsertSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCUpsertSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Session session = 1;
  if (this->has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->session_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCUpsertSessionRequest)
  return target;
}

size_t RPCUpsertSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCUpsertSessionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .pb.Session session = 1;
  if (this->has_session()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->session_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCUpsertSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCUpsertSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCUpsertSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCUpsertSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCUpsertSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCUpsertSessionRequest)
    MergeFrom(*source);
  }
}

void RPCUpsertSessionRequest::MergeFrom(const RPCUpsertSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCUpsertSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_session()) {
    mutable_session()->::pb::Session::MergeFrom(from.session());
  }
}

void RPCUpsertSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCUpsertSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCUpsertSessionRequest::CopyFrom(const RPCUpsertSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCUpsertSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCUpsertSessionRequest::IsInitialized() const {
  return true;
}

void RPCUpsertSessionRequest::Swap(RPCUpsertSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCUpsertSessionRequest::InternalSwap(RPCUpsertSessionRequest* other) {
  using std::swap;
  swap(session_, other->session_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCUpsertSessionRequest::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCUpsertSessionResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCUpsertSessionResponse::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCUpsertSessionResponse::RPCUpsertSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCUpsertSessionResponse)
}
RPCUpsertSessionResponse::RPCUpsertSessionResponse(const RPCUpsertSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_ = from.sessionid_;
  // @@protoc_insertion_point(copy_constructor:pb.RPCUpsertSessionResponse)
}

void RPCUpsertSessionResponse::SharedCtor() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RPCUpsertSessionResponse::~RPCUpsertSessionResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCUpsertSessionResponse)
  SharedDtor();
}

void RPCUpsertSessionResponse::SharedDtor() {
}

void RPCUpsertSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCUpsertSessionResponse::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCUpsertSessionResponse& RPCUpsertSessionResponse::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionResponse();
  return *internal_default_instance();
}

RPCUpsertSessionResponse* RPCUpsertSessionResponse::New(::google::protobuf::Arena* arena) const {
  RPCUpsertSessionResponse* n = new RPCUpsertSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCUpsertSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCUpsertSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RPCUpsertSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCUpsertSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCUpsertSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCUpsertSessionResponse)
  return false;
#undef DO_
}

void RPCUpsertSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCUpsertSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCUpsertSessionResponse)
}

::google::protobuf::uint8* RPCUpsertSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCUpsertSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCUpsertSessionResponse)
  return target;
}

size_t RPCUpsertSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCUpsertSessionResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCUpsertSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCUpsertSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCUpsertSessionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCUpsertSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCUpsertSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCUpsertSessionResponse)
    MergeFrom(*source);
  }
}

void RPCUpsertSessionResponse::MergeFrom(const RPCUpsertSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCUpsertSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
}

void RPCUpsertSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCUpsertSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCUpsertSessionResponse::CopyFrom(const RPCUpsertSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCUpsertSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCUpsertSessionResponse::IsInitialized() const {
  return true;
}

void RPCUpsertSessionResponse::Swap(RPCUpsertSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCUpsertSessionResponse::InternalSwap(RPCUpsertSessionResponse* other) {
  using std::swap;
  swap(sessionid_, other->sessionid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCUpsertSessionResponse::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCDeleteSessionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCDeleteSessionRequest::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCDeleteSessionRequest::RPCDeleteSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCDeleteSessionRequest)
}
RPCDeleteSessionRequest::RPCDeleteSessionRequest(const RPCDeleteSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_ = from.sessionid_;
  // @@protoc_insertion_point(copy_constructor:pb.RPCDeleteSessionRequest)
}

void RPCDeleteSessionRequest::SharedCtor() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RPCDeleteSessionRequest::~RPCDeleteSessionRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCDeleteSessionRequest)
  SharedDtor();
}

void RPCDeleteSessionRequest::SharedDtor() {
}

void RPCDeleteSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCDeleteSessionRequest::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCDeleteSessionRequest& RPCDeleteSessionRequest::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionRequest();
  return *internal_default_instance();
}

RPCDeleteSessionRequest* RPCDeleteSessionRequest::New(::google::protobuf::Arena* arena) const {
  RPCDeleteSessionRequest* n = new RPCDeleteSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCDeleteSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCDeleteSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RPCDeleteSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCDeleteSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCDeleteSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCDeleteSessionRequest)
  return false;
#undef DO_
}

void RPCDeleteSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCDeleteSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCDeleteSessionRequest)
}

::google::protobuf::uint8* RPCDeleteSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCDeleteSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCDeleteSessionRequest)
  return target;
}

size_t RPCDeleteSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCDeleteSessionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCDeleteSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCDeleteSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCDeleteSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCDeleteSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCDeleteSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCDeleteSessionRequest)
    MergeFrom(*source);
  }
}

void RPCDeleteSessionRequest::MergeFrom(const RPCDeleteSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCDeleteSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
}

void RPCDeleteSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCDeleteSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCDeleteSessionRequest::CopyFrom(const RPCDeleteSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCDeleteSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCDeleteSessionRequest::IsInitialized() const {
  return true;
}

void RPCDeleteSessionRequest::Swap(RPCDeleteSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCDeleteSessionRequest::InternalSwap(RPCDeleteSessionRequest* other) {
  using std::swap;
  swap(sessionid_, other->sessionid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCDeleteSessionRequest::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCDeleteSessionResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCDeleteSessionResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCDeleteSessionResponse::RPCDeleteSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCDeleteSessionResponse)
}
RPCDeleteSessionResponse::RPCDeleteSessionResponse(const RPCDeleteSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pb.RPCDeleteSessionResponse)
}

void RPCDeleteSessionResponse::SharedCtor() {
  result_ = false;
  _cached_size_ = 0;
}

RPCDeleteSessionResponse::~RPCDeleteSessionResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCDeleteSessionResponse)
  SharedDtor();
}

void RPCDeleteSessionResponse::SharedDtor() {
}

void RPCDeleteSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCDeleteSessionResponse::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCDeleteSessionResponse& RPCDeleteSessionResponse::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionResponse();
  return *internal_default_instance();
}

RPCDeleteSessionResponse* RPCDeleteSessionResponse::New(::google::protobuf::Arena* arena) const {
  RPCDeleteSessionResponse* n = new RPCDeleteSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCDeleteSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCDeleteSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear();
}

bool RPCDeleteSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCDeleteSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCDeleteSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCDeleteSessionResponse)
  return false;
#undef DO_
}

void RPCDeleteSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCDeleteSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCDeleteSessionResponse)
}

::google::protobuf::uint8* RPCDeleteSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCDeleteSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCDeleteSessionResponse)
  return target;
}

size_t RPCDeleteSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCDeleteSessionResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCDeleteSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCDeleteSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCDeleteSessionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCDeleteSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCDeleteSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCDeleteSessionResponse)
    MergeFrom(*source);
  }
}

void RPCDeleteSessionResponse::MergeFrom(const RPCDeleteSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCDeleteSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RPCDeleteSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCDeleteSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCDeleteSessionResponse::CopyFrom(const RPCDeleteSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCDeleteSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCDeleteSessionResponse::IsInitialized() const {
  return true;
}

void RPCDeleteSessionResponse::Swap(RPCDeleteSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCDeleteSessionResponse::InternalSwap(RPCDeleteSessionResponse* other) {
  using std::swap;
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCDeleteSessionResponse::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetSessionIdsByDetailsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetSessionIdsByDetailsRequest::kTypeFieldNumber;
const int RPCGetSessionIdsByDetailsRequest::kKeyFieldNumber;
const int RPCGetSessionIdsByDetailsRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetSessionIdsByDetailsRequest::RPCGetSessionIdsByDetailsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionIdsByDetailsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetSessionIdsByDetailsRequest)
}
RPCGetSessionIdsByDetailsRequest::RPCGetSessionIdsByDetailsRequest(const RPCGetSessionIdsByDetailsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetSessionIdsByDetailsRequest)
}

void RPCGetSessionIdsByDetailsRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RPCGetSessionIdsByDetailsRequest::~RPCGetSessionIdsByDetailsRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCGetSessionIdsByDetailsRequest)
  SharedDtor();
}

void RPCGetSessionIdsByDetailsRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCGetSessionIdsByDetailsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCGetSessionIdsByDetailsRequest::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetSessionIdsByDetailsRequest& RPCGetSessionIdsByDetailsRequest::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionIdsByDetailsRequest();
  return *internal_default_instance();
}

RPCGetSessionIdsByDetailsRequest* RPCGetSessionIdsByDetailsRequest::New(::google::protobuf::Arena* arena) const {
  RPCGetSessionIdsByDetailsRequest* n = new RPCGetSessionIdsByDetailsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetSessionIdsByDetailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetSessionIdsByDetailsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RPCGetSessionIdsByDetailsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetSessionIdsByDetailsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetSessionIdsByDetailsRequest.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetSessionIdsByDetailsRequest.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetSessionIdsByDetailsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetSessionIdsByDetailsRequest)
  return false;
#undef DO_
}

void RPCGetSessionIdsByDetailsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetSessionIdsByDetailsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->type(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetSessionIdsByDetailsRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetSessionIdsByDetailsRequest.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetSessionIdsByDetailsRequest)
}

::google::protobuf::uint8* RPCGetSessionIdsByDetailsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetSessionIdsByDetailsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->type(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetSessionIdsByDetailsRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetSessionIdsByDetailsRequest.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetSessionIdsByDetailsRequest)
  return target;
}

size_t RPCGetSessionIdsByDetailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetSessionIdsByDetailsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // uint64 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetSessionIdsByDetailsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetSessionIdsByDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetSessionIdsByDetailsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetSessionIdsByDetailsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetSessionIdsByDetailsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetSessionIdsByDetailsRequest)
    MergeFrom(*source);
  }
}

void RPCGetSessionIdsByDetailsRequest::MergeFrom(const RPCGetSessionIdsByDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetSessionIdsByDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RPCGetSessionIdsByDetailsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetSessionIdsByDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetSessionIdsByDetailsRequest::CopyFrom(const RPCGetSessionIdsByDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetSessionIdsByDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetSessionIdsByDetailsRequest::IsInitialized() const {
  return true;
}

void RPCGetSessionIdsByDetailsRequest::Swap(RPCGetSessionIdsByDetailsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetSessionIdsByDetailsRequest::InternalSwap(RPCGetSessionIdsByDetailsRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCGetSessionIdsByDetailsRequest::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetSessionIdsByPeerIdsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetSessionIdsByPeerIdsRequest::kPeerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetSessionIdsByPeerIdsRequest::RPCGetSessionIdsByPeerIdsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionIdsByPeerIdsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetSessionIdsByPeerIdsRequest)
}
RPCGetSessionIdsByPeerIdsRequest::RPCGetSessionIdsByPeerIdsRequest(const RPCGetSessionIdsByPeerIdsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peerids_(from.peerids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetSessionIdsByPeerIdsRequest)
}

void RPCGetSessionIdsByPeerIdsRequest::SharedCtor() {
  _cached_size_ = 0;
}

RPCGetSessionIdsByPeerIdsRequest::~RPCGetSessionIdsByPeerIdsRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCGetSessionIdsByPeerIdsRequest)
  SharedDtor();
}

void RPCGetSessionIdsByPeerIdsRequest::SharedDtor() {
}

void RPCGetSessionIdsByPeerIdsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCGetSessionIdsByPeerIdsRequest::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetSessionIdsByPeerIdsRequest& RPCGetSessionIdsByPeerIdsRequest::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionIdsByPeerIdsRequest();
  return *internal_default_instance();
}

RPCGetSessionIdsByPeerIdsRequest* RPCGetSessionIdsByPeerIdsRequest::New(::google::protobuf::Arena* arena) const {
  RPCGetSessionIdsByPeerIdsRequest* n = new RPCGetSessionIdsByPeerIdsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetSessionIdsByPeerIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetSessionIdsByPeerIdsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerids_.Clear();
  _internal_metadata_.Clear();
}

bool RPCGetSessionIdsByPeerIdsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetSessionIdsByPeerIdsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string peerIds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peerids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peerids(this->peerids_size() - 1).data(),
            static_cast<int>(this->peerids(this->peerids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetSessionIdsByPeerIdsRequest.peerIds"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetSessionIdsByPeerIdsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetSessionIdsByPeerIdsRequest)
  return false;
#undef DO_
}

void RPCGetSessionIdsByPeerIdsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetSessionIdsByPeerIdsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string peerIds = 1;
  for (int i = 0, n = this->peerids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerids(i).data(), static_cast<int>(this->peerids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetSessionIdsByPeerIdsRequest.peerIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->peerids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetSessionIdsByPeerIdsRequest)
}

::google::protobuf::uint8* RPCGetSessionIdsByPeerIdsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetSessionIdsByPeerIdsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string peerIds = 1;
  for (int i = 0, n = this->peerids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerids(i).data(), static_cast<int>(this->peerids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetSessionIdsByPeerIdsRequest.peerIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->peerids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetSessionIdsByPeerIdsRequest)
  return target;
}

size_t RPCGetSessionIdsByPeerIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetSessionIdsByPeerIdsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string peerIds = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->peerids_size());
  for (int i = 0, n = this->peerids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peerids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetSessionIdsByPeerIdsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetSessionIdsByPeerIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetSessionIdsByPeerIdsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetSessionIdsByPeerIdsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetSessionIdsByPeerIdsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetSessionIdsByPeerIdsRequest)
    MergeFrom(*source);
  }
}

void RPCGetSessionIdsByPeerIdsRequest::MergeFrom(const RPCGetSessionIdsByPeerIdsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetSessionIdsByPeerIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peerids_.MergeFrom(from.peerids_);
}

void RPCGetSessionIdsByPeerIdsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetSessionIdsByPeerIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetSessionIdsByPeerIdsRequest::CopyFrom(const RPCGetSessionIdsByPeerIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetSessionIdsByPeerIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetSessionIdsByPeerIdsRequest::IsInitialized() const {
  return true;
}

void RPCGetSessionIdsByPeerIdsRequest::Swap(RPCGetSessionIdsByPeerIdsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetSessionIdsByPeerIdsRequest::InternalSwap(RPCGetSessionIdsByPeerIdsRequest* other) {
  using std::swap;
  peerids_.InternalSwap(&other->peerids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCGetSessionIdsByPeerIdsRequest::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetSessionIdsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetSessionIdsResponse::kSessionIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetSessionIdsResponse::RPCGetSessionIdsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionIdsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetSessionIdsResponse)
}
RPCGetSessionIdsResponse::RPCGetSessionIdsResponse(const RPCGetSessionIdsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sessionids_(from.sessionids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetSessionIdsResponse)
}

void RPCGetSessionIdsResponse::SharedCtor() {
  _cached_size_ = 0;
}

RPCGetSessionIdsResponse::~RPCGetSessionIdsResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCGetSessionIdsResponse)
  SharedDtor();
}

void RPCGetSessionIdsResponse::SharedDtor() {
}

void RPCGetSessionIdsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCGetSessionIdsResponse::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetSessionIdsResponse& RPCGetSessionIdsResponse::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionIdsResponse();
  return *internal_default_instance();
}

RPCGetSessionIdsResponse* RPCGetSessionIdsResponse::New(::google::protobuf::Arena* arena) const {
  RPCGetSessionIdsResponse* n = new RPCGetSessionIdsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetSessionIdsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetSessionIdsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionids_.Clear();
  _internal_metadata_.Clear();
}

bool RPCGetSessionIdsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetSessionIdsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 sessionIds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_sessionids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_sessionids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetSessionIdsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetSessionIdsResponse)
  return false;
#undef DO_
}

void RPCGetSessionIdsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetSessionIdsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 sessionIds = 1;
  if (this->sessionids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sessionids_cached_byte_size_));
  }
  for (int i = 0, n = this->sessionids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->sessionids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetSessionIdsResponse)
}

::google::protobuf::uint8* RPCGetSessionIdsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetSessionIdsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 sessionIds = 1;
  if (this->sessionids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _sessionids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->sessionids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetSessionIdsResponse)
  return target;
}

size_t RPCGetSessionIdsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetSessionIdsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 sessionIds = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->sessionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sessionids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetSessionIdsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetSessionIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetSessionIdsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetSessionIdsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetSessionIdsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetSessionIdsResponse)
    MergeFrom(*source);
  }
}

void RPCGetSessionIdsResponse::MergeFrom(const RPCGetSessionIdsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetSessionIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessionids_.MergeFrom(from.sessionids_);
}

void RPCGetSessionIdsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetSessionIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetSessionIdsResponse::CopyFrom(const RPCGetSessionIdsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetSessionIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetSessionIdsResponse::IsInitialized() const {
  return true;
}

void RPCGetSessionIdsResponse::Swap(RPCGetSessionIdsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetSessionIdsResponse::InternalSwap(RPCGetSessionIdsResponse* other) {
  using std::swap;
  sessionids_.InternalSwap(&other->sessionids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCGetSessionIdsResponse::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetSessionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetSessionRequest::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetSessionRequest::RPCGetSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetSessionRequest)
}
RPCGetSessionRequest::RPCGetSessionRequest(const RPCGetSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_ = from.sessionid_;
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetSessionRequest)
}

void RPCGetSessionRequest::SharedCtor() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RPCGetSessionRequest::~RPCGetSessionRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCGetSessionRequest)
  SharedDtor();
}

void RPCGetSessionRequest::SharedDtor() {
}

void RPCGetSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCGetSessionRequest::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetSessionRequest& RPCGetSessionRequest::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionRequest();
  return *internal_default_instance();
}

RPCGetSessionRequest* RPCGetSessionRequest::New(::google::protobuf::Arena* arena) const {
  RPCGetSessionRequest* n = new RPCGetSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RPCGetSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetSessionRequest)
  return false;
#undef DO_
}

void RPCGetSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetSessionRequest)
}

::google::protobuf::uint8* RPCGetSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetSessionRequest)
  return target;
}

size_t RPCGetSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetSessionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 sessionId = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetSessionRequest)
    MergeFrom(*source);
  }
}

void RPCGetSessionRequest::MergeFrom(const RPCGetSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
}

void RPCGetSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetSessionRequest::CopyFrom(const RPCGetSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetSessionRequest::IsInitialized() const {
  return true;
}

void RPCGetSessionRequest::Swap(RPCGetSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetSessionRequest::InternalSwap(RPCGetSessionRequest* other) {
  using std::swap;
  swap(sessionid_, other->sessionid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCGetSessionRequest::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPCGetSessionResponse::InitAsDefaultInstance() {
  ::pb::_RPCGetSessionResponse_default_instance_._instance.get_mutable()->session_ = const_cast< ::pb::Session*>(
      ::pb::Session::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetSessionResponse::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetSessionResponse::RPCGetSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetSessionResponse)
}
RPCGetSessionResponse::RPCGetSessionResponse(const RPCGetSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session()) {
    session_ = new ::pb::Session(*from.session_);
  } else {
    session_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetSessionResponse)
}

void RPCGetSessionResponse::SharedCtor() {
  session_ = NULL;
  _cached_size_ = 0;
}

RPCGetSessionResponse::~RPCGetSessionResponse() {
  // @@protoc_insertion_point(destructor:pb.RPCGetSessionResponse)
  SharedDtor();
}

void RPCGetSessionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete session_;
}

void RPCGetSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCGetSessionResponse::descriptor() {
  ::protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCGetSessionResponse& RPCGetSessionResponse::default_instance() {
  ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionResponse();
  return *internal_default_instance();
}

RPCGetSessionResponse* RPCGetSessionResponse::New(::google::protobuf::Arena* arena) const {
  RPCGetSessionResponse* n = new RPCGetSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && session_ != NULL) {
    delete session_;
  }
  session_ = NULL;
  _internal_metadata_.Clear();
}

bool RPCGetSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCGetSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Session session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetSessionResponse)
  return false;
#undef DO_
}

void RPCGetSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Session session = 1;
  if (this->has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->session_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RPCGetSessionResponse)
}

::google::protobuf::uint8* RPCGetSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RPCGetSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Session session = 1;
  if (this->has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->session_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RPCGetSessionResponse)
  return target;
}

size_t RPCGetSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetSessionResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .pb.Session session = 1;
  if (this->has_session()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->session_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RPCGetSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCGetSessionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCGetSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RPCGetSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RPCGetSessionResponse)
    MergeFrom(*source);
  }
}

void RPCGetSessionResponse::MergeFrom(const RPCGetSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_session()) {
    mutable_session()->::pb::Session::MergeFrom(from.session());
  }
}

void RPCGetSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RPCGetSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCGetSessionResponse::CopyFrom(const RPCGetSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetSessionResponse::IsInitialized() const {
  return true;
}

void RPCGetSessionResponse::Swap(RPCGetSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetSessionResponse::InternalSwap(RPCGetSessionResponse* other) {
  using std::swap;
  swap(session_, other->session_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCGetSessionResponse::GetMetadata() const {
  protobuf_pb_2fmatchmaking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pb_2fmatchmaking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb

// @@protoc_insertion_point(global_scope)
