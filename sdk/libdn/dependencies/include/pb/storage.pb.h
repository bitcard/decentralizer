// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/storage.proto

#ifndef PROTOBUF_INCLUDED_pb_2fstorage_2eproto
#define PROTOBUF_INCLUDED_pb_2fstorage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pb_2fstorage_2eproto 

namespace protobuf_pb_2fstorage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pb_2fstorage_2eproto
namespace pb {
class RPCGetPeerFileRequest;
class RPCGetPeerFileRequestDefaultTypeInternal;
extern RPCGetPeerFileRequestDefaultTypeInternal _RPCGetPeerFileRequest_default_instance_;
class RPCGetPeerFileResponse;
class RPCGetPeerFileResponseDefaultTypeInternal;
extern RPCGetPeerFileResponseDefaultTypeInternal _RPCGetPeerFileResponse_default_instance_;
class RPCWritePeerFileRequest;
class RPCWritePeerFileRequestDefaultTypeInternal;
extern RPCWritePeerFileRequestDefaultTypeInternal _RPCWritePeerFileRequest_default_instance_;
class RPCWritePeerFileResponse;
class RPCWritePeerFileResponseDefaultTypeInternal;
extern RPCWritePeerFileResponseDefaultTypeInternal _RPCWritePeerFileResponse_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::RPCGetPeerFileRequest* Arena::CreateMaybeMessage<::pb::RPCGetPeerFileRequest>(Arena*);
template<> ::pb::RPCGetPeerFileResponse* Arena::CreateMaybeMessage<::pb::RPCGetPeerFileResponse>(Arena*);
template<> ::pb::RPCWritePeerFileRequest* Arena::CreateMaybeMessage<::pb::RPCWritePeerFileRequest>(Arena*);
template<> ::pb::RPCWritePeerFileResponse* Arena::CreateMaybeMessage<::pb::RPCWritePeerFileResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class RPCWritePeerFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCWritePeerFileRequest) */ {
 public:
  RPCWritePeerFileRequest();
  virtual ~RPCWritePeerFileRequest();

  RPCWritePeerFileRequest(const RPCWritePeerFileRequest& from);

  inline RPCWritePeerFileRequest& operator=(const RPCWritePeerFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCWritePeerFileRequest(RPCWritePeerFileRequest&& from) noexcept
    : RPCWritePeerFileRequest() {
    *this = ::std::move(from);
  }

  inline RPCWritePeerFileRequest& operator=(RPCWritePeerFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCWritePeerFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCWritePeerFileRequest* internal_default_instance() {
    return reinterpret_cast<const RPCWritePeerFileRequest*>(
               &_RPCWritePeerFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RPCWritePeerFileRequest* other);
  friend void swap(RPCWritePeerFileRequest& a, RPCWritePeerFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCWritePeerFileRequest* New() const final {
    return CreateMaybeMessage<RPCWritePeerFileRequest>(NULL);
  }

  RPCWritePeerFileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCWritePeerFileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCWritePeerFileRequest& from);
  void MergeFrom(const RPCWritePeerFileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCWritePeerFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // @@protoc_insertion_point(class_scope:pb.RPCWritePeerFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCWritePeerFileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCWritePeerFileResponse) */ {
 public:
  RPCWritePeerFileResponse();
  virtual ~RPCWritePeerFileResponse();

  RPCWritePeerFileResponse(const RPCWritePeerFileResponse& from);

  inline RPCWritePeerFileResponse& operator=(const RPCWritePeerFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCWritePeerFileResponse(RPCWritePeerFileResponse&& from) noexcept
    : RPCWritePeerFileResponse() {
    *this = ::std::move(from);
  }

  inline RPCWritePeerFileResponse& operator=(RPCWritePeerFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCWritePeerFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCWritePeerFileResponse* internal_default_instance() {
    return reinterpret_cast<const RPCWritePeerFileResponse*>(
               &_RPCWritePeerFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RPCWritePeerFileResponse* other);
  friend void swap(RPCWritePeerFileResponse& a, RPCWritePeerFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCWritePeerFileResponse* New() const final {
    return CreateMaybeMessage<RPCWritePeerFileResponse>(NULL);
  }

  RPCWritePeerFileResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCWritePeerFileResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCWritePeerFileResponse& from);
  void MergeFrom(const RPCWritePeerFileResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCWritePeerFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:pb.RPCWritePeerFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCGetPeerFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetPeerFileRequest) */ {
 public:
  RPCGetPeerFileRequest();
  virtual ~RPCGetPeerFileRequest();

  RPCGetPeerFileRequest(const RPCGetPeerFileRequest& from);

  inline RPCGetPeerFileRequest& operator=(const RPCGetPeerFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetPeerFileRequest(RPCGetPeerFileRequest&& from) noexcept
    : RPCGetPeerFileRequest() {
    *this = ::std::move(from);
  }

  inline RPCGetPeerFileRequest& operator=(RPCGetPeerFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetPeerFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetPeerFileRequest* internal_default_instance() {
    return reinterpret_cast<const RPCGetPeerFileRequest*>(
               &_RPCGetPeerFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RPCGetPeerFileRequest* other);
  friend void swap(RPCGetPeerFileRequest& a, RPCGetPeerFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetPeerFileRequest* New() const final {
    return CreateMaybeMessage<RPCGetPeerFileRequest>(NULL);
  }

  RPCGetPeerFileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCGetPeerFileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCGetPeerFileRequest& from);
  void MergeFrom(const RPCGetPeerFileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCGetPeerFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pId = 1;
  void clear_pid();
  static const int kPIdFieldNumber = 1;
  const ::std::string& pid() const;
  void set_pid(const ::std::string& value);
  #if LANG_CXX11
  void set_pid(::std::string&& value);
  #endif
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  ::std::string* mutable_pid();
  ::std::string* release_pid();
  void set_allocated_pid(::std::string* pid);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.RPCGetPeerFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCGetPeerFileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetPeerFileResponse) */ {
 public:
  RPCGetPeerFileResponse();
  virtual ~RPCGetPeerFileResponse();

  RPCGetPeerFileResponse(const RPCGetPeerFileResponse& from);

  inline RPCGetPeerFileResponse& operator=(const RPCGetPeerFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetPeerFileResponse(RPCGetPeerFileResponse&& from) noexcept
    : RPCGetPeerFileResponse() {
    *this = ::std::move(from);
  }

  inline RPCGetPeerFileResponse& operator=(RPCGetPeerFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetPeerFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetPeerFileResponse* internal_default_instance() {
    return reinterpret_cast<const RPCGetPeerFileResponse*>(
               &_RPCGetPeerFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RPCGetPeerFileResponse* other);
  friend void swap(RPCGetPeerFileResponse& a, RPCGetPeerFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetPeerFileResponse* New() const final {
    return CreateMaybeMessage<RPCGetPeerFileResponse>(NULL);
  }

  RPCGetPeerFileResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCGetPeerFileResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCGetPeerFileResponse& from);
  void MergeFrom(const RPCGetPeerFileResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCGetPeerFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes file = 1;
  void clear_file();
  static const int kFileFieldNumber = 1;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // @@protoc_insertion_point(class_scope:pb.RPCGetPeerFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fstorage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPCWritePeerFileRequest

// string name = 1;
inline void RPCWritePeerFileRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCWritePeerFileRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.RPCWritePeerFileRequest.name)
  return name_.GetNoArena();
}
inline void RPCWritePeerFileRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCWritePeerFileRequest.name)
}
#if LANG_CXX11
inline void RPCWritePeerFileRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCWritePeerFileRequest.name)
}
#endif
inline void RPCWritePeerFileRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCWritePeerFileRequest.name)
}
inline void RPCWritePeerFileRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCWritePeerFileRequest.name)
}
inline ::std::string* RPCWritePeerFileRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCWritePeerFileRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCWritePeerFileRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.RPCWritePeerFileRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCWritePeerFileRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCWritePeerFileRequest.name)
}

// bytes file = 2;
inline void RPCWritePeerFileRequest::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCWritePeerFileRequest::file() const {
  // @@protoc_insertion_point(field_get:pb.RPCWritePeerFileRequest.file)
  return file_.GetNoArena();
}
inline void RPCWritePeerFileRequest::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCWritePeerFileRequest.file)
}
#if LANG_CXX11
inline void RPCWritePeerFileRequest::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCWritePeerFileRequest.file)
}
#endif
inline void RPCWritePeerFileRequest::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCWritePeerFileRequest.file)
}
inline void RPCWritePeerFileRequest::set_file(const void* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCWritePeerFileRequest.file)
}
inline ::std::string* RPCWritePeerFileRequest::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCWritePeerFileRequest.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCWritePeerFileRequest::release_file() {
  // @@protoc_insertion_point(field_release:pb.RPCWritePeerFileRequest.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCWritePeerFileRequest::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCWritePeerFileRequest.file)
}

// -------------------------------------------------------------------

// RPCWritePeerFileResponse

// bool success = 1;
inline void RPCWritePeerFileResponse::clear_success() {
  success_ = false;
}
inline bool RPCWritePeerFileResponse::success() const {
  // @@protoc_insertion_point(field_get:pb.RPCWritePeerFileResponse.success)
  return success_;
}
inline void RPCWritePeerFileResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCWritePeerFileResponse.success)
}

// -------------------------------------------------------------------

// RPCGetPeerFileRequest

// string pId = 1;
inline void RPCGetPeerFileRequest::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetPeerFileRequest::pid() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetPeerFileRequest.pId)
  return pid_.GetNoArena();
}
inline void RPCGetPeerFileRequest::set_pid(const ::std::string& value) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetPeerFileRequest.pId)
}
#if LANG_CXX11
inline void RPCGetPeerFileRequest::set_pid(::std::string&& value) {
  
  pid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetPeerFileRequest.pId)
}
#endif
inline void RPCGetPeerFileRequest::set_pid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetPeerFileRequest.pId)
}
inline void RPCGetPeerFileRequest::set_pid(const char* value, size_t size) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetPeerFileRequest.pId)
}
inline ::std::string* RPCGetPeerFileRequest::mutable_pid() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetPeerFileRequest.pId)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetPeerFileRequest::release_pid() {
  // @@protoc_insertion_point(field_release:pb.RPCGetPeerFileRequest.pId)
  
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetPeerFileRequest::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    
  } else {
    
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetPeerFileRequest.pId)
}

// string name = 2;
inline void RPCGetPeerFileRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetPeerFileRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetPeerFileRequest.name)
  return name_.GetNoArena();
}
inline void RPCGetPeerFileRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetPeerFileRequest.name)
}
#if LANG_CXX11
inline void RPCGetPeerFileRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetPeerFileRequest.name)
}
#endif
inline void RPCGetPeerFileRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetPeerFileRequest.name)
}
inline void RPCGetPeerFileRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetPeerFileRequest.name)
}
inline ::std::string* RPCGetPeerFileRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetPeerFileRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetPeerFileRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.RPCGetPeerFileRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetPeerFileRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetPeerFileRequest.name)
}

// -------------------------------------------------------------------

// RPCGetPeerFileResponse

// bytes file = 1;
inline void RPCGetPeerFileResponse::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetPeerFileResponse::file() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetPeerFileResponse.file)
  return file_.GetNoArena();
}
inline void RPCGetPeerFileResponse::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetPeerFileResponse.file)
}
#if LANG_CXX11
inline void RPCGetPeerFileResponse::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetPeerFileResponse.file)
}
#endif
inline void RPCGetPeerFileResponse::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetPeerFileResponse.file)
}
inline void RPCGetPeerFileResponse::set_file(const void* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetPeerFileResponse.file)
}
inline ::std::string* RPCGetPeerFileResponse::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetPeerFileResponse.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetPeerFileResponse::release_file() {
  // @@protoc_insertion_point(field_release:pb.RPCGetPeerFileResponse.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetPeerFileResponse::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetPeerFileResponse.file)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pb_2fstorage_2eproto
