// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/storage.proto

#ifndef PROTOBUF_pb_2fstorage_2eproto__INCLUDED
#define PROTOBUF_pb_2fstorage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_pb_2fstorage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRPCWriteUserFileRequestImpl();
void InitDefaultsRPCWriteUserFileRequest();
void InitDefaultsRPCWriteUserFileResponseImpl();
void InitDefaultsRPCWriteUserFileResponse();
void InitDefaultsRPCGetUserFileRequestImpl();
void InitDefaultsRPCGetUserFileRequest();
void InitDefaultsRPCGetUserFileResponseImpl();
void InitDefaultsRPCGetUserFileResponse();
void InitDefaultsRPCGetPublisherFileRequestImpl();
void InitDefaultsRPCGetPublisherFileRequest();
void InitDefaultsRPCGetPublisherFileResponseImpl();
void InitDefaultsRPCGetPublisherFileResponse();
inline void InitDefaults() {
  InitDefaultsRPCWriteUserFileRequest();
  InitDefaultsRPCWriteUserFileResponse();
  InitDefaultsRPCGetUserFileRequest();
  InitDefaultsRPCGetUserFileResponse();
  InitDefaultsRPCGetPublisherFileRequest();
  InitDefaultsRPCGetPublisherFileResponse();
}
}  // namespace protobuf_pb_2fstorage_2eproto
namespace pb {
class RPCGetPublisherFileRequest;
class RPCGetPublisherFileRequestDefaultTypeInternal;
extern RPCGetPublisherFileRequestDefaultTypeInternal _RPCGetPublisherFileRequest_default_instance_;
class RPCGetPublisherFileResponse;
class RPCGetPublisherFileResponseDefaultTypeInternal;
extern RPCGetPublisherFileResponseDefaultTypeInternal _RPCGetPublisherFileResponse_default_instance_;
class RPCGetUserFileRequest;
class RPCGetUserFileRequestDefaultTypeInternal;
extern RPCGetUserFileRequestDefaultTypeInternal _RPCGetUserFileRequest_default_instance_;
class RPCGetUserFileResponse;
class RPCGetUserFileResponseDefaultTypeInternal;
extern RPCGetUserFileResponseDefaultTypeInternal _RPCGetUserFileResponse_default_instance_;
class RPCWriteUserFileRequest;
class RPCWriteUserFileRequestDefaultTypeInternal;
extern RPCWriteUserFileRequestDefaultTypeInternal _RPCWriteUserFileRequest_default_instance_;
class RPCWriteUserFileResponse;
class RPCWriteUserFileResponseDefaultTypeInternal;
extern RPCWriteUserFileResponseDefaultTypeInternal _RPCWriteUserFileResponse_default_instance_;
}  // namespace pb
namespace pb {

// ===================================================================

class RPCWriteUserFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCWriteUserFileRequest) */ {
 public:
  RPCWriteUserFileRequest();
  virtual ~RPCWriteUserFileRequest();

  RPCWriteUserFileRequest(const RPCWriteUserFileRequest& from);

  inline RPCWriteUserFileRequest& operator=(const RPCWriteUserFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCWriteUserFileRequest(RPCWriteUserFileRequest&& from) noexcept
    : RPCWriteUserFileRequest() {
    *this = ::std::move(from);
  }

  inline RPCWriteUserFileRequest& operator=(RPCWriteUserFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCWriteUserFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCWriteUserFileRequest* internal_default_instance() {
    return reinterpret_cast<const RPCWriteUserFileRequest*>(
               &_RPCWriteUserFileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RPCWriteUserFileRequest* other);
  friend void swap(RPCWriteUserFileRequest& a, RPCWriteUserFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCWriteUserFileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCWriteUserFileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCWriteUserFileRequest& from);
  void MergeFrom(const RPCWriteUserFileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCWriteUserFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:pb.RPCWriteUserFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCWriteUserFileRequestImpl();
};
// -------------------------------------------------------------------

class RPCWriteUserFileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCWriteUserFileResponse) */ {
 public:
  RPCWriteUserFileResponse();
  virtual ~RPCWriteUserFileResponse();

  RPCWriteUserFileResponse(const RPCWriteUserFileResponse& from);

  inline RPCWriteUserFileResponse& operator=(const RPCWriteUserFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCWriteUserFileResponse(RPCWriteUserFileResponse&& from) noexcept
    : RPCWriteUserFileResponse() {
    *this = ::std::move(from);
  }

  inline RPCWriteUserFileResponse& operator=(RPCWriteUserFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCWriteUserFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCWriteUserFileResponse* internal_default_instance() {
    return reinterpret_cast<const RPCWriteUserFileResponse*>(
               &_RPCWriteUserFileResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RPCWriteUserFileResponse* other);
  friend void swap(RPCWriteUserFileResponse& a, RPCWriteUserFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCWriteUserFileResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCWriteUserFileResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCWriteUserFileResponse& from);
  void MergeFrom(const RPCWriteUserFileResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCWriteUserFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // @@protoc_insertion_point(class_scope:pb.RPCWriteUserFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCWriteUserFileResponseImpl();
};
// -------------------------------------------------------------------

class RPCGetUserFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetUserFileRequest) */ {
 public:
  RPCGetUserFileRequest();
  virtual ~RPCGetUserFileRequest();

  RPCGetUserFileRequest(const RPCGetUserFileRequest& from);

  inline RPCGetUserFileRequest& operator=(const RPCGetUserFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetUserFileRequest(RPCGetUserFileRequest&& from) noexcept
    : RPCGetUserFileRequest() {
    *this = ::std::move(from);
  }

  inline RPCGetUserFileRequest& operator=(RPCGetUserFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetUserFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetUserFileRequest* internal_default_instance() {
    return reinterpret_cast<const RPCGetUserFileRequest*>(
               &_RPCGetUserFileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RPCGetUserFileRequest* other);
  friend void swap(RPCGetUserFileRequest& a, RPCGetUserFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetUserFileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCGetUserFileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCGetUserFileRequest& from);
  void MergeFrom(const RPCGetUserFileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCGetUserFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.RPCGetUserFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetUserFileRequestImpl();
};
// -------------------------------------------------------------------

class RPCGetUserFileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetUserFileResponse) */ {
 public:
  RPCGetUserFileResponse();
  virtual ~RPCGetUserFileResponse();

  RPCGetUserFileResponse(const RPCGetUserFileResponse& from);

  inline RPCGetUserFileResponse& operator=(const RPCGetUserFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetUserFileResponse(RPCGetUserFileResponse&& from) noexcept
    : RPCGetUserFileResponse() {
    *this = ::std::move(from);
  }

  inline RPCGetUserFileResponse& operator=(RPCGetUserFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetUserFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetUserFileResponse* internal_default_instance() {
    return reinterpret_cast<const RPCGetUserFileResponse*>(
               &_RPCGetUserFileResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RPCGetUserFileResponse* other);
  friend void swap(RPCGetUserFileResponse& a, RPCGetUserFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetUserFileResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCGetUserFileResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCGetUserFileResponse& from);
  void MergeFrom(const RPCGetUserFileResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCGetUserFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // bytes file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // @@protoc_insertion_point(class_scope:pb.RPCGetUserFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetUserFileResponseImpl();
};
// -------------------------------------------------------------------

class RPCGetPublisherFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetPublisherFileRequest) */ {
 public:
  RPCGetPublisherFileRequest();
  virtual ~RPCGetPublisherFileRequest();

  RPCGetPublisherFileRequest(const RPCGetPublisherFileRequest& from);

  inline RPCGetPublisherFileRequest& operator=(const RPCGetPublisherFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetPublisherFileRequest(RPCGetPublisherFileRequest&& from) noexcept
    : RPCGetPublisherFileRequest() {
    *this = ::std::move(from);
  }

  inline RPCGetPublisherFileRequest& operator=(RPCGetPublisherFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetPublisherFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetPublisherFileRequest* internal_default_instance() {
    return reinterpret_cast<const RPCGetPublisherFileRequest*>(
               &_RPCGetPublisherFileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RPCGetPublisherFileRequest* other);
  friend void swap(RPCGetPublisherFileRequest& a, RPCGetPublisherFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetPublisherFileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCGetPublisherFileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCGetPublisherFileRequest& from);
  void MergeFrom(const RPCGetPublisherFileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCGetPublisherFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.RPCGetPublisherFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetPublisherFileRequestImpl();
};
// -------------------------------------------------------------------

class RPCGetPublisherFileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetPublisherFileResponse) */ {
 public:
  RPCGetPublisherFileResponse();
  virtual ~RPCGetPublisherFileResponse();

  RPCGetPublisherFileResponse(const RPCGetPublisherFileResponse& from);

  inline RPCGetPublisherFileResponse& operator=(const RPCGetPublisherFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetPublisherFileResponse(RPCGetPublisherFileResponse&& from) noexcept
    : RPCGetPublisherFileResponse() {
    *this = ::std::move(from);
  }

  inline RPCGetPublisherFileResponse& operator=(RPCGetPublisherFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetPublisherFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetPublisherFileResponse* internal_default_instance() {
    return reinterpret_cast<const RPCGetPublisherFileResponse*>(
               &_RPCGetPublisherFileResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RPCGetPublisherFileResponse* other);
  friend void swap(RPCGetPublisherFileResponse& a, RPCGetPublisherFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetPublisherFileResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCGetPublisherFileResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCGetPublisherFileResponse& from);
  void MergeFrom(const RPCGetPublisherFileResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCGetPublisherFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // bytes file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // @@protoc_insertion_point(class_scope:pb.RPCGetPublisherFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_pb_2fstorage_2eproto::InitDefaultsRPCGetPublisherFileResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPCWriteUserFileRequest

// string err = 1;
inline void RPCWriteUserFileRequest::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCWriteUserFileRequest::err() const {
  // @@protoc_insertion_point(field_get:pb.RPCWriteUserFileRequest.err)
  return err_.GetNoArena();
}
inline void RPCWriteUserFileRequest::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCWriteUserFileRequest.err)
}
#if LANG_CXX11
inline void RPCWriteUserFileRequest::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCWriteUserFileRequest.err)
}
#endif
inline void RPCWriteUserFileRequest::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCWriteUserFileRequest.err)
}
inline void RPCWriteUserFileRequest::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCWriteUserFileRequest.err)
}
inline ::std::string* RPCWriteUserFileRequest::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCWriteUserFileRequest.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCWriteUserFileRequest::release_err() {
  // @@protoc_insertion_point(field_release:pb.RPCWriteUserFileRequest.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCWriteUserFileRequest::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCWriteUserFileRequest.err)
}

// -------------------------------------------------------------------

// RPCWriteUserFileResponse

// string name = 1;
inline void RPCWriteUserFileResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCWriteUserFileResponse::name() const {
  // @@protoc_insertion_point(field_get:pb.RPCWriteUserFileResponse.name)
  return name_.GetNoArena();
}
inline void RPCWriteUserFileResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCWriteUserFileResponse.name)
}
#if LANG_CXX11
inline void RPCWriteUserFileResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCWriteUserFileResponse.name)
}
#endif
inline void RPCWriteUserFileResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCWriteUserFileResponse.name)
}
inline void RPCWriteUserFileResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCWriteUserFileResponse.name)
}
inline ::std::string* RPCWriteUserFileResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCWriteUserFileResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCWriteUserFileResponse::release_name() {
  // @@protoc_insertion_point(field_release:pb.RPCWriteUserFileResponse.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCWriteUserFileResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCWriteUserFileResponse.name)
}

// bytes file = 2;
inline void RPCWriteUserFileResponse::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCWriteUserFileResponse::file() const {
  // @@protoc_insertion_point(field_get:pb.RPCWriteUserFileResponse.file)
  return file_.GetNoArena();
}
inline void RPCWriteUserFileResponse::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCWriteUserFileResponse.file)
}
#if LANG_CXX11
inline void RPCWriteUserFileResponse::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCWriteUserFileResponse.file)
}
#endif
inline void RPCWriteUserFileResponse::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCWriteUserFileResponse.file)
}
inline void RPCWriteUserFileResponse::set_file(const void* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCWriteUserFileResponse.file)
}
inline ::std::string* RPCWriteUserFileResponse::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCWriteUserFileResponse.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCWriteUserFileResponse::release_file() {
  // @@protoc_insertion_point(field_release:pb.RPCWriteUserFileResponse.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCWriteUserFileResponse::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCWriteUserFileResponse.file)
}

// -------------------------------------------------------------------

// RPCGetUserFileRequest

// string name = 1;
inline void RPCGetUserFileRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetUserFileRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetUserFileRequest.name)
  return name_.GetNoArena();
}
inline void RPCGetUserFileRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetUserFileRequest.name)
}
#if LANG_CXX11
inline void RPCGetUserFileRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetUserFileRequest.name)
}
#endif
inline void RPCGetUserFileRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetUserFileRequest.name)
}
inline void RPCGetUserFileRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetUserFileRequest.name)
}
inline ::std::string* RPCGetUserFileRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetUserFileRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetUserFileRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.RPCGetUserFileRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetUserFileRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetUserFileRequest.name)
}

// -------------------------------------------------------------------

// RPCGetUserFileResponse

// string err = 1;
inline void RPCGetUserFileResponse::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetUserFileResponse::err() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetUserFileResponse.err)
  return err_.GetNoArena();
}
inline void RPCGetUserFileResponse::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetUserFileResponse.err)
}
#if LANG_CXX11
inline void RPCGetUserFileResponse::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetUserFileResponse.err)
}
#endif
inline void RPCGetUserFileResponse::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetUserFileResponse.err)
}
inline void RPCGetUserFileResponse::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetUserFileResponse.err)
}
inline ::std::string* RPCGetUserFileResponse::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetUserFileResponse.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetUserFileResponse::release_err() {
  // @@protoc_insertion_point(field_release:pb.RPCGetUserFileResponse.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetUserFileResponse::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetUserFileResponse.err)
}

// bytes file = 2;
inline void RPCGetUserFileResponse::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetUserFileResponse::file() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetUserFileResponse.file)
  return file_.GetNoArena();
}
inline void RPCGetUserFileResponse::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetUserFileResponse.file)
}
#if LANG_CXX11
inline void RPCGetUserFileResponse::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetUserFileResponse.file)
}
#endif
inline void RPCGetUserFileResponse::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetUserFileResponse.file)
}
inline void RPCGetUserFileResponse::set_file(const void* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetUserFileResponse.file)
}
inline ::std::string* RPCGetUserFileResponse::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetUserFileResponse.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetUserFileResponse::release_file() {
  // @@protoc_insertion_point(field_release:pb.RPCGetUserFileResponse.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetUserFileResponse::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetUserFileResponse.file)
}

// -------------------------------------------------------------------

// RPCGetPublisherFileRequest

// string name = 1;
inline void RPCGetPublisherFileRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetPublisherFileRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetPublisherFileRequest.name)
  return name_.GetNoArena();
}
inline void RPCGetPublisherFileRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetPublisherFileRequest.name)
}
#if LANG_CXX11
inline void RPCGetPublisherFileRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetPublisherFileRequest.name)
}
#endif
inline void RPCGetPublisherFileRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetPublisherFileRequest.name)
}
inline void RPCGetPublisherFileRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetPublisherFileRequest.name)
}
inline ::std::string* RPCGetPublisherFileRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetPublisherFileRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetPublisherFileRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.RPCGetPublisherFileRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetPublisherFileRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetPublisherFileRequest.name)
}

// -------------------------------------------------------------------

// RPCGetPublisherFileResponse

// string err = 1;
inline void RPCGetPublisherFileResponse::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetPublisherFileResponse::err() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetPublisherFileResponse.err)
  return err_.GetNoArena();
}
inline void RPCGetPublisherFileResponse::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetPublisherFileResponse.err)
}
#if LANG_CXX11
inline void RPCGetPublisherFileResponse::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetPublisherFileResponse.err)
}
#endif
inline void RPCGetPublisherFileResponse::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetPublisherFileResponse.err)
}
inline void RPCGetPublisherFileResponse::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetPublisherFileResponse.err)
}
inline ::std::string* RPCGetPublisherFileResponse::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetPublisherFileResponse.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetPublisherFileResponse::release_err() {
  // @@protoc_insertion_point(field_release:pb.RPCGetPublisherFileResponse.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetPublisherFileResponse::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetPublisherFileResponse.err)
}

// bytes file = 2;
inline void RPCGetPublisherFileResponse::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetPublisherFileResponse::file() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetPublisherFileResponse.file)
  return file_.GetNoArena();
}
inline void RPCGetPublisherFileResponse::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetPublisherFileResponse.file)
}
#if LANG_CXX11
inline void RPCGetPublisherFileResponse::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetPublisherFileResponse.file)
}
#endif
inline void RPCGetPublisherFileResponse::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetPublisherFileResponse.file)
}
inline void RPCGetPublisherFileResponse::set_file(const void* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetPublisherFileResponse.file)
}
inline ::std::string* RPCGetPublisherFileResponse::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetPublisherFileResponse.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetPublisherFileResponse::release_file() {
  // @@protoc_insertion_point(field_release:pb.RPCGetPublisherFileResponse.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetPublisherFileResponse::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetPublisherFileResponse.file)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_2fstorage_2eproto__INCLUDED
