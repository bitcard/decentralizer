// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/platform.proto

#include "pb/platform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace pb {
class RPCHealthRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCHealthRequest>
      _instance;
} _RPCHealthRequest_default_instance_;
class RPCHealthReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCHealthReply>
      _instance;
} _RPCHealthReply_default_instance_;
class RPCGetPeerReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCGetPeerReply>
      _instance;
} _RPCGetPeerReply_default_instance_;
class RPCMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPCMessage>
      _instance;
  const ::pb::RPCHealthRequest* healthrequest_;
  const ::pb::RPCHealthReply* healthreply_;
  const ::pb::RPCAddressBookPeerRequest* addressbookpeerrequest_;
  const ::pb::RPCAddressBookPeerResponse* addressbookpeerresponse_;
  const ::pb::RPCUpsertSessionRequest* upsertsessionrequest_;
  const ::pb::RPCUpsertSessionResponse* upsertsessionresponse_;
  const ::pb::RPCDeleteSessionRequest* deletesessionrequest_;
  const ::pb::RPCDeleteSessionResponse* deletesessionresponse_;
  const ::pb::RPCSessionIdsRequest* sessionidsrequest_;
  const ::pb::RPCSessionIdsResponse* sessionidsresponse_;
  const ::pb::RPCGetSessionRequest* getsessionrequest_;
  const ::pb::RPCGetSessionResponse* getsessionresponse_;
} _RPCMessage_default_instance_;
}  // namespace pb
namespace protobuf_pb_2fplatform_2eproto {
void InitDefaultsRPCHealthRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCHealthRequest_default_instance_;
    new (ptr) ::pb::RPCHealthRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCHealthRequest::InitAsDefaultInstance();
}

void InitDefaultsRPCHealthRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCHealthRequestImpl);
}

void InitDefaultsRPCHealthReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCHealthReply_default_instance_;
    new (ptr) ::pb::RPCHealthReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCHealthReply::InitAsDefaultInstance();
}

void InitDefaultsRPCHealthReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCHealthReplyImpl);
}

void InitDefaultsRPCGetPeerReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pb::_RPCGetPeerReply_default_instance_;
    new (ptr) ::pb::RPCGetPeerReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCGetPeerReply::InitAsDefaultInstance();
}

void InitDefaultsRPCGetPeerReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCGetPeerReplyImpl);
}

void InitDefaultsRPCMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pb_2fplatform_2eproto::InitDefaultsRPCHealthRequest();
  protobuf_pb_2fplatform_2eproto::InitDefaultsRPCHealthReply();
  protobuf_pb_2faddressbook_2eproto::InitDefaultsRPCAddressBookPeerRequest();
  protobuf_pb_2faddressbook_2eproto::InitDefaultsRPCAddressBookPeerResponse();
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionRequest();
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionResponse();
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionRequest();
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionResponse();
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCSessionIdsRequest();
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCSessionIdsResponse();
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionRequest();
  protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionResponse();
  {
    void* ptr = &::pb::_RPCMessage_default_instance_;
    new (ptr) ::pb::RPCMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RPCMessage::InitAsDefaultInstance();
}

void InitDefaultsRPCMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRPCMessageImpl);
}

}  // namespace protobuf_pb_2fplatform_2eproto
namespace pb {

// ===================================================================

void RPCHealthRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCHealthRequest::RPCHealthRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fplatform_2eproto::InitDefaultsRPCHealthRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCHealthRequest)
}
RPCHealthRequest::RPCHealthRequest(const RPCHealthRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RPCHealthRequest)
}

void RPCHealthRequest::SharedCtor() {
  _cached_size_ = 0;
}

RPCHealthRequest::~RPCHealthRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCHealthRequest)
  SharedDtor();
}

void RPCHealthRequest::SharedDtor() {
}

void RPCHealthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCHealthRequest& RPCHealthRequest::default_instance() {
  ::protobuf_pb_2fplatform_2eproto::InitDefaultsRPCHealthRequest();
  return *internal_default_instance();
}

RPCHealthRequest* RPCHealthRequest::New(::google::protobuf::Arena* arena) const {
  RPCHealthRequest* n = new RPCHealthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCHealthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCHealthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RPCHealthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.RPCHealthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCHealthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCHealthRequest)
  return false;
#undef DO_
}

void RPCHealthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCHealthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.RPCHealthRequest)
}

size_t RPCHealthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCHealthRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCHealthRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCHealthRequest*>(&from));
}

void RPCHealthRequest::MergeFrom(const RPCHealthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCHealthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RPCHealthRequest::CopyFrom(const RPCHealthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCHealthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCHealthRequest::IsInitialized() const {
  return true;
}

void RPCHealthRequest::Swap(RPCHealthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCHealthRequest::InternalSwap(RPCHealthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCHealthRequest::GetTypeName() const {
  return "pb.RPCHealthRequest";
}


// ===================================================================

void RPCHealthReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCHealthReply::kReadyFieldNumber;
const int RPCHealthReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCHealthReply::RPCHealthReply()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fplatform_2eproto::InitDefaultsRPCHealthReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCHealthReply)
}
RPCHealthReply::RPCHealthReply(const RPCHealthReply& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ready_ = from.ready_;
  // @@protoc_insertion_point(copy_constructor:pb.RPCHealthReply)
}

void RPCHealthReply::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ready_ = false;
  _cached_size_ = 0;
}

RPCHealthReply::~RPCHealthReply() {
  // @@protoc_insertion_point(destructor:pb.RPCHealthReply)
  SharedDtor();
}

void RPCHealthReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCHealthReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCHealthReply& RPCHealthReply::default_instance() {
  ::protobuf_pb_2fplatform_2eproto::InitDefaultsRPCHealthReply();
  return *internal_default_instance();
}

RPCHealthReply* RPCHealthReply::New(::google::protobuf::Arena* arena) const {
  RPCHealthReply* n = new RPCHealthReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCHealthReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCHealthReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ready_ = false;
  _internal_metadata_.Clear();
}

bool RPCHealthReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.RPCHealthReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ready = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCHealthReply.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCHealthReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCHealthReply)
  return false;
#undef DO_
}

void RPCHealthReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCHealthReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ready(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCHealthReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.RPCHealthReply)
}

size_t RPCHealthReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCHealthReply)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // bool ready = 1;
  if (this->ready() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCHealthReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCHealthReply*>(&from));
}

void RPCHealthReply::MergeFrom(const RPCHealthReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCHealthReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.ready() != 0) {
    set_ready(from.ready());
  }
}

void RPCHealthReply::CopyFrom(const RPCHealthReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCHealthReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCHealthReply::IsInitialized() const {
  return true;
}

void RPCHealthReply::Swap(RPCHealthReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCHealthReply::InternalSwap(RPCHealthReply* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(ready_, other->ready_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCHealthReply::GetTypeName() const {
  return "pb.RPCHealthReply";
}


// ===================================================================

void RPCGetPeerReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCGetPeerReply::kReadyFieldNumber;
const int RPCGetPeerReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCGetPeerReply::RPCGetPeerReply()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fplatform_2eproto::InitDefaultsRPCGetPeerReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCGetPeerReply)
}
RPCGetPeerReply::RPCGetPeerReply(const RPCGetPeerReply& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ready_ = from.ready_;
  // @@protoc_insertion_point(copy_constructor:pb.RPCGetPeerReply)
}

void RPCGetPeerReply::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ready_ = false;
  _cached_size_ = 0;
}

RPCGetPeerReply::~RPCGetPeerReply() {
  // @@protoc_insertion_point(destructor:pb.RPCGetPeerReply)
  SharedDtor();
}

void RPCGetPeerReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCGetPeerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCGetPeerReply& RPCGetPeerReply::default_instance() {
  ::protobuf_pb_2fplatform_2eproto::InitDefaultsRPCGetPeerReply();
  return *internal_default_instance();
}

RPCGetPeerReply* RPCGetPeerReply::New(::google::protobuf::Arena* arena) const {
  RPCGetPeerReply* n = new RPCGetPeerReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCGetPeerReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCGetPeerReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ready_ = false;
  _internal_metadata_.Clear();
}

bool RPCGetPeerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.RPCGetPeerReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ready = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCGetPeerReply.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCGetPeerReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCGetPeerReply)
  return false;
#undef DO_
}

void RPCGetPeerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCGetPeerReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ready(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCGetPeerReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.RPCGetPeerReply)
}

size_t RPCGetPeerReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCGetPeerReply)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // bool ready = 1;
  if (this->ready() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCGetPeerReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCGetPeerReply*>(&from));
}

void RPCGetPeerReply::MergeFrom(const RPCGetPeerReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCGetPeerReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.ready() != 0) {
    set_ready(from.ready());
  }
}

void RPCGetPeerReply::CopyFrom(const RPCGetPeerReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCGetPeerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCGetPeerReply::IsInitialized() const {
  return true;
}

void RPCGetPeerReply::Swap(RPCGetPeerReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCGetPeerReply::InternalSwap(RPCGetPeerReply* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(ready_, other->ready_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCGetPeerReply::GetTypeName() const {
  return "pb.RPCGetPeerReply";
}


// ===================================================================

void RPCMessage::InitAsDefaultInstance() {
}
void RPCMessage::set_allocated_healthrequest(::pb::RPCHealthRequest* healthrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (healthrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      healthrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, healthrequest, submessage_arena);
    }
    set_has_healthrequest();
    msg_.healthrequest_ = healthrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.healthRequest)
}
void RPCMessage::set_allocated_healthreply(::pb::RPCHealthReply* healthreply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (healthreply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      healthreply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, healthreply, submessage_arena);
    }
    set_has_healthreply();
    msg_.healthreply_ = healthreply;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.HealthReply)
}
void RPCMessage::set_allocated_addressbookpeerrequest(::pb::RPCAddressBookPeerRequest* addressbookpeerrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (addressbookpeerrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      addressbookpeerrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, addressbookpeerrequest, submessage_arena);
    }
    set_has_addressbookpeerrequest();
    msg_.addressbookpeerrequest_ = addressbookpeerrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.AddressBookPeerRequest)
}
void RPCMessage::clear_addressbookpeerrequest() {
  if (has_addressbookpeerrequest()) {
    delete msg_.addressbookpeerrequest_;
    clear_has_msg();
  }
}
void RPCMessage::set_allocated_addressbookpeerresponse(::pb::RPCAddressBookPeerResponse* addressbookpeerresponse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (addressbookpeerresponse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      addressbookpeerresponse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, addressbookpeerresponse, submessage_arena);
    }
    set_has_addressbookpeerresponse();
    msg_.addressbookpeerresponse_ = addressbookpeerresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.AddressBookPeerResponse)
}
void RPCMessage::clear_addressbookpeerresponse() {
  if (has_addressbookpeerresponse()) {
    delete msg_.addressbookpeerresponse_;
    clear_has_msg();
  }
}
void RPCMessage::set_allocated_upsertsessionrequest(::pb::RPCUpsertSessionRequest* upsertsessionrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (upsertsessionrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upsertsessionrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upsertsessionrequest, submessage_arena);
    }
    set_has_upsertsessionrequest();
    msg_.upsertsessionrequest_ = upsertsessionrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.UpsertSessionRequest)
}
void RPCMessage::clear_upsertsessionrequest() {
  if (has_upsertsessionrequest()) {
    delete msg_.upsertsessionrequest_;
    clear_has_msg();
  }
}
void RPCMessage::set_allocated_upsertsessionresponse(::pb::RPCUpsertSessionResponse* upsertsessionresponse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (upsertsessionresponse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upsertsessionresponse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upsertsessionresponse, submessage_arena);
    }
    set_has_upsertsessionresponse();
    msg_.upsertsessionresponse_ = upsertsessionresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.UpsertSessionResponse)
}
void RPCMessage::clear_upsertsessionresponse() {
  if (has_upsertsessionresponse()) {
    delete msg_.upsertsessionresponse_;
    clear_has_msg();
  }
}
void RPCMessage::set_allocated_deletesessionrequest(::pb::RPCDeleteSessionRequest* deletesessionrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (deletesessionrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deletesessionrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deletesessionrequest, submessage_arena);
    }
    set_has_deletesessionrequest();
    msg_.deletesessionrequest_ = deletesessionrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.DeleteSessionRequest)
}
void RPCMessage::clear_deletesessionrequest() {
  if (has_deletesessionrequest()) {
    delete msg_.deletesessionrequest_;
    clear_has_msg();
  }
}
void RPCMessage::set_allocated_deletesessionresponse(::pb::RPCDeleteSessionResponse* deletesessionresponse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (deletesessionresponse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deletesessionresponse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deletesessionresponse, submessage_arena);
    }
    set_has_deletesessionresponse();
    msg_.deletesessionresponse_ = deletesessionresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.DeleteSessionResponse)
}
void RPCMessage::clear_deletesessionresponse() {
  if (has_deletesessionresponse()) {
    delete msg_.deletesessionresponse_;
    clear_has_msg();
  }
}
void RPCMessage::set_allocated_sessionidsrequest(::pb::RPCSessionIdsRequest* sessionidsrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (sessionidsrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sessionidsrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sessionidsrequest, submessage_arena);
    }
    set_has_sessionidsrequest();
    msg_.sessionidsrequest_ = sessionidsrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.SessionIdsRequest)
}
void RPCMessage::clear_sessionidsrequest() {
  if (has_sessionidsrequest()) {
    delete msg_.sessionidsrequest_;
    clear_has_msg();
  }
}
void RPCMessage::set_allocated_sessionidsresponse(::pb::RPCSessionIdsResponse* sessionidsresponse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (sessionidsresponse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sessionidsresponse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sessionidsresponse, submessage_arena);
    }
    set_has_sessionidsresponse();
    msg_.sessionidsresponse_ = sessionidsresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.SessionIdsResponse)
}
void RPCMessage::clear_sessionidsresponse() {
  if (has_sessionidsresponse()) {
    delete msg_.sessionidsresponse_;
    clear_has_msg();
  }
}
void RPCMessage::set_allocated_getsessionrequest(::pb::RPCGetSessionRequest* getsessionrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (getsessionrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      getsessionrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, getsessionrequest, submessage_arena);
    }
    set_has_getsessionrequest();
    msg_.getsessionrequest_ = getsessionrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.GetSessionRequest)
}
void RPCMessage::clear_getsessionrequest() {
  if (has_getsessionrequest()) {
    delete msg_.getsessionrequest_;
    clear_has_msg();
  }
}
void RPCMessage::set_allocated_getsessionresponse(::pb::RPCGetSessionResponse* getsessionresponse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (getsessionresponse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      getsessionresponse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, getsessionresponse, submessage_arena);
    }
    set_has_getsessionresponse();
    msg_.getsessionresponse_ = getsessionresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.GetSessionResponse)
}
void RPCMessage::clear_getsessionresponse() {
  if (has_getsessionresponse()) {
    delete msg_.getsessionresponse_;
    clear_has_msg();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCMessage::kVersionFieldNumber;
const int RPCMessage::kIdFieldNumber;
const int RPCMessage::kHealthRequestFieldNumber;
const int RPCMessage::kHealthReplyFieldNumber;
const int RPCMessage::kAddressBookPeerRequestFieldNumber;
const int RPCMessage::kAddressBookPeerResponseFieldNumber;
const int RPCMessage::kUpsertSessionRequestFieldNumber;
const int RPCMessage::kUpsertSessionResponseFieldNumber;
const int RPCMessage::kDeleteSessionRequestFieldNumber;
const int RPCMessage::kDeleteSessionResponseFieldNumber;
const int RPCMessage::kSessionIdsRequestFieldNumber;
const int RPCMessage::kSessionIdsResponseFieldNumber;
const int RPCMessage::kGetSessionRequestFieldNumber;
const int RPCMessage::kGetSessionResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCMessage::RPCMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pb_2fplatform_2eproto::InitDefaultsRPCMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCMessage)
}
RPCMessage::RPCMessage(const RPCMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(id_));
  clear_has_msg();
  switch (from.msg_case()) {
    case kHealthRequest: {
      mutable_healthrequest()->::pb::RPCHealthRequest::MergeFrom(from.healthrequest());
      break;
    }
    case kHealthReply: {
      mutable_healthreply()->::pb::RPCHealthReply::MergeFrom(from.healthreply());
      break;
    }
    case kAddressBookPeerRequest: {
      mutable_addressbookpeerrequest()->::pb::RPCAddressBookPeerRequest::MergeFrom(from.addressbookpeerrequest());
      break;
    }
    case kAddressBookPeerResponse: {
      mutable_addressbookpeerresponse()->::pb::RPCAddressBookPeerResponse::MergeFrom(from.addressbookpeerresponse());
      break;
    }
    case kUpsertSessionRequest: {
      mutable_upsertsessionrequest()->::pb::RPCUpsertSessionRequest::MergeFrom(from.upsertsessionrequest());
      break;
    }
    case kUpsertSessionResponse: {
      mutable_upsertsessionresponse()->::pb::RPCUpsertSessionResponse::MergeFrom(from.upsertsessionresponse());
      break;
    }
    case kDeleteSessionRequest: {
      mutable_deletesessionrequest()->::pb::RPCDeleteSessionRequest::MergeFrom(from.deletesessionrequest());
      break;
    }
    case kDeleteSessionResponse: {
      mutable_deletesessionresponse()->::pb::RPCDeleteSessionResponse::MergeFrom(from.deletesessionresponse());
      break;
    }
    case kSessionIdsRequest: {
      mutable_sessionidsrequest()->::pb::RPCSessionIdsRequest::MergeFrom(from.sessionidsrequest());
      break;
    }
    case kSessionIdsResponse: {
      mutable_sessionidsresponse()->::pb::RPCSessionIdsResponse::MergeFrom(from.sessionidsresponse());
      break;
    }
    case kGetSessionRequest: {
      mutable_getsessionrequest()->::pb::RPCGetSessionRequest::MergeFrom(from.getsessionrequest());
      break;
    }
    case kGetSessionResponse: {
      mutable_getsessionresponse()->::pb::RPCGetSessionResponse::MergeFrom(from.getsessionresponse());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.RPCMessage)
}

void RPCMessage::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(id_));
  clear_has_msg();
  _cached_size_ = 0;
}

RPCMessage::~RPCMessage() {
  // @@protoc_insertion_point(destructor:pb.RPCMessage)
  SharedDtor();
}

void RPCMessage::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void RPCMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCMessage& RPCMessage::default_instance() {
  ::protobuf_pb_2fplatform_2eproto::InitDefaultsRPCMessage();
  return *internal_default_instance();
}

RPCMessage* RPCMessage::New(::google::protobuf::Arena* arena) const {
  RPCMessage* n = new RPCMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:pb.RPCMessage)
  switch (msg_case()) {
    case kHealthRequest: {
      delete msg_.healthrequest_;
      break;
    }
    case kHealthReply: {
      delete msg_.healthreply_;
      break;
    }
    case kAddressBookPeerRequest: {
      delete msg_.addressbookpeerrequest_;
      break;
    }
    case kAddressBookPeerResponse: {
      delete msg_.addressbookpeerresponse_;
      break;
    }
    case kUpsertSessionRequest: {
      delete msg_.upsertsessionrequest_;
      break;
    }
    case kUpsertSessionResponse: {
      delete msg_.upsertsessionresponse_;
      break;
    }
    case kDeleteSessionRequest: {
      delete msg_.deletesessionrequest_;
      break;
    }
    case kDeleteSessionResponse: {
      delete msg_.deletesessionresponse_;
      break;
    }
    case kSessionIdsRequest: {
      delete msg_.sessionidsrequest_;
      break;
    }
    case kSessionIdsResponse: {
      delete msg_.sessionidsresponse_;
      break;
    }
    case kGetSessionRequest: {
      delete msg_.getsessionrequest_;
      break;
    }
    case kGetSessionResponse: {
      delete msg_.getsessionresponse_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void RPCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(id_));
  clear_msg();
  _internal_metadata_.Clear();
}

bool RPCMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pb.RPCMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCHealthRequest healthRequest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_healthrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCHealthReply HealthReply = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_healthreply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCAddressBookPeerRequest AddressBookPeerRequest = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_addressbookpeerrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCAddressBookPeerResponse AddressBookPeerResponse = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_addressbookpeerresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCUpsertSessionRequest UpsertSessionRequest = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upsertsessionrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCUpsertSessionResponse UpsertSessionResponse = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upsertsessionresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCDeleteSessionRequest DeleteSessionRequest = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deletesessionrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCDeleteSessionResponse DeleteSessionResponse = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deletesessionresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCSessionIdsRequest SessionIdsRequest = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sessionidsrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCSessionIdsResponse SessionIdsResponse = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sessionidsresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCGetSessionRequest GetSessionRequest = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getsessionrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RPCGetSessionResponse GetSessionResponse = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getsessionresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCMessage)
  return false;
#undef DO_
}

void RPCMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // .pb.RPCHealthRequest healthRequest = 3;
  if (has_healthrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *msg_.healthrequest_, output);
  }

  // .pb.RPCHealthReply HealthReply = 4;
  if (has_healthreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *msg_.healthreply_, output);
  }

  // .pb.RPCAddressBookPeerRequest AddressBookPeerRequest = 5;
  if (has_addressbookpeerrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *msg_.addressbookpeerrequest_, output);
  }

  // .pb.RPCAddressBookPeerResponse AddressBookPeerResponse = 6;
  if (has_addressbookpeerresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *msg_.addressbookpeerresponse_, output);
  }

  // .pb.RPCUpsertSessionRequest UpsertSessionRequest = 7;
  if (has_upsertsessionrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *msg_.upsertsessionrequest_, output);
  }

  // .pb.RPCUpsertSessionResponse UpsertSessionResponse = 8;
  if (has_upsertsessionresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *msg_.upsertsessionresponse_, output);
  }

  // .pb.RPCDeleteSessionRequest DeleteSessionRequest = 9;
  if (has_deletesessionrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *msg_.deletesessionrequest_, output);
  }

  // .pb.RPCDeleteSessionResponse DeleteSessionResponse = 10;
  if (has_deletesessionresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *msg_.deletesessionresponse_, output);
  }

  // .pb.RPCSessionIdsRequest SessionIdsRequest = 11;
  if (has_sessionidsrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *msg_.sessionidsrequest_, output);
  }

  // .pb.RPCSessionIdsResponse SessionIdsResponse = 12;
  if (has_sessionidsresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *msg_.sessionidsresponse_, output);
  }

  // .pb.RPCGetSessionRequest GetSessionRequest = 13;
  if (has_getsessionrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *msg_.getsessionrequest_, output);
  }

  // .pb.RPCGetSessionResponse GetSessionResponse = 14;
  if (has_getsessionresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *msg_.getsessionresponse_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pb.RPCMessage)
}

size_t RPCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCMessage)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // int64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  switch (msg_case()) {
    // .pb.RPCHealthRequest healthRequest = 3;
    case kHealthRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.healthrequest_);
      break;
    }
    // .pb.RPCHealthReply HealthReply = 4;
    case kHealthReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.healthreply_);
      break;
    }
    // .pb.RPCAddressBookPeerRequest AddressBookPeerRequest = 5;
    case kAddressBookPeerRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.addressbookpeerrequest_);
      break;
    }
    // .pb.RPCAddressBookPeerResponse AddressBookPeerResponse = 6;
    case kAddressBookPeerResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.addressbookpeerresponse_);
      break;
    }
    // .pb.RPCUpsertSessionRequest UpsertSessionRequest = 7;
    case kUpsertSessionRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.upsertsessionrequest_);
      break;
    }
    // .pb.RPCUpsertSessionResponse UpsertSessionResponse = 8;
    case kUpsertSessionResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.upsertsessionresponse_);
      break;
    }
    // .pb.RPCDeleteSessionRequest DeleteSessionRequest = 9;
    case kDeleteSessionRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.deletesessionrequest_);
      break;
    }
    // .pb.RPCDeleteSessionResponse DeleteSessionResponse = 10;
    case kDeleteSessionResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.deletesessionresponse_);
      break;
    }
    // .pb.RPCSessionIdsRequest SessionIdsRequest = 11;
    case kSessionIdsRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.sessionidsrequest_);
      break;
    }
    // .pb.RPCSessionIdsResponse SessionIdsResponse = 12;
    case kSessionIdsResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.sessionidsresponse_);
      break;
    }
    // .pb.RPCGetSessionRequest GetSessionRequest = 13;
    case kGetSessionRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.getsessionrequest_);
      break;
    }
    // .pb.RPCGetSessionResponse GetSessionResponse = 14;
    case kGetSessionResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.getsessionresponse_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCMessage*>(&from));
}

void RPCMessage::MergeFrom(const RPCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  switch (from.msg_case()) {
    case kHealthRequest: {
      mutable_healthrequest()->::pb::RPCHealthRequest::MergeFrom(from.healthrequest());
      break;
    }
    case kHealthReply: {
      mutable_healthreply()->::pb::RPCHealthReply::MergeFrom(from.healthreply());
      break;
    }
    case kAddressBookPeerRequest: {
      mutable_addressbookpeerrequest()->::pb::RPCAddressBookPeerRequest::MergeFrom(from.addressbookpeerrequest());
      break;
    }
    case kAddressBookPeerResponse: {
      mutable_addressbookpeerresponse()->::pb::RPCAddressBookPeerResponse::MergeFrom(from.addressbookpeerresponse());
      break;
    }
    case kUpsertSessionRequest: {
      mutable_upsertsessionrequest()->::pb::RPCUpsertSessionRequest::MergeFrom(from.upsertsessionrequest());
      break;
    }
    case kUpsertSessionResponse: {
      mutable_upsertsessionresponse()->::pb::RPCUpsertSessionResponse::MergeFrom(from.upsertsessionresponse());
      break;
    }
    case kDeleteSessionRequest: {
      mutable_deletesessionrequest()->::pb::RPCDeleteSessionRequest::MergeFrom(from.deletesessionrequest());
      break;
    }
    case kDeleteSessionResponse: {
      mutable_deletesessionresponse()->::pb::RPCDeleteSessionResponse::MergeFrom(from.deletesessionresponse());
      break;
    }
    case kSessionIdsRequest: {
      mutable_sessionidsrequest()->::pb::RPCSessionIdsRequest::MergeFrom(from.sessionidsrequest());
      break;
    }
    case kSessionIdsResponse: {
      mutable_sessionidsresponse()->::pb::RPCSessionIdsResponse::MergeFrom(from.sessionidsresponse());
      break;
    }
    case kGetSessionRequest: {
      mutable_getsessionrequest()->::pb::RPCGetSessionRequest::MergeFrom(from.getsessionrequest());
      break;
    }
    case kGetSessionResponse: {
      mutable_getsessionresponse()->::pb::RPCGetSessionResponse::MergeFrom(from.getsessionresponse());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void RPCMessage::CopyFrom(const RPCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCMessage::IsInitialized() const {
  return true;
}

void RPCMessage::Swap(RPCMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCMessage::InternalSwap(RPCMessage* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(id_, other->id_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string RPCMessage::GetTypeName() const {
  return "pb.RPCMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb

// @@protoc_insertion_point(global_scope)
