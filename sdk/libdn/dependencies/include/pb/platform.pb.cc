// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/platform.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb/platform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace pb {

void protobuf_ShutdownFile_pb_2fplatform_2eproto() {
  RPCHealthRequest_default_instance_.Shutdown();
  RPCHealthReply_default_instance_.Shutdown();
  RPCMessage_default_instance_.Shutdown();
}

void protobuf_InitDefaults_pb_2fplatform_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_InitDefaults_pb_2fmatchmaking_2eproto();
  RPCHealthRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RPCHealthReply_default_instance_.DefaultConstruct();
  RPCMessage_default_instance_.DefaultConstruct();
  RPCHealthRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RPCHealthReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  RPCMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_pb_2fplatform_2eproto_once_);
void protobuf_InitDefaults_pb_2fplatform_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_pb_2fplatform_2eproto_once_,
                 &protobuf_InitDefaults_pb_2fplatform_2eproto_impl);
}
void protobuf_AddDesc_pb_2fplatform_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_pb_2fplatform_2eproto();
  ::pb::protobuf_AddDesc_pb_2fmatchmaking_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_2fplatform_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pb_2fplatform_2eproto_once_);
void protobuf_AddDesc_pb_2fplatform_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pb_2fplatform_2eproto_once_,
                 &protobuf_AddDesc_pb_2fplatform_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_2fplatform_2eproto {
  StaticDescriptorInitializer_pb_2fplatform_2eproto() {
    protobuf_AddDesc_pb_2fplatform_2eproto();
  }
} static_descriptor_initializer_pb_2fplatform_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCHealthRequest::RPCHealthRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fplatform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCHealthRequest)
}

void RPCHealthRequest::InitAsDefaultInstance() {
}

RPCHealthRequest::RPCHealthRequest(const RPCHealthRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RPCHealthRequest)
}

void RPCHealthRequest::SharedCtor() {
  _cached_size_ = 0;
}

RPCHealthRequest::~RPCHealthRequest() {
  // @@protoc_insertion_point(destructor:pb.RPCHealthRequest)
  SharedDtor();
}

void RPCHealthRequest::SharedDtor() {
}

void RPCHealthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCHealthRequest& RPCHealthRequest::default_instance() {
  protobuf_InitDefaults_pb_2fplatform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RPCHealthRequest> RPCHealthRequest_default_instance_;

RPCHealthRequest* RPCHealthRequest::New(::google::protobuf::Arena* arena) const {
  RPCHealthRequest* n = new RPCHealthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCHealthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCHealthRequest)
}

bool RPCHealthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCHealthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCHealthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCHealthRequest)
  return false;
#undef DO_
}

void RPCHealthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCHealthRequest)
  // @@protoc_insertion_point(serialize_end:pb.RPCHealthRequest)
}

size_t RPCHealthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCHealthRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCHealthRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCHealthRequest*>(&from));
}

void RPCHealthRequest::MergeFrom(const RPCHealthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCHealthRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RPCHealthRequest::UnsafeMergeFrom(const RPCHealthRequest& from) {
  GOOGLE_DCHECK(&from != this);
}

void RPCHealthRequest::CopyFrom(const RPCHealthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCHealthRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RPCHealthRequest::IsInitialized() const {

  return true;
}

void RPCHealthRequest::Swap(RPCHealthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCHealthRequest::InternalSwap(RPCHealthRequest* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RPCHealthRequest::GetTypeName() const {
  return "pb.RPCHealthRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCHealthRequest

inline const RPCHealthRequest* RPCHealthRequest::internal_default_instance() {
  return &RPCHealthRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCHealthReply::kReadyFieldNumber;
const int RPCHealthReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCHealthReply::RPCHealthReply()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fplatform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCHealthReply)
}

void RPCHealthReply::InitAsDefaultInstance() {
}

RPCHealthReply::RPCHealthReply(const RPCHealthReply& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RPCHealthReply)
}

void RPCHealthReply::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ready_ = false;
  _cached_size_ = 0;
}

RPCHealthReply::~RPCHealthReply() {
  // @@protoc_insertion_point(destructor:pb.RPCHealthReply)
  SharedDtor();
}

void RPCHealthReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCHealthReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCHealthReply& RPCHealthReply::default_instance() {
  protobuf_InitDefaults_pb_2fplatform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RPCHealthReply> RPCHealthReply_default_instance_;

RPCHealthReply* RPCHealthReply::New(::google::protobuf::Arena* arena) const {
  RPCHealthReply* n = new RPCHealthReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCHealthReply::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCHealthReply)
  ready_ = false;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RPCHealthReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCHealthReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ready = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RPCHealthReply.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCHealthReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCHealthReply)
  return false;
#undef DO_
}

void RPCHealthReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCHealthReply)
  // optional bool ready = 1;
  if (this->ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ready(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RPCHealthReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.RPCHealthReply)
}

size_t RPCHealthReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCHealthReply)
  size_t total_size = 0;

  // optional bool ready = 1;
  if (this->ready() != 0) {
    total_size += 1 + 1;
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCHealthReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCHealthReply*>(&from));
}

void RPCHealthReply::MergeFrom(const RPCHealthReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCHealthReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RPCHealthReply::UnsafeMergeFrom(const RPCHealthReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.ready() != 0) {
    set_ready(from.ready());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void RPCHealthReply::CopyFrom(const RPCHealthReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCHealthReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RPCHealthReply::IsInitialized() const {

  return true;
}

void RPCHealthReply::Swap(RPCHealthReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCHealthReply::InternalSwap(RPCHealthReply* other) {
  std::swap(ready_, other->ready_);
  message_.Swap(&other->message_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RPCHealthReply::GetTypeName() const {
  return "pb.RPCHealthReply";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCHealthReply

// optional bool ready = 1;
void RPCHealthReply::clear_ready() {
  ready_ = false;
}
bool RPCHealthReply::ready() const {
  // @@protoc_insertion_point(field_get:pb.RPCHealthReply.ready)
  return ready_;
}
void RPCHealthReply::set_ready(bool value) {
  
  ready_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCHealthReply.ready)
}

// optional string message = 2;
void RPCHealthReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RPCHealthReply::message() const {
  // @@protoc_insertion_point(field_get:pb.RPCHealthReply.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RPCHealthReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCHealthReply.message)
}
void RPCHealthReply::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCHealthReply.message)
}
void RPCHealthReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCHealthReply.message)
}
::std::string* RPCHealthReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCHealthReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RPCHealthReply::release_message() {
  // @@protoc_insertion_point(field_release:pb.RPCHealthReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RPCHealthReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCHealthReply.message)
}

inline const RPCHealthReply* RPCHealthReply::internal_default_instance() {
  return &RPCHealthReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCMessage::kVersionFieldNumber;
const int RPCMessage::kIdFieldNumber;
const int RPCMessage::kHealthRequestFieldNumber;
const int RPCMessage::kHealthReplyFieldNumber;
const int RPCMessage::kUpsertSessionRequestFieldNumber;
const int RPCMessage::kUpsertSessionResponseFieldNumber;
const int RPCMessage::kGetSessionsRequestFieldNumber;
const int RPCMessage::kGetSessionsResponseFieldNumber;
const int RPCMessage::kDeleteSessionRequestFieldNumber;
const int RPCMessage::kDeleteSessionResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCMessage::RPCMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pb_2fplatform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RPCMessage)
}

void RPCMessage::InitAsDefaultInstance() {
}

RPCMessage::RPCMessage(const RPCMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RPCMessage)
}

void RPCMessage::SharedCtor() {
  ::memset(&version_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&version_) + sizeof(id_));
  clear_has_msg();
  _cached_size_ = 0;
}

RPCMessage::~RPCMessage() {
  // @@protoc_insertion_point(destructor:pb.RPCMessage)
  SharedDtor();
}

void RPCMessage::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void RPCMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPCMessage& RPCMessage::default_instance() {
  protobuf_InitDefaults_pb_2fplatform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RPCMessage> RPCMessage_default_instance_;

RPCMessage* RPCMessage::New(::google::protobuf::Arena* arena) const {
  RPCMessage* n = new RPCMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:pb.RPCMessage)
  switch (msg_case()) {
    case kHealthRequest: {
      delete msg_.healthrequest_;
      break;
    }
    case kHealthReply: {
      delete msg_.healthreply_;
      break;
    }
    case kUpsertSessionRequest: {
      delete msg_.upsertsessionrequest_;
      break;
    }
    case kUpsertSessionResponse: {
      delete msg_.upsertsessionresponse_;
      break;
    }
    case kGetSessionsRequest: {
      delete msg_.getsessionsrequest_;
      break;
    }
    case kGetSessionsResponse: {
      delete msg_.getsessionsresponse_;
      break;
    }
    case kDeleteSessionRequest: {
      delete msg_.deletesessionrequest_;
      break;
    }
    case kDeleteSessionResponse: {
      delete msg_.deletesessionresponse_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void RPCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RPCMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RPCMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RPCMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, id_);

#undef ZR_HELPER_
#undef ZR_

  clear_msg();
}

bool RPCMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RPCMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 version = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_healthRequest;
        break;
      }

      // optional .pb.RPCHealthRequest healthRequest = 3;
      case 3: {
        if (tag == 26) {
         parse_healthRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_healthrequest()));
        } else {
          goto handle_unusual;
        }
        goto after_deletesessionresponse;
        break;
      }

      // optional .pb.RPCHealthReply HealthReply = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_healthreply()));
        } else {
          goto handle_unusual;
        }
        goto after_deletesessionresponse;
        break;
      }

      // optional .pb.RPCUpsertSessionRequest UpsertSessionRequest = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upsertsessionrequest()));
        } else {
          goto handle_unusual;
        }
        goto after_deletesessionresponse;
        break;
      }

      // optional .pb.RPCUpsertSessionResponse UpsertSessionResponse = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upsertsessionresponse()));
        } else {
          goto handle_unusual;
        }
        goto after_deletesessionresponse;
        break;
      }

      // optional .pb.RPCGetSessionsRequest GetSessionsRequest = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getsessionsrequest()));
        } else {
          goto handle_unusual;
        }
        goto after_deletesessionresponse;
        break;
      }

      // optional .pb.RPCGetSessionsResponse GetSessionsResponse = 8;
      case 8: {
        if (tag == 66) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getsessionsresponse()));
        } else {
          goto handle_unusual;
        }
        goto after_deletesessionresponse;
        break;
      }

      // optional .pb.RPCDeleteSessionRequest DeleteSessionRequest = 9;
      case 9: {
        if (tag == 74) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deletesessionrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_DeleteSessionResponse;
        break;
      }

      // optional .pb.RPCDeleteSessionResponse DeleteSessionResponse = 10;
      case 10: {
        if (tag == 82) {
         parse_DeleteSessionResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deletesessionresponse()));
        } else {
          goto handle_unusual;
        }
       after_deletesessionresponse:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RPCMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RPCMessage)
  return false;
#undef DO_
}

void RPCMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RPCMessage)
  // optional int64 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional .pb.RPCHealthRequest healthRequest = 3;
  if (has_healthrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *msg_.healthrequest_, output);
  }

  // optional .pb.RPCHealthReply HealthReply = 4;
  if (has_healthreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *msg_.healthreply_, output);
  }

  // optional .pb.RPCUpsertSessionRequest UpsertSessionRequest = 5;
  if (has_upsertsessionrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *msg_.upsertsessionrequest_, output);
  }

  // optional .pb.RPCUpsertSessionResponse UpsertSessionResponse = 6;
  if (has_upsertsessionresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *msg_.upsertsessionresponse_, output);
  }

  // optional .pb.RPCGetSessionsRequest GetSessionsRequest = 7;
  if (has_getsessionsrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *msg_.getsessionsrequest_, output);
  }

  // optional .pb.RPCGetSessionsResponse GetSessionsResponse = 8;
  if (has_getsessionsresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *msg_.getsessionsresponse_, output);
  }

  // optional .pb.RPCDeleteSessionRequest DeleteSessionRequest = 9;
  if (has_deletesessionrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *msg_.deletesessionrequest_, output);
  }

  // optional .pb.RPCDeleteSessionResponse DeleteSessionResponse = 10;
  if (has_deletesessionresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *msg_.deletesessionresponse_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.RPCMessage)
}

size_t RPCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RPCMessage)
  size_t total_size = 0;

  // optional int64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  switch (msg_case()) {
    // optional .pb.RPCHealthRequest healthRequest = 3;
    case kHealthRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.healthrequest_);
      break;
    }
    // optional .pb.RPCHealthReply HealthReply = 4;
    case kHealthReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.healthreply_);
      break;
    }
    // optional .pb.RPCUpsertSessionRequest UpsertSessionRequest = 5;
    case kUpsertSessionRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.upsertsessionrequest_);
      break;
    }
    // optional .pb.RPCUpsertSessionResponse UpsertSessionResponse = 6;
    case kUpsertSessionResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.upsertsessionresponse_);
      break;
    }
    // optional .pb.RPCGetSessionsRequest GetSessionsRequest = 7;
    case kGetSessionsRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.getsessionsrequest_);
      break;
    }
    // optional .pb.RPCGetSessionsResponse GetSessionsResponse = 8;
    case kGetSessionsResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.getsessionsresponse_);
      break;
    }
    // optional .pb.RPCDeleteSessionRequest DeleteSessionRequest = 9;
    case kDeleteSessionRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.deletesessionrequest_);
      break;
    }
    // optional .pb.RPCDeleteSessionResponse DeleteSessionResponse = 10;
    case kDeleteSessionResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.deletesessionresponse_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPCMessage*>(&from));
}

void RPCMessage::MergeFrom(const RPCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RPCMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RPCMessage::UnsafeMergeFrom(const RPCMessage& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.msg_case()) {
    case kHealthRequest: {
      mutable_healthrequest()->::pb::RPCHealthRequest::MergeFrom(from.healthrequest());
      break;
    }
    case kHealthReply: {
      mutable_healthreply()->::pb::RPCHealthReply::MergeFrom(from.healthreply());
      break;
    }
    case kUpsertSessionRequest: {
      mutable_upsertsessionrequest()->::pb::RPCUpsertSessionRequest::MergeFrom(from.upsertsessionrequest());
      break;
    }
    case kUpsertSessionResponse: {
      mutable_upsertsessionresponse()->::pb::RPCUpsertSessionResponse::MergeFrom(from.upsertsessionresponse());
      break;
    }
    case kGetSessionsRequest: {
      mutable_getsessionsrequest()->::pb::RPCGetSessionsRequest::MergeFrom(from.getsessionsrequest());
      break;
    }
    case kGetSessionsResponse: {
      mutable_getsessionsresponse()->::pb::RPCGetSessionsResponse::MergeFrom(from.getsessionsresponse());
      break;
    }
    case kDeleteSessionRequest: {
      mutable_deletesessionrequest()->::pb::RPCDeleteSessionRequest::MergeFrom(from.deletesessionrequest());
      break;
    }
    case kDeleteSessionResponse: {
      mutable_deletesessionresponse()->::pb::RPCDeleteSessionResponse::MergeFrom(from.deletesessionresponse());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void RPCMessage::CopyFrom(const RPCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RPCMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RPCMessage::IsInitialized() const {

  return true;
}

void RPCMessage::Swap(RPCMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCMessage::InternalSwap(RPCMessage* other) {
  std::swap(version_, other->version_);
  std::swap(id_, other->id_);
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RPCMessage::GetTypeName() const {
  return "pb.RPCMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCMessage

// optional int64 version = 1;
void RPCMessage::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RPCMessage::version() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.version)
  return version_;
}
void RPCMessage::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCMessage.version)
}

// optional int64 id = 2;
void RPCMessage::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RPCMessage::id() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.id)
  return id_;
}
void RPCMessage::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCMessage.id)
}

// optional .pb.RPCHealthRequest healthRequest = 3;
bool RPCMessage::has_healthrequest() const {
  return msg_case() == kHealthRequest;
}
void RPCMessage::set_has_healthrequest() {
  _oneof_case_[0] = kHealthRequest;
}
void RPCMessage::clear_healthrequest() {
  if (has_healthrequest()) {
    delete msg_.healthrequest_;
    clear_has_msg();
  }
}
 const ::pb::RPCHealthRequest& RPCMessage::healthrequest() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.healthRequest)
  return has_healthrequest()
      ? *msg_.healthrequest_
      : ::pb::RPCHealthRequest::default_instance();
}
::pb::RPCHealthRequest* RPCMessage::mutable_healthrequest() {
  if (!has_healthrequest()) {
    clear_msg();
    set_has_healthrequest();
    msg_.healthrequest_ = new ::pb::RPCHealthRequest;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.healthRequest)
  return msg_.healthrequest_;
}
::pb::RPCHealthRequest* RPCMessage::release_healthrequest() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.healthRequest)
  if (has_healthrequest()) {
    clear_has_msg();
    ::pb::RPCHealthRequest* temp = msg_.healthrequest_;
    msg_.healthrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RPCMessage::set_allocated_healthrequest(::pb::RPCHealthRequest* healthrequest) {
  clear_msg();
  if (healthrequest) {
    set_has_healthrequest();
    msg_.healthrequest_ = healthrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.healthRequest)
}

// optional .pb.RPCHealthReply HealthReply = 4;
bool RPCMessage::has_healthreply() const {
  return msg_case() == kHealthReply;
}
void RPCMessage::set_has_healthreply() {
  _oneof_case_[0] = kHealthReply;
}
void RPCMessage::clear_healthreply() {
  if (has_healthreply()) {
    delete msg_.healthreply_;
    clear_has_msg();
  }
}
 const ::pb::RPCHealthReply& RPCMessage::healthreply() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.HealthReply)
  return has_healthreply()
      ? *msg_.healthreply_
      : ::pb::RPCHealthReply::default_instance();
}
::pb::RPCHealthReply* RPCMessage::mutable_healthreply() {
  if (!has_healthreply()) {
    clear_msg();
    set_has_healthreply();
    msg_.healthreply_ = new ::pb::RPCHealthReply;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.HealthReply)
  return msg_.healthreply_;
}
::pb::RPCHealthReply* RPCMessage::release_healthreply() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.HealthReply)
  if (has_healthreply()) {
    clear_has_msg();
    ::pb::RPCHealthReply* temp = msg_.healthreply_;
    msg_.healthreply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RPCMessage::set_allocated_healthreply(::pb::RPCHealthReply* healthreply) {
  clear_msg();
  if (healthreply) {
    set_has_healthreply();
    msg_.healthreply_ = healthreply;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.HealthReply)
}

// optional .pb.RPCUpsertSessionRequest UpsertSessionRequest = 5;
bool RPCMessage::has_upsertsessionrequest() const {
  return msg_case() == kUpsertSessionRequest;
}
void RPCMessage::set_has_upsertsessionrequest() {
  _oneof_case_[0] = kUpsertSessionRequest;
}
void RPCMessage::clear_upsertsessionrequest() {
  if (has_upsertsessionrequest()) {
    delete msg_.upsertsessionrequest_;
    clear_has_msg();
  }
}
 const ::pb::RPCUpsertSessionRequest& RPCMessage::upsertsessionrequest() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.UpsertSessionRequest)
  return has_upsertsessionrequest()
      ? *msg_.upsertsessionrequest_
      : ::pb::RPCUpsertSessionRequest::default_instance();
}
::pb::RPCUpsertSessionRequest* RPCMessage::mutable_upsertsessionrequest() {
  if (!has_upsertsessionrequest()) {
    clear_msg();
    set_has_upsertsessionrequest();
    msg_.upsertsessionrequest_ = new ::pb::RPCUpsertSessionRequest;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.UpsertSessionRequest)
  return msg_.upsertsessionrequest_;
}
::pb::RPCUpsertSessionRequest* RPCMessage::release_upsertsessionrequest() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.UpsertSessionRequest)
  if (has_upsertsessionrequest()) {
    clear_has_msg();
    ::pb::RPCUpsertSessionRequest* temp = msg_.upsertsessionrequest_;
    msg_.upsertsessionrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RPCMessage::set_allocated_upsertsessionrequest(::pb::RPCUpsertSessionRequest* upsertsessionrequest) {
  clear_msg();
  if (upsertsessionrequest) {
    set_has_upsertsessionrequest();
    msg_.upsertsessionrequest_ = upsertsessionrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.UpsertSessionRequest)
}

// optional .pb.RPCUpsertSessionResponse UpsertSessionResponse = 6;
bool RPCMessage::has_upsertsessionresponse() const {
  return msg_case() == kUpsertSessionResponse;
}
void RPCMessage::set_has_upsertsessionresponse() {
  _oneof_case_[0] = kUpsertSessionResponse;
}
void RPCMessage::clear_upsertsessionresponse() {
  if (has_upsertsessionresponse()) {
    delete msg_.upsertsessionresponse_;
    clear_has_msg();
  }
}
 const ::pb::RPCUpsertSessionResponse& RPCMessage::upsertsessionresponse() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.UpsertSessionResponse)
  return has_upsertsessionresponse()
      ? *msg_.upsertsessionresponse_
      : ::pb::RPCUpsertSessionResponse::default_instance();
}
::pb::RPCUpsertSessionResponse* RPCMessage::mutable_upsertsessionresponse() {
  if (!has_upsertsessionresponse()) {
    clear_msg();
    set_has_upsertsessionresponse();
    msg_.upsertsessionresponse_ = new ::pb::RPCUpsertSessionResponse;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.UpsertSessionResponse)
  return msg_.upsertsessionresponse_;
}
::pb::RPCUpsertSessionResponse* RPCMessage::release_upsertsessionresponse() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.UpsertSessionResponse)
  if (has_upsertsessionresponse()) {
    clear_has_msg();
    ::pb::RPCUpsertSessionResponse* temp = msg_.upsertsessionresponse_;
    msg_.upsertsessionresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RPCMessage::set_allocated_upsertsessionresponse(::pb::RPCUpsertSessionResponse* upsertsessionresponse) {
  clear_msg();
  if (upsertsessionresponse) {
    set_has_upsertsessionresponse();
    msg_.upsertsessionresponse_ = upsertsessionresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.UpsertSessionResponse)
}

// optional .pb.RPCGetSessionsRequest GetSessionsRequest = 7;
bool RPCMessage::has_getsessionsrequest() const {
  return msg_case() == kGetSessionsRequest;
}
void RPCMessage::set_has_getsessionsrequest() {
  _oneof_case_[0] = kGetSessionsRequest;
}
void RPCMessage::clear_getsessionsrequest() {
  if (has_getsessionsrequest()) {
    delete msg_.getsessionsrequest_;
    clear_has_msg();
  }
}
 const ::pb::RPCGetSessionsRequest& RPCMessage::getsessionsrequest() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.GetSessionsRequest)
  return has_getsessionsrequest()
      ? *msg_.getsessionsrequest_
      : ::pb::RPCGetSessionsRequest::default_instance();
}
::pb::RPCGetSessionsRequest* RPCMessage::mutable_getsessionsrequest() {
  if (!has_getsessionsrequest()) {
    clear_msg();
    set_has_getsessionsrequest();
    msg_.getsessionsrequest_ = new ::pb::RPCGetSessionsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.GetSessionsRequest)
  return msg_.getsessionsrequest_;
}
::pb::RPCGetSessionsRequest* RPCMessage::release_getsessionsrequest() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.GetSessionsRequest)
  if (has_getsessionsrequest()) {
    clear_has_msg();
    ::pb::RPCGetSessionsRequest* temp = msg_.getsessionsrequest_;
    msg_.getsessionsrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RPCMessage::set_allocated_getsessionsrequest(::pb::RPCGetSessionsRequest* getsessionsrequest) {
  clear_msg();
  if (getsessionsrequest) {
    set_has_getsessionsrequest();
    msg_.getsessionsrequest_ = getsessionsrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.GetSessionsRequest)
}

// optional .pb.RPCGetSessionsResponse GetSessionsResponse = 8;
bool RPCMessage::has_getsessionsresponse() const {
  return msg_case() == kGetSessionsResponse;
}
void RPCMessage::set_has_getsessionsresponse() {
  _oneof_case_[0] = kGetSessionsResponse;
}
void RPCMessage::clear_getsessionsresponse() {
  if (has_getsessionsresponse()) {
    delete msg_.getsessionsresponse_;
    clear_has_msg();
  }
}
 const ::pb::RPCGetSessionsResponse& RPCMessage::getsessionsresponse() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.GetSessionsResponse)
  return has_getsessionsresponse()
      ? *msg_.getsessionsresponse_
      : ::pb::RPCGetSessionsResponse::default_instance();
}
::pb::RPCGetSessionsResponse* RPCMessage::mutable_getsessionsresponse() {
  if (!has_getsessionsresponse()) {
    clear_msg();
    set_has_getsessionsresponse();
    msg_.getsessionsresponse_ = new ::pb::RPCGetSessionsResponse;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.GetSessionsResponse)
  return msg_.getsessionsresponse_;
}
::pb::RPCGetSessionsResponse* RPCMessage::release_getsessionsresponse() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.GetSessionsResponse)
  if (has_getsessionsresponse()) {
    clear_has_msg();
    ::pb::RPCGetSessionsResponse* temp = msg_.getsessionsresponse_;
    msg_.getsessionsresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RPCMessage::set_allocated_getsessionsresponse(::pb::RPCGetSessionsResponse* getsessionsresponse) {
  clear_msg();
  if (getsessionsresponse) {
    set_has_getsessionsresponse();
    msg_.getsessionsresponse_ = getsessionsresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.GetSessionsResponse)
}

// optional .pb.RPCDeleteSessionRequest DeleteSessionRequest = 9;
bool RPCMessage::has_deletesessionrequest() const {
  return msg_case() == kDeleteSessionRequest;
}
void RPCMessage::set_has_deletesessionrequest() {
  _oneof_case_[0] = kDeleteSessionRequest;
}
void RPCMessage::clear_deletesessionrequest() {
  if (has_deletesessionrequest()) {
    delete msg_.deletesessionrequest_;
    clear_has_msg();
  }
}
 const ::pb::RPCDeleteSessionRequest& RPCMessage::deletesessionrequest() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.DeleteSessionRequest)
  return has_deletesessionrequest()
      ? *msg_.deletesessionrequest_
      : ::pb::RPCDeleteSessionRequest::default_instance();
}
::pb::RPCDeleteSessionRequest* RPCMessage::mutable_deletesessionrequest() {
  if (!has_deletesessionrequest()) {
    clear_msg();
    set_has_deletesessionrequest();
    msg_.deletesessionrequest_ = new ::pb::RPCDeleteSessionRequest;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.DeleteSessionRequest)
  return msg_.deletesessionrequest_;
}
::pb::RPCDeleteSessionRequest* RPCMessage::release_deletesessionrequest() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.DeleteSessionRequest)
  if (has_deletesessionrequest()) {
    clear_has_msg();
    ::pb::RPCDeleteSessionRequest* temp = msg_.deletesessionrequest_;
    msg_.deletesessionrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RPCMessage::set_allocated_deletesessionrequest(::pb::RPCDeleteSessionRequest* deletesessionrequest) {
  clear_msg();
  if (deletesessionrequest) {
    set_has_deletesessionrequest();
    msg_.deletesessionrequest_ = deletesessionrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.DeleteSessionRequest)
}

// optional .pb.RPCDeleteSessionResponse DeleteSessionResponse = 10;
bool RPCMessage::has_deletesessionresponse() const {
  return msg_case() == kDeleteSessionResponse;
}
void RPCMessage::set_has_deletesessionresponse() {
  _oneof_case_[0] = kDeleteSessionResponse;
}
void RPCMessage::clear_deletesessionresponse() {
  if (has_deletesessionresponse()) {
    delete msg_.deletesessionresponse_;
    clear_has_msg();
  }
}
 const ::pb::RPCDeleteSessionResponse& RPCMessage::deletesessionresponse() const {
  // @@protoc_insertion_point(field_get:pb.RPCMessage.DeleteSessionResponse)
  return has_deletesessionresponse()
      ? *msg_.deletesessionresponse_
      : ::pb::RPCDeleteSessionResponse::default_instance();
}
::pb::RPCDeleteSessionResponse* RPCMessage::mutable_deletesessionresponse() {
  if (!has_deletesessionresponse()) {
    clear_msg();
    set_has_deletesessionresponse();
    msg_.deletesessionresponse_ = new ::pb::RPCDeleteSessionResponse;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCMessage.DeleteSessionResponse)
  return msg_.deletesessionresponse_;
}
::pb::RPCDeleteSessionResponse* RPCMessage::release_deletesessionresponse() {
  // @@protoc_insertion_point(field_release:pb.RPCMessage.DeleteSessionResponse)
  if (has_deletesessionresponse()) {
    clear_has_msg();
    ::pb::RPCDeleteSessionResponse* temp = msg_.deletesessionresponse_;
    msg_.deletesessionresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RPCMessage::set_allocated_deletesessionresponse(::pb::RPCDeleteSessionResponse* deletesessionresponse) {
  clear_msg();
  if (deletesessionresponse) {
    set_has_deletesessionresponse();
    msg_.deletesessionresponse_ = deletesessionresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RPCMessage.DeleteSessionResponse)
}

bool RPCMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void RPCMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
RPCMessage::MsgCase RPCMessage::msg_case() const {
  return RPCMessage::MsgCase(_oneof_case_[0]);
}
inline const RPCMessage* RPCMessage::internal_default_instance() {
  return &RPCMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
