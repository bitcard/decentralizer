// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/matchmaking.proto

#ifndef PROTOBUF_pb_2fmatchmaking_2eproto__INCLUDED
#define PROTOBUF_pb_2fmatchmaking_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)

namespace protobuf_pb_2fmatchmaking_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsSessionInfo_DetailsEntry_DoNotUseImpl();
void InitDefaultsSessionInfo_DetailsEntry_DoNotUse();
void InitDefaultsSessionInfoImpl();
void InitDefaultsSessionInfo();
void InitDefaultsDNSessionResponseImpl();
void InitDefaultsDNSessionResponse();
void InitDefaultsDNSessionRequestImpl();
void InitDefaultsDNSessionRequest();
void InitDefaultsRPCUpsertSessionRequestImpl();
void InitDefaultsRPCUpsertSessionRequest();
void InitDefaultsRPCUpsertSessionResponseImpl();
void InitDefaultsRPCUpsertSessionResponse();
void InitDefaultsRPCGetSessionsRequest_DetailsEntry_DoNotUseImpl();
void InitDefaultsRPCGetSessionsRequest_DetailsEntry_DoNotUse();
void InitDefaultsRPCGetSessionsRequestImpl();
void InitDefaultsRPCGetSessionsRequest();
void InitDefaultsRPCGetSessionsResponseImpl();
void InitDefaultsRPCGetSessionsResponse();
void InitDefaultsRPCDeleteSessionRequestImpl();
void InitDefaultsRPCDeleteSessionRequest();
void InitDefaultsRPCDeleteSessionResponseImpl();
void InitDefaultsRPCDeleteSessionResponse();
inline void InitDefaults() {
  InitDefaultsSessionInfo_DetailsEntry_DoNotUse();
  InitDefaultsSessionInfo();
  InitDefaultsDNSessionResponse();
  InitDefaultsDNSessionRequest();
  InitDefaultsRPCUpsertSessionRequest();
  InitDefaultsRPCUpsertSessionResponse();
  InitDefaultsRPCGetSessionsRequest_DetailsEntry_DoNotUse();
  InitDefaultsRPCGetSessionsRequest();
  InitDefaultsRPCGetSessionsResponse();
  InitDefaultsRPCDeleteSessionRequest();
  InitDefaultsRPCDeleteSessionResponse();
}
}  // namespace protobuf_pb_2fmatchmaking_2eproto
namespace pb {
class DNSessionRequest;
class DNSessionRequestDefaultTypeInternal;
extern DNSessionRequestDefaultTypeInternal _DNSessionRequest_default_instance_;
class DNSessionResponse;
class DNSessionResponseDefaultTypeInternal;
extern DNSessionResponseDefaultTypeInternal _DNSessionResponse_default_instance_;
class RPCDeleteSessionRequest;
class RPCDeleteSessionRequestDefaultTypeInternal;
extern RPCDeleteSessionRequestDefaultTypeInternal _RPCDeleteSessionRequest_default_instance_;
class RPCDeleteSessionResponse;
class RPCDeleteSessionResponseDefaultTypeInternal;
extern RPCDeleteSessionResponseDefaultTypeInternal _RPCDeleteSessionResponse_default_instance_;
class RPCGetSessionsRequest;
class RPCGetSessionsRequestDefaultTypeInternal;
extern RPCGetSessionsRequestDefaultTypeInternal _RPCGetSessionsRequest_default_instance_;
class RPCGetSessionsRequest_DetailsEntry_DoNotUse;
class RPCGetSessionsRequest_DetailsEntry_DoNotUseDefaultTypeInternal;
extern RPCGetSessionsRequest_DetailsEntry_DoNotUseDefaultTypeInternal _RPCGetSessionsRequest_DetailsEntry_DoNotUse_default_instance_;
class RPCGetSessionsResponse;
class RPCGetSessionsResponseDefaultTypeInternal;
extern RPCGetSessionsResponseDefaultTypeInternal _RPCGetSessionsResponse_default_instance_;
class RPCUpsertSessionRequest;
class RPCUpsertSessionRequestDefaultTypeInternal;
extern RPCUpsertSessionRequestDefaultTypeInternal _RPCUpsertSessionRequest_default_instance_;
class RPCUpsertSessionResponse;
class RPCUpsertSessionResponseDefaultTypeInternal;
extern RPCUpsertSessionResponseDefaultTypeInternal _RPCUpsertSessionResponse_default_instance_;
class SessionInfo;
class SessionInfoDefaultTypeInternal;
extern SessionInfoDefaultTypeInternal _SessionInfo_default_instance_;
class SessionInfo_DetailsEntry_DoNotUse;
class SessionInfo_DetailsEntry_DoNotUseDefaultTypeInternal;
extern SessionInfo_DetailsEntry_DoNotUseDefaultTypeInternal _SessionInfo_DetailsEntry_DoNotUse_default_instance_;
}  // namespace pb
namespace pb {

// ===================================================================

class SessionInfo_DetailsEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<SessionInfo_DetailsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<SessionInfo_DetailsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SessionInfo_DetailsEntry_DoNotUse();
  SessionInfo_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SessionInfo_DetailsEntry_DoNotUse& other);
  static const SessionInfo_DetailsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SessionInfo_DetailsEntry_DoNotUse*>(&_SessionInfo_DetailsEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class SessionInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.SessionInfo) */ {
 public:
  SessionInfo();
  virtual ~SessionInfo();

  SessionInfo(const SessionInfo& from);

  inline SessionInfo& operator=(const SessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionInfo(SessionInfo&& from) noexcept
    : SessionInfo() {
    *this = ::std::move(from);
  }

  inline SessionInfo& operator=(SessionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SessionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionInfo* internal_default_instance() {
    return reinterpret_cast<const SessionInfo*>(
               &_SessionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SessionInfo* other);
  friend void swap(SessionInfo& a, SessionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SessionInfo& from);
  void MergeFrom(const SessionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> details = 8;
  int details_size() const;
  void clear_details();
  static const int kDetailsFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      details() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_details();

  // string pId = 2;
  void clear_pid();
  static const int kPIdFieldNumber = 2;
  const ::std::string& pid() const;
  void set_pid(const ::std::string& value);
  #if LANG_CXX11
  void set_pid(::std::string&& value);
  #endif
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  ::std::string* mutable_pid();
  ::std::string* release_pid();
  void set_allocated_pid(::std::string* pid);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 dId = 1;
  void clear_did();
  static const int kDIdFieldNumber = 1;
  ::google::protobuf::uint64 did() const;
  void set_did(::google::protobuf::uint64 value);

  // uint64 sessionId = 3;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 3;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // uint64 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::uint64 type() const;
  void set_type(::google::protobuf::uint64 value);

  // uint64 address = 6;
  void clear_address();
  static const int kAddressFieldNumber = 6;
  ::google::protobuf::uint64 address() const;
  void set_address(::google::protobuf::uint64 value);

  // uint32 port = 7;
  void clear_port();
  static const int kPortFieldNumber = 7;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SessionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::MapFieldLite<
      SessionInfo_DetailsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > details_;
  ::google::protobuf::internal::ArenaStringPtr pid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 did_;
  ::google::protobuf::uint64 sessionid_;
  ::google::protobuf::uint64 type_;
  ::google::protobuf::uint64 address_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
  friend void ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsSessionInfoImpl();
};
// -------------------------------------------------------------------

class DNSessionResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.DNSessionResponse) */ {
 public:
  DNSessionResponse();
  virtual ~DNSessionResponse();

  DNSessionResponse(const DNSessionResponse& from);

  inline DNSessionResponse& operator=(const DNSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DNSessionResponse(DNSessionResponse&& from) noexcept
    : DNSessionResponse() {
    *this = ::std::move(from);
  }

  inline DNSessionResponse& operator=(DNSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DNSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSessionResponse* internal_default_instance() {
    return reinterpret_cast<const DNSessionResponse*>(
               &_DNSessionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DNSessionResponse* other);
  friend void swap(DNSessionResponse& a, DNSessionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DNSessionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DNSessionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DNSessionResponse& from);
  void MergeFrom(const DNSessionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DNSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.SessionInfo results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::pb::SessionInfo& results(int index) const;
  ::pb::SessionInfo* mutable_results(int index);
  ::pb::SessionInfo* add_results();
  ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >&
      results() const;

  // @@protoc_insertion_point(class_scope:pb.DNSessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo > results_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
  friend void ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionResponseImpl();
};
// -------------------------------------------------------------------

class DNSessionRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.DNSessionRequest) */ {
 public:
  DNSessionRequest();
  virtual ~DNSessionRequest();

  DNSessionRequest(const DNSessionRequest& from);

  inline DNSessionRequest& operator=(const DNSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DNSessionRequest(DNSessionRequest&& from) noexcept
    : DNSessionRequest() {
    *this = ::std::move(from);
  }

  inline DNSessionRequest& operator=(DNSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DNSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSessionRequest* internal_default_instance() {
    return reinterpret_cast<const DNSessionRequest*>(
               &_DNSessionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DNSessionRequest* other);
  friend void swap(DNSessionRequest& a, DNSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DNSessionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DNSessionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DNSessionRequest& from);
  void MergeFrom(const DNSessionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DNSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint64 type() const;
  void set_type(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.DNSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint64 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
  friend void ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsDNSessionRequestImpl();
};
// -------------------------------------------------------------------

class RPCUpsertSessionRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.RPCUpsertSessionRequest) */ {
 public:
  RPCUpsertSessionRequest();
  virtual ~RPCUpsertSessionRequest();

  RPCUpsertSessionRequest(const RPCUpsertSessionRequest& from);

  inline RPCUpsertSessionRequest& operator=(const RPCUpsertSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCUpsertSessionRequest(RPCUpsertSessionRequest&& from) noexcept
    : RPCUpsertSessionRequest() {
    *this = ::std::move(from);
  }

  inline RPCUpsertSessionRequest& operator=(RPCUpsertSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RPCUpsertSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCUpsertSessionRequest* internal_default_instance() {
    return reinterpret_cast<const RPCUpsertSessionRequest*>(
               &_RPCUpsertSessionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RPCUpsertSessionRequest* other);
  friend void swap(RPCUpsertSessionRequest& a, RPCUpsertSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCUpsertSessionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCUpsertSessionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RPCUpsertSessionRequest& from);
  void MergeFrom(const RPCUpsertSessionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCUpsertSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.SessionInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::pb::SessionInfo& info() const;
  ::pb::SessionInfo* release_info();
  ::pb::SessionInfo* mutable_info();
  void set_allocated_info(::pb::SessionInfo* info);

  // @@protoc_insertion_point(class_scope:pb.RPCUpsertSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::pb::SessionInfo* info_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
  friend void ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionRequestImpl();
};
// -------------------------------------------------------------------

class RPCUpsertSessionResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.RPCUpsertSessionResponse) */ {
 public:
  RPCUpsertSessionResponse();
  virtual ~RPCUpsertSessionResponse();

  RPCUpsertSessionResponse(const RPCUpsertSessionResponse& from);

  inline RPCUpsertSessionResponse& operator=(const RPCUpsertSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCUpsertSessionResponse(RPCUpsertSessionResponse&& from) noexcept
    : RPCUpsertSessionResponse() {
    *this = ::std::move(from);
  }

  inline RPCUpsertSessionResponse& operator=(RPCUpsertSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RPCUpsertSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCUpsertSessionResponse* internal_default_instance() {
    return reinterpret_cast<const RPCUpsertSessionResponse*>(
               &_RPCUpsertSessionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RPCUpsertSessionResponse* other);
  friend void swap(RPCUpsertSessionResponse& a, RPCUpsertSessionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCUpsertSessionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCUpsertSessionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RPCUpsertSessionResponse& from);
  void MergeFrom(const RPCUpsertSessionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCUpsertSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 sessionId = 2;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:pb.RPCUpsertSessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint64 sessionid_;
  bool result_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
  friend void ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCUpsertSessionResponseImpl();
};
// -------------------------------------------------------------------

class RPCGetSessionsRequest_DetailsEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<RPCGetSessionsRequest_DetailsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<RPCGetSessionsRequest_DetailsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RPCGetSessionsRequest_DetailsEntry_DoNotUse();
  RPCGetSessionsRequest_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RPCGetSessionsRequest_DetailsEntry_DoNotUse& other);
  static const RPCGetSessionsRequest_DetailsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RPCGetSessionsRequest_DetailsEntry_DoNotUse*>(&_RPCGetSessionsRequest_DetailsEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class RPCGetSessionsRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.RPCGetSessionsRequest) */ {
 public:
  RPCGetSessionsRequest();
  virtual ~RPCGetSessionsRequest();

  RPCGetSessionsRequest(const RPCGetSessionsRequest& from);

  inline RPCGetSessionsRequest& operator=(const RPCGetSessionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetSessionsRequest(RPCGetSessionsRequest&& from) noexcept
    : RPCGetSessionsRequest() {
    *this = ::std::move(from);
  }

  inline RPCGetSessionsRequest& operator=(RPCGetSessionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RPCGetSessionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetSessionsRequest* internal_default_instance() {
    return reinterpret_cast<const RPCGetSessionsRequest*>(
               &_RPCGetSessionsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(RPCGetSessionsRequest* other);
  friend void swap(RPCGetSessionsRequest& a, RPCGetSessionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetSessionsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCGetSessionsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RPCGetSessionsRequest& from);
  void MergeFrom(const RPCGetSessionsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCGetSessionsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> details = 1;
  int details_size() const;
  void clear_details();
  static const int kDetailsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      details() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_details();

  // @@protoc_insertion_point(class_scope:pb.RPCGetSessionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::MapFieldLite<
      RPCGetSessionsRequest_DetailsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > details_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
  friend void ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionsRequestImpl();
};
// -------------------------------------------------------------------

class RPCGetSessionsResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.RPCGetSessionsResponse) */ {
 public:
  RPCGetSessionsResponse();
  virtual ~RPCGetSessionsResponse();

  RPCGetSessionsResponse(const RPCGetSessionsResponse& from);

  inline RPCGetSessionsResponse& operator=(const RPCGetSessionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetSessionsResponse(RPCGetSessionsResponse&& from) noexcept
    : RPCGetSessionsResponse() {
    *this = ::std::move(from);
  }

  inline RPCGetSessionsResponse& operator=(RPCGetSessionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RPCGetSessionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetSessionsResponse* internal_default_instance() {
    return reinterpret_cast<const RPCGetSessionsResponse*>(
               &_RPCGetSessionsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(RPCGetSessionsResponse* other);
  friend void swap(RPCGetSessionsResponse& a, RPCGetSessionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetSessionsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCGetSessionsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RPCGetSessionsResponse& from);
  void MergeFrom(const RPCGetSessionsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCGetSessionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.SessionInfo sessions = 1;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  const ::pb::SessionInfo& sessions(int index) const;
  ::pb::SessionInfo* mutable_sessions(int index);
  ::pb::SessionInfo* add_sessions();
  ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >*
      mutable_sessions();
  const ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:pb.RPCGetSessionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo > sessions_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
  friend void ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCGetSessionsResponseImpl();
};
// -------------------------------------------------------------------

class RPCDeleteSessionRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.RPCDeleteSessionRequest) */ {
 public:
  RPCDeleteSessionRequest();
  virtual ~RPCDeleteSessionRequest();

  RPCDeleteSessionRequest(const RPCDeleteSessionRequest& from);

  inline RPCDeleteSessionRequest& operator=(const RPCDeleteSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCDeleteSessionRequest(RPCDeleteSessionRequest&& from) noexcept
    : RPCDeleteSessionRequest() {
    *this = ::std::move(from);
  }

  inline RPCDeleteSessionRequest& operator=(RPCDeleteSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RPCDeleteSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCDeleteSessionRequest* internal_default_instance() {
    return reinterpret_cast<const RPCDeleteSessionRequest*>(
               &_RPCDeleteSessionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(RPCDeleteSessionRequest* other);
  friend void swap(RPCDeleteSessionRequest& a, RPCDeleteSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCDeleteSessionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCDeleteSessionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RPCDeleteSessionRequest& from);
  void MergeFrom(const RPCDeleteSessionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCDeleteSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 sessionId = 1;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.RPCDeleteSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint64 sessionid_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
  friend void ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionRequestImpl();
};
// -------------------------------------------------------------------

class RPCDeleteSessionResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.RPCDeleteSessionResponse) */ {
 public:
  RPCDeleteSessionResponse();
  virtual ~RPCDeleteSessionResponse();

  RPCDeleteSessionResponse(const RPCDeleteSessionResponse& from);

  inline RPCDeleteSessionResponse& operator=(const RPCDeleteSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCDeleteSessionResponse(RPCDeleteSessionResponse&& from) noexcept
    : RPCDeleteSessionResponse() {
    *this = ::std::move(from);
  }

  inline RPCDeleteSessionResponse& operator=(RPCDeleteSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RPCDeleteSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCDeleteSessionResponse* internal_default_instance() {
    return reinterpret_cast<const RPCDeleteSessionResponse*>(
               &_RPCDeleteSessionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(RPCDeleteSessionResponse* other);
  friend void swap(RPCDeleteSessionResponse& a, RPCDeleteSessionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCDeleteSessionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCDeleteSessionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RPCDeleteSessionResponse& from);
  void MergeFrom(const RPCDeleteSessionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCDeleteSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:pb.RPCDeleteSessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool result_;
  mutable int _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
  friend void ::protobuf_pb_2fmatchmaking_2eproto::InitDefaultsRPCDeleteSessionResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SessionInfo

// uint64 dId = 1;
inline void SessionInfo::clear_did() {
  did_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SessionInfo::did() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.dId)
  return did_;
}
inline void SessionInfo::set_did(::google::protobuf::uint64 value) {
  
  did_ = value;
  // @@protoc_insertion_point(field_set:pb.SessionInfo.dId)
}

// string pId = 2;
inline void SessionInfo::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionInfo::pid() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.pId)
  return pid_.GetNoArena();
}
inline void SessionInfo::set_pid(const ::std::string& value) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SessionInfo.pId)
}
#if LANG_CXX11
inline void SessionInfo::set_pid(::std::string&& value) {
  
  pid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SessionInfo.pId)
}
#endif
inline void SessionInfo::set_pid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SessionInfo.pId)
}
inline void SessionInfo::set_pid(const char* value, size_t size) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SessionInfo.pId)
}
inline ::std::string* SessionInfo::mutable_pid() {
  
  // @@protoc_insertion_point(field_mutable:pb.SessionInfo.pId)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionInfo::release_pid() {
  // @@protoc_insertion_point(field_release:pb.SessionInfo.pId)
  
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionInfo::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    
  } else {
    
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:pb.SessionInfo.pId)
}

// uint64 sessionId = 3;
inline void SessionInfo::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SessionInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.sessionId)
  return sessionid_;
}
inline void SessionInfo::set_sessionid(::google::protobuf::uint64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:pb.SessionInfo.sessionId)
}

// uint64 type = 4;
inline void SessionInfo::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SessionInfo::type() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.type)
  return type_;
}
inline void SessionInfo::set_type(::google::protobuf::uint64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.SessionInfo.type)
}

// string name = 5;
inline void SessionInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.name)
  return name_.GetNoArena();
}
inline void SessionInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SessionInfo.name)
}
#if LANG_CXX11
inline void SessionInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SessionInfo.name)
}
#endif
inline void SessionInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SessionInfo.name)
}
inline void SessionInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SessionInfo.name)
}
inline ::std::string* SessionInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.SessionInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionInfo::release_name() {
  // @@protoc_insertion_point(field_release:pb.SessionInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.SessionInfo.name)
}

// uint64 address = 6;
inline void SessionInfo::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SessionInfo::address() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.address)
  return address_;
}
inline void SessionInfo::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:pb.SessionInfo.address)
}

// uint32 port = 7;
inline void SessionInfo::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 SessionInfo::port() const {
  // @@protoc_insertion_point(field_get:pb.SessionInfo.port)
  return port_;
}
inline void SessionInfo::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:pb.SessionInfo.port)
}

// map<string, string> details = 8;
inline int SessionInfo::details_size() const {
  return details_.size();
}
inline void SessionInfo::clear_details() {
  details_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SessionInfo::details() const {
  // @@protoc_insertion_point(field_map:pb.SessionInfo.details)
  return details_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SessionInfo::mutable_details() {
  // @@protoc_insertion_point(field_mutable_map:pb.SessionInfo.details)
  return details_.MutableMap();
}

// -------------------------------------------------------------------

// DNSessionResponse

// repeated .pb.SessionInfo results = 1;
inline int DNSessionResponse::results_size() const {
  return results_.size();
}
inline void DNSessionResponse::clear_results() {
  results_.Clear();
}
inline const ::pb::SessionInfo& DNSessionResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:pb.DNSessionResponse.results)
  return results_.Get(index);
}
inline ::pb::SessionInfo* DNSessionResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DNSessionResponse.results)
  return results_.Mutable(index);
}
inline ::pb::SessionInfo* DNSessionResponse::add_results() {
  // @@protoc_insertion_point(field_add:pb.DNSessionResponse.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >*
DNSessionResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:pb.DNSessionResponse.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >&
DNSessionResponse::results() const {
  // @@protoc_insertion_point(field_list:pb.DNSessionResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// DNSessionRequest

// uint64 type = 1;
inline void DNSessionRequest::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DNSessionRequest::type() const {
  // @@protoc_insertion_point(field_get:pb.DNSessionRequest.type)
  return type_;
}
inline void DNSessionRequest::set_type(::google::protobuf::uint64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.DNSessionRequest.type)
}

// -------------------------------------------------------------------

// RPCUpsertSessionRequest

// .pb.SessionInfo info = 1;
inline bool RPCUpsertSessionRequest::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void RPCUpsertSessionRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::pb::SessionInfo& RPCUpsertSessionRequest::info() const {
  const ::pb::SessionInfo* p = info_;
  // @@protoc_insertion_point(field_get:pb.RPCUpsertSessionRequest.info)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::SessionInfo*>(
      &::pb::_SessionInfo_default_instance_);
}
inline ::pb::SessionInfo* RPCUpsertSessionRequest::release_info() {
  // @@protoc_insertion_point(field_release:pb.RPCUpsertSessionRequest.info)
  
  ::pb::SessionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::pb::SessionInfo* RPCUpsertSessionRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::pb::SessionInfo;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCUpsertSessionRequest.info)
  return info_;
}
inline void RPCUpsertSessionRequest::set_allocated_info(::pb::SessionInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:pb.RPCUpsertSessionRequest.info)
}

// -------------------------------------------------------------------

// RPCUpsertSessionResponse

// bool result = 1;
inline void RPCUpsertSessionResponse::clear_result() {
  result_ = false;
}
inline bool RPCUpsertSessionResponse::result() const {
  // @@protoc_insertion_point(field_get:pb.RPCUpsertSessionResponse.result)
  return result_;
}
inline void RPCUpsertSessionResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCUpsertSessionResponse.result)
}

// uint64 sessionId = 2;
inline void RPCUpsertSessionResponse::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RPCUpsertSessionResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:pb.RPCUpsertSessionResponse.sessionId)
  return sessionid_;
}
inline void RPCUpsertSessionResponse::set_sessionid(::google::protobuf::uint64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCUpsertSessionResponse.sessionId)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RPCGetSessionsRequest

// map<string, string> details = 1;
inline int RPCGetSessionsRequest::details_size() const {
  return details_.size();
}
inline void RPCGetSessionsRequest::clear_details() {
  details_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RPCGetSessionsRequest::details() const {
  // @@protoc_insertion_point(field_map:pb.RPCGetSessionsRequest.details)
  return details_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RPCGetSessionsRequest::mutable_details() {
  // @@protoc_insertion_point(field_mutable_map:pb.RPCGetSessionsRequest.details)
  return details_.MutableMap();
}

// -------------------------------------------------------------------

// RPCGetSessionsResponse

// repeated .pb.SessionInfo sessions = 1;
inline int RPCGetSessionsResponse::sessions_size() const {
  return sessions_.size();
}
inline void RPCGetSessionsResponse::clear_sessions() {
  sessions_.Clear();
}
inline const ::pb::SessionInfo& RPCGetSessionsResponse::sessions(int index) const {
  // @@protoc_insertion_point(field_get:pb.RPCGetSessionsResponse.sessions)
  return sessions_.Get(index);
}
inline ::pb::SessionInfo* RPCGetSessionsResponse::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RPCGetSessionsResponse.sessions)
  return sessions_.Mutable(index);
}
inline ::pb::SessionInfo* RPCGetSessionsResponse::add_sessions() {
  // @@protoc_insertion_point(field_add:pb.RPCGetSessionsResponse.sessions)
  return sessions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >*
RPCGetSessionsResponse::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:pb.RPCGetSessionsResponse.sessions)
  return &sessions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SessionInfo >&
RPCGetSessionsResponse::sessions() const {
  // @@protoc_insertion_point(field_list:pb.RPCGetSessionsResponse.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// RPCDeleteSessionRequest

// uint64 sessionId = 1;
inline void RPCDeleteSessionRequest::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RPCDeleteSessionRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:pb.RPCDeleteSessionRequest.sessionId)
  return sessionid_;
}
inline void RPCDeleteSessionRequest::set_sessionid(::google::protobuf::uint64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCDeleteSessionRequest.sessionId)
}

// -------------------------------------------------------------------

// RPCDeleteSessionResponse

// bool result = 1;
inline void RPCDeleteSessionResponse::clear_result() {
  result_ = false;
}
inline bool RPCDeleteSessionResponse::result() const {
  // @@protoc_insertion_point(field_get:pb.RPCDeleteSessionResponse.result)
  return result_;
}
inline void RPCDeleteSessionResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCDeleteSessionResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_2fmatchmaking_2eproto__INCLUDED
