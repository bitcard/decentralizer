// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/matchmaking.proto

#ifndef PROTOBUF_INCLUDED_pb_2fmatchmaking_2eproto
#define PROTOBUF_INCLUDED_pb_2fmatchmaking_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pb_2fmatchmaking_2eproto 

namespace protobuf_pb_2fmatchmaking_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pb_2fmatchmaking_2eproto
namespace pb {
class DNSessionStore;
class DNSessionStoreDefaultTypeInternal;
extern DNSessionStoreDefaultTypeInternal _DNSessionStore_default_instance_;
class DNSessionidsRequest;
class DNSessionidsRequestDefaultTypeInternal;
extern DNSessionidsRequestDefaultTypeInternal _DNSessionidsRequest_default_instance_;
class DNSessionidsResponse;
class DNSessionidsResponseDefaultTypeInternal;
extern DNSessionidsResponseDefaultTypeInternal _DNSessionidsResponse_default_instance_;
class DNSessionsRecord;
class DNSessionsRecordDefaultTypeInternal;
extern DNSessionsRecordDefaultTypeInternal _DNSessionsRecord_default_instance_;
class DNSessionsRequest;
class DNSessionsRequestDefaultTypeInternal;
extern DNSessionsRequestDefaultTypeInternal _DNSessionsRequest_default_instance_;
class DNSessionsResponse;
class DNSessionsResponseDefaultTypeInternal;
extern DNSessionsResponseDefaultTypeInternal _DNSessionsResponse_default_instance_;
class RPCDeleteSessionRequest;
class RPCDeleteSessionRequestDefaultTypeInternal;
extern RPCDeleteSessionRequestDefaultTypeInternal _RPCDeleteSessionRequest_default_instance_;
class RPCDeleteSessionResponse;
class RPCDeleteSessionResponseDefaultTypeInternal;
extern RPCDeleteSessionResponseDefaultTypeInternal _RPCDeleteSessionResponse_default_instance_;
class RPCGetSessionIdsByDetailsRequest;
class RPCGetSessionIdsByDetailsRequestDefaultTypeInternal;
extern RPCGetSessionIdsByDetailsRequestDefaultTypeInternal _RPCGetSessionIdsByDetailsRequest_default_instance_;
class RPCGetSessionIdsByPeerIdsRequest;
class RPCGetSessionIdsByPeerIdsRequestDefaultTypeInternal;
extern RPCGetSessionIdsByPeerIdsRequestDefaultTypeInternal _RPCGetSessionIdsByPeerIdsRequest_default_instance_;
class RPCGetSessionIdsResponse;
class RPCGetSessionIdsResponseDefaultTypeInternal;
extern RPCGetSessionIdsResponseDefaultTypeInternal _RPCGetSessionIdsResponse_default_instance_;
class RPCGetSessionRequest;
class RPCGetSessionRequestDefaultTypeInternal;
extern RPCGetSessionRequestDefaultTypeInternal _RPCGetSessionRequest_default_instance_;
class RPCGetSessionResponse;
class RPCGetSessionResponseDefaultTypeInternal;
extern RPCGetSessionResponseDefaultTypeInternal _RPCGetSessionResponse_default_instance_;
class RPCUpsertSessionRequest;
class RPCUpsertSessionRequestDefaultTypeInternal;
extern RPCUpsertSessionRequestDefaultTypeInternal _RPCUpsertSessionRequest_default_instance_;
class RPCUpsertSessionResponse;
class RPCUpsertSessionResponseDefaultTypeInternal;
extern RPCUpsertSessionResponseDefaultTypeInternal _RPCUpsertSessionResponse_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class Session_DetailsEntry_DoNotUse;
class Session_DetailsEntry_DoNotUseDefaultTypeInternal;
extern Session_DetailsEntry_DoNotUseDefaultTypeInternal _Session_DetailsEntry_DoNotUse_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::DNSessionStore* Arena::CreateMaybeMessage<::pb::DNSessionStore>(Arena*);
template<> ::pb::DNSessionidsRequest* Arena::CreateMaybeMessage<::pb::DNSessionidsRequest>(Arena*);
template<> ::pb::DNSessionidsResponse* Arena::CreateMaybeMessage<::pb::DNSessionidsResponse>(Arena*);
template<> ::pb::DNSessionsRecord* Arena::CreateMaybeMessage<::pb::DNSessionsRecord>(Arena*);
template<> ::pb::DNSessionsRequest* Arena::CreateMaybeMessage<::pb::DNSessionsRequest>(Arena*);
template<> ::pb::DNSessionsResponse* Arena::CreateMaybeMessage<::pb::DNSessionsResponse>(Arena*);
template<> ::pb::RPCDeleteSessionRequest* Arena::CreateMaybeMessage<::pb::RPCDeleteSessionRequest>(Arena*);
template<> ::pb::RPCDeleteSessionResponse* Arena::CreateMaybeMessage<::pb::RPCDeleteSessionResponse>(Arena*);
template<> ::pb::RPCGetSessionIdsByDetailsRequest* Arena::CreateMaybeMessage<::pb::RPCGetSessionIdsByDetailsRequest>(Arena*);
template<> ::pb::RPCGetSessionIdsByPeerIdsRequest* Arena::CreateMaybeMessage<::pb::RPCGetSessionIdsByPeerIdsRequest>(Arena*);
template<> ::pb::RPCGetSessionIdsResponse* Arena::CreateMaybeMessage<::pb::RPCGetSessionIdsResponse>(Arena*);
template<> ::pb::RPCGetSessionRequest* Arena::CreateMaybeMessage<::pb::RPCGetSessionRequest>(Arena*);
template<> ::pb::RPCGetSessionResponse* Arena::CreateMaybeMessage<::pb::RPCGetSessionResponse>(Arena*);
template<> ::pb::RPCUpsertSessionRequest* Arena::CreateMaybeMessage<::pb::RPCUpsertSessionRequest>(Arena*);
template<> ::pb::RPCUpsertSessionResponse* Arena::CreateMaybeMessage<::pb::RPCUpsertSessionResponse>(Arena*);
template<> ::pb::Session* Arena::CreateMaybeMessage<::pb::Session>(Arena*);
template<> ::pb::Session_DetailsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::Session_DetailsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class Session_DetailsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Session_DetailsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Session_DetailsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Session_DetailsEntry_DoNotUse();
  Session_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Session_DetailsEntry_DoNotUse& other);
  static const Session_DetailsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Session_DetailsEntry_DoNotUse*>(&_Session_DetailsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Session : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Session* other);
  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(NULL);
  }

  Session* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> details = 8;
  int details_size() const;
  void clear_details();
  static const int kDetailsFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      details() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_details();

  // string pId = 1;
  void clear_pid();
  static const int kPIdFieldNumber = 1;
  const ::std::string& pid() const;
  void set_pid(const ::std::string& value);
  #if LANG_CXX11
  void set_pid(::std::string&& value);
  #endif
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  ::std::string* mutable_pid();
  ::std::string* release_pid();
  void set_allocated_pid(::std::string* pid);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 dnId = 2;
  void clear_dnid();
  static const int kDnIdFieldNumber = 2;
  ::google::protobuf::uint64 dnid() const;
  void set_dnid(::google::protobuf::uint64 value);

  // uint64 sessionId = 3;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 3;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // uint64 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::uint64 type() const;
  void set_type(::google::protobuf::uint64 value);

  // uint32 address = 6;
  void clear_address();
  static const int kAddressFieldNumber = 6;
  ::google::protobuf::uint32 address() const;
  void set_address(::google::protobuf::uint32 value);

  // uint32 port = 7;
  void clear_port();
  static const int kPortFieldNumber = 7;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint64 published = 9;
  void clear_published();
  static const int kPublishedFieldNumber = 9;
  ::google::protobuf::uint64 published() const;
  void set_published(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.Session)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Session_DetailsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > details_;
  ::google::protobuf::internal::ArenaStringPtr pid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 dnid_;
  ::google::protobuf::uint64 sessionid_;
  ::google::protobuf::uint64 type_;
  ::google::protobuf::uint32 address_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint64 published_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DNSessionStore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DNSessionStore) */ {
 public:
  DNSessionStore();
  virtual ~DNSessionStore();

  DNSessionStore(const DNSessionStore& from);

  inline DNSessionStore& operator=(const DNSessionStore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DNSessionStore(DNSessionStore&& from) noexcept
    : DNSessionStore() {
    *this = ::std::move(from);
  }

  inline DNSessionStore& operator=(DNSessionStore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DNSessionStore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSessionStore* internal_default_instance() {
    return reinterpret_cast<const DNSessionStore*>(
               &_DNSessionStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DNSessionStore* other);
  friend void swap(DNSessionStore& a, DNSessionStore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DNSessionStore* New() const final {
    return CreateMaybeMessage<DNSessionStore>(NULL);
  }

  DNSessionStore* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DNSessionStore>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DNSessionStore& from);
  void MergeFrom(const DNSessionStore& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNSessionStore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Session sessions = 1;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::pb::Session* mutable_sessions(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Session >*
      mutable_sessions();
  const ::pb::Session& sessions(int index) const;
  ::pb::Session* add_sessions();
  const ::google::protobuf::RepeatedPtrField< ::pb::Session >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:pb.DNSessionStore)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Session > sessions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DNSessionsRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DNSessionsRecord) */ {
 public:
  DNSessionsRecord();
  virtual ~DNSessionsRecord();

  DNSessionsRecord(const DNSessionsRecord& from);

  inline DNSessionsRecord& operator=(const DNSessionsRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DNSessionsRecord(DNSessionsRecord&& from) noexcept
    : DNSessionsRecord() {
    *this = ::std::move(from);
  }

  inline DNSessionsRecord& operator=(DNSessionsRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DNSessionsRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSessionsRecord* internal_default_instance() {
    return reinterpret_cast<const DNSessionsRecord*>(
               &_DNSessionsRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DNSessionsRecord* other);
  friend void swap(DNSessionsRecord& a, DNSessionsRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DNSessionsRecord* New() const final {
    return CreateMaybeMessage<DNSessionsRecord>(NULL);
  }

  DNSessionsRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DNSessionsRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DNSessionsRecord& from);
  void MergeFrom(const DNSessionsRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNSessionsRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Session results = 2;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  ::pb::Session* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Session >*
      mutable_results();
  const ::pb::Session& results(int index) const;
  ::pb::Session* add_results();
  const ::google::protobuf::RepeatedPtrField< ::pb::Session >&
      results() const;

  // uint64 published = 1;
  void clear_published();
  static const int kPublishedFieldNumber = 1;
  ::google::protobuf::uint64 published() const;
  void set_published(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.DNSessionsRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Session > results_;
  ::google::protobuf::uint64 published_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DNSessionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DNSessionsResponse) */ {
 public:
  DNSessionsResponse();
  virtual ~DNSessionsResponse();

  DNSessionsResponse(const DNSessionsResponse& from);

  inline DNSessionsResponse& operator=(const DNSessionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DNSessionsResponse(DNSessionsResponse&& from) noexcept
    : DNSessionsResponse() {
    *this = ::std::move(from);
  }

  inline DNSessionsResponse& operator=(DNSessionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DNSessionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSessionsResponse* internal_default_instance() {
    return reinterpret_cast<const DNSessionsResponse*>(
               &_DNSessionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DNSessionsResponse* other);
  friend void swap(DNSessionsResponse& a, DNSessionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DNSessionsResponse* New() const final {
    return CreateMaybeMessage<DNSessionsResponse>(NULL);
  }

  DNSessionsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DNSessionsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DNSessionsResponse& from);
  void MergeFrom(const DNSessionsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNSessionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Session results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::pb::Session* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Session >*
      mutable_results();
  const ::pb::Session& results(int index) const;
  ::pb::Session* add_results();
  const ::google::protobuf::RepeatedPtrField< ::pb::Session >&
      results() const;

  // @@protoc_insertion_point(class_scope:pb.DNSessionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Session > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DNSessionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DNSessionsRequest) */ {
 public:
  DNSessionsRequest();
  virtual ~DNSessionsRequest();

  DNSessionsRequest(const DNSessionsRequest& from);

  inline DNSessionsRequest& operator=(const DNSessionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DNSessionsRequest(DNSessionsRequest&& from) noexcept
    : DNSessionsRequest() {
    *this = ::std::move(from);
  }

  inline DNSessionsRequest& operator=(DNSessionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DNSessionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSessionsRequest* internal_default_instance() {
    return reinterpret_cast<const DNSessionsRequest*>(
               &_DNSessionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DNSessionsRequest* other);
  friend void swap(DNSessionsRequest& a, DNSessionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DNSessionsRequest* New() const final {
    return CreateMaybeMessage<DNSessionsRequest>(NULL);
  }

  DNSessionsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DNSessionsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DNSessionsRequest& from);
  void MergeFrom(const DNSessionsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNSessionsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 sessionIds = 2;
  int sessionids_size() const;
  void clear_sessionids();
  static const int kSessionIdsFieldNumber = 2;
  ::google::protobuf::uint64 sessionids(int index) const;
  void set_sessionids(int index, ::google::protobuf::uint64 value);
  void add_sessionids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      sessionids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_sessionids();

  // uint64 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint64 type() const;
  void set_type(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.DNSessionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > sessionids_;
  mutable int _sessionids_cached_byte_size_;
  ::google::protobuf::uint64 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DNSessionidsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DNSessionidsResponse) */ {
 public:
  DNSessionidsResponse();
  virtual ~DNSessionidsResponse();

  DNSessionidsResponse(const DNSessionidsResponse& from);

  inline DNSessionidsResponse& operator=(const DNSessionidsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DNSessionidsResponse(DNSessionidsResponse&& from) noexcept
    : DNSessionidsResponse() {
    *this = ::std::move(from);
  }

  inline DNSessionidsResponse& operator=(DNSessionidsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DNSessionidsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSessionidsResponse* internal_default_instance() {
    return reinterpret_cast<const DNSessionidsResponse*>(
               &_DNSessionidsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DNSessionidsResponse* other);
  friend void swap(DNSessionidsResponse& a, DNSessionidsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DNSessionidsResponse* New() const final {
    return CreateMaybeMessage<DNSessionidsResponse>(NULL);
  }

  DNSessionidsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DNSessionidsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DNSessionidsResponse& from);
  void MergeFrom(const DNSessionidsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNSessionidsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 sessionIds = 1;
  int sessionids_size() const;
  void clear_sessionids();
  static const int kSessionIdsFieldNumber = 1;
  ::google::protobuf::uint64 sessionids(int index) const;
  void set_sessionids(int index, ::google::protobuf::uint64 value);
  void add_sessionids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      sessionids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_sessionids();

  // @@protoc_insertion_point(class_scope:pb.DNSessionidsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > sessionids_;
  mutable int _sessionids_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DNSessionidsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DNSessionidsRequest) */ {
 public:
  DNSessionidsRequest();
  virtual ~DNSessionidsRequest();

  DNSessionidsRequest(const DNSessionidsRequest& from);

  inline DNSessionidsRequest& operator=(const DNSessionidsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DNSessionidsRequest(DNSessionidsRequest&& from) noexcept
    : DNSessionidsRequest() {
    *this = ::std::move(from);
  }

  inline DNSessionidsRequest& operator=(DNSessionidsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DNSessionidsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSessionidsRequest* internal_default_instance() {
    return reinterpret_cast<const DNSessionidsRequest*>(
               &_DNSessionidsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DNSessionidsRequest* other);
  friend void swap(DNSessionidsRequest& a, DNSessionidsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DNSessionidsRequest* New() const final {
    return CreateMaybeMessage<DNSessionidsRequest>(NULL);
  }

  DNSessionidsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DNSessionidsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DNSessionidsRequest& from);
  void MergeFrom(const DNSessionidsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNSessionidsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint64 type() const;
  void set_type(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.DNSessionidsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCUpsertSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCUpsertSessionRequest) */ {
 public:
  RPCUpsertSessionRequest();
  virtual ~RPCUpsertSessionRequest();

  RPCUpsertSessionRequest(const RPCUpsertSessionRequest& from);

  inline RPCUpsertSessionRequest& operator=(const RPCUpsertSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCUpsertSessionRequest(RPCUpsertSessionRequest&& from) noexcept
    : RPCUpsertSessionRequest() {
    *this = ::std::move(from);
  }

  inline RPCUpsertSessionRequest& operator=(RPCUpsertSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCUpsertSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCUpsertSessionRequest* internal_default_instance() {
    return reinterpret_cast<const RPCUpsertSessionRequest*>(
               &_RPCUpsertSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RPCUpsertSessionRequest* other);
  friend void swap(RPCUpsertSessionRequest& a, RPCUpsertSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCUpsertSessionRequest* New() const final {
    return CreateMaybeMessage<RPCUpsertSessionRequest>(NULL);
  }

  RPCUpsertSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCUpsertSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCUpsertSessionRequest& from);
  void MergeFrom(const RPCUpsertSessionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCUpsertSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Session session = 1;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 1;
  private:
  const ::pb::Session& _internal_session() const;
  public:
  const ::pb::Session& session() const;
  ::pb::Session* release_session();
  ::pb::Session* mutable_session();
  void set_allocated_session(::pb::Session* session);

  // @@protoc_insertion_point(class_scope:pb.RPCUpsertSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Session* session_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCUpsertSessionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCUpsertSessionResponse) */ {
 public:
  RPCUpsertSessionResponse();
  virtual ~RPCUpsertSessionResponse();

  RPCUpsertSessionResponse(const RPCUpsertSessionResponse& from);

  inline RPCUpsertSessionResponse& operator=(const RPCUpsertSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCUpsertSessionResponse(RPCUpsertSessionResponse&& from) noexcept
    : RPCUpsertSessionResponse() {
    *this = ::std::move(from);
  }

  inline RPCUpsertSessionResponse& operator=(RPCUpsertSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCUpsertSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCUpsertSessionResponse* internal_default_instance() {
    return reinterpret_cast<const RPCUpsertSessionResponse*>(
               &_RPCUpsertSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RPCUpsertSessionResponse* other);
  friend void swap(RPCUpsertSessionResponse& a, RPCUpsertSessionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCUpsertSessionResponse* New() const final {
    return CreateMaybeMessage<RPCUpsertSessionResponse>(NULL);
  }

  RPCUpsertSessionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCUpsertSessionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCUpsertSessionResponse& from);
  void MergeFrom(const RPCUpsertSessionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCUpsertSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 sessionId = 1;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.RPCUpsertSessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCDeleteSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCDeleteSessionRequest) */ {
 public:
  RPCDeleteSessionRequest();
  virtual ~RPCDeleteSessionRequest();

  RPCDeleteSessionRequest(const RPCDeleteSessionRequest& from);

  inline RPCDeleteSessionRequest& operator=(const RPCDeleteSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCDeleteSessionRequest(RPCDeleteSessionRequest&& from) noexcept
    : RPCDeleteSessionRequest() {
    *this = ::std::move(from);
  }

  inline RPCDeleteSessionRequest& operator=(RPCDeleteSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCDeleteSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCDeleteSessionRequest* internal_default_instance() {
    return reinterpret_cast<const RPCDeleteSessionRequest*>(
               &_RPCDeleteSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(RPCDeleteSessionRequest* other);
  friend void swap(RPCDeleteSessionRequest& a, RPCDeleteSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCDeleteSessionRequest* New() const final {
    return CreateMaybeMessage<RPCDeleteSessionRequest>(NULL);
  }

  RPCDeleteSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCDeleteSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCDeleteSessionRequest& from);
  void MergeFrom(const RPCDeleteSessionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCDeleteSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 sessionId = 1;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.RPCDeleteSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCDeleteSessionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCDeleteSessionResponse) */ {
 public:
  RPCDeleteSessionResponse();
  virtual ~RPCDeleteSessionResponse();

  RPCDeleteSessionResponse(const RPCDeleteSessionResponse& from);

  inline RPCDeleteSessionResponse& operator=(const RPCDeleteSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCDeleteSessionResponse(RPCDeleteSessionResponse&& from) noexcept
    : RPCDeleteSessionResponse() {
    *this = ::std::move(from);
  }

  inline RPCDeleteSessionResponse& operator=(RPCDeleteSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCDeleteSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCDeleteSessionResponse* internal_default_instance() {
    return reinterpret_cast<const RPCDeleteSessionResponse*>(
               &_RPCDeleteSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RPCDeleteSessionResponse* other);
  friend void swap(RPCDeleteSessionResponse& a, RPCDeleteSessionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCDeleteSessionResponse* New() const final {
    return CreateMaybeMessage<RPCDeleteSessionResponse>(NULL);
  }

  RPCDeleteSessionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCDeleteSessionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCDeleteSessionResponse& from);
  void MergeFrom(const RPCDeleteSessionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCDeleteSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:pb.RPCDeleteSessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCGetSessionIdsByDetailsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetSessionIdsByDetailsRequest) */ {
 public:
  RPCGetSessionIdsByDetailsRequest();
  virtual ~RPCGetSessionIdsByDetailsRequest();

  RPCGetSessionIdsByDetailsRequest(const RPCGetSessionIdsByDetailsRequest& from);

  inline RPCGetSessionIdsByDetailsRequest& operator=(const RPCGetSessionIdsByDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetSessionIdsByDetailsRequest(RPCGetSessionIdsByDetailsRequest&& from) noexcept
    : RPCGetSessionIdsByDetailsRequest() {
    *this = ::std::move(from);
  }

  inline RPCGetSessionIdsByDetailsRequest& operator=(RPCGetSessionIdsByDetailsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetSessionIdsByDetailsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetSessionIdsByDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const RPCGetSessionIdsByDetailsRequest*>(
               &_RPCGetSessionIdsByDetailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RPCGetSessionIdsByDetailsRequest* other);
  friend void swap(RPCGetSessionIdsByDetailsRequest& a, RPCGetSessionIdsByDetailsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetSessionIdsByDetailsRequest* New() const final {
    return CreateMaybeMessage<RPCGetSessionIdsByDetailsRequest>(NULL);
  }

  RPCGetSessionIdsByDetailsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCGetSessionIdsByDetailsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCGetSessionIdsByDetailsRequest& from);
  void MergeFrom(const RPCGetSessionIdsByDetailsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCGetSessionIdsByDetailsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // uint64 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint64 type() const;
  void set_type(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.RPCGetSessionIdsByDetailsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::uint64 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCGetSessionIdsByPeerIdsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetSessionIdsByPeerIdsRequest) */ {
 public:
  RPCGetSessionIdsByPeerIdsRequest();
  virtual ~RPCGetSessionIdsByPeerIdsRequest();

  RPCGetSessionIdsByPeerIdsRequest(const RPCGetSessionIdsByPeerIdsRequest& from);

  inline RPCGetSessionIdsByPeerIdsRequest& operator=(const RPCGetSessionIdsByPeerIdsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetSessionIdsByPeerIdsRequest(RPCGetSessionIdsByPeerIdsRequest&& from) noexcept
    : RPCGetSessionIdsByPeerIdsRequest() {
    *this = ::std::move(from);
  }

  inline RPCGetSessionIdsByPeerIdsRequest& operator=(RPCGetSessionIdsByPeerIdsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetSessionIdsByPeerIdsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetSessionIdsByPeerIdsRequest* internal_default_instance() {
    return reinterpret_cast<const RPCGetSessionIdsByPeerIdsRequest*>(
               &_RPCGetSessionIdsByPeerIdsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(RPCGetSessionIdsByPeerIdsRequest* other);
  friend void swap(RPCGetSessionIdsByPeerIdsRequest& a, RPCGetSessionIdsByPeerIdsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetSessionIdsByPeerIdsRequest* New() const final {
    return CreateMaybeMessage<RPCGetSessionIdsByPeerIdsRequest>(NULL);
  }

  RPCGetSessionIdsByPeerIdsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCGetSessionIdsByPeerIdsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCGetSessionIdsByPeerIdsRequest& from);
  void MergeFrom(const RPCGetSessionIdsByPeerIdsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCGetSessionIdsByPeerIdsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string peerIds = 1;
  int peerids_size() const;
  void clear_peerids();
  static const int kPeerIdsFieldNumber = 1;
  const ::std::string& peerids(int index) const;
  ::std::string* mutable_peerids(int index);
  void set_peerids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_peerids(int index, ::std::string&& value);
  #endif
  void set_peerids(int index, const char* value);
  void set_peerids(int index, const char* value, size_t size);
  ::std::string* add_peerids();
  void add_peerids(const ::std::string& value);
  #if LANG_CXX11
  void add_peerids(::std::string&& value);
  #endif
  void add_peerids(const char* value);
  void add_peerids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& peerids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peerids();

  // @@protoc_insertion_point(class_scope:pb.RPCGetSessionIdsByPeerIdsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peerids_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCGetSessionIdsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetSessionIdsResponse) */ {
 public:
  RPCGetSessionIdsResponse();
  virtual ~RPCGetSessionIdsResponse();

  RPCGetSessionIdsResponse(const RPCGetSessionIdsResponse& from);

  inline RPCGetSessionIdsResponse& operator=(const RPCGetSessionIdsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetSessionIdsResponse(RPCGetSessionIdsResponse&& from) noexcept
    : RPCGetSessionIdsResponse() {
    *this = ::std::move(from);
  }

  inline RPCGetSessionIdsResponse& operator=(RPCGetSessionIdsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetSessionIdsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetSessionIdsResponse* internal_default_instance() {
    return reinterpret_cast<const RPCGetSessionIdsResponse*>(
               &_RPCGetSessionIdsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(RPCGetSessionIdsResponse* other);
  friend void swap(RPCGetSessionIdsResponse& a, RPCGetSessionIdsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetSessionIdsResponse* New() const final {
    return CreateMaybeMessage<RPCGetSessionIdsResponse>(NULL);
  }

  RPCGetSessionIdsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCGetSessionIdsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCGetSessionIdsResponse& from);
  void MergeFrom(const RPCGetSessionIdsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCGetSessionIdsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 sessionIds = 1;
  int sessionids_size() const;
  void clear_sessionids();
  static const int kSessionIdsFieldNumber = 1;
  ::google::protobuf::uint64 sessionids(int index) const;
  void set_sessionids(int index, ::google::protobuf::uint64 value);
  void add_sessionids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      sessionids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_sessionids();

  // @@protoc_insertion_point(class_scope:pb.RPCGetSessionIdsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > sessionids_;
  mutable int _sessionids_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCGetSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetSessionRequest) */ {
 public:
  RPCGetSessionRequest();
  virtual ~RPCGetSessionRequest();

  RPCGetSessionRequest(const RPCGetSessionRequest& from);

  inline RPCGetSessionRequest& operator=(const RPCGetSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetSessionRequest(RPCGetSessionRequest&& from) noexcept
    : RPCGetSessionRequest() {
    *this = ::std::move(from);
  }

  inline RPCGetSessionRequest& operator=(RPCGetSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetSessionRequest* internal_default_instance() {
    return reinterpret_cast<const RPCGetSessionRequest*>(
               &_RPCGetSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(RPCGetSessionRequest* other);
  friend void swap(RPCGetSessionRequest& a, RPCGetSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetSessionRequest* New() const final {
    return CreateMaybeMessage<RPCGetSessionRequest>(NULL);
  }

  RPCGetSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCGetSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCGetSessionRequest& from);
  void MergeFrom(const RPCGetSessionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCGetSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 sessionId = 1;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.RPCGetSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCGetSessionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RPCGetSessionResponse) */ {
 public:
  RPCGetSessionResponse();
  virtual ~RPCGetSessionResponse();

  RPCGetSessionResponse(const RPCGetSessionResponse& from);

  inline RPCGetSessionResponse& operator=(const RPCGetSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCGetSessionResponse(RPCGetSessionResponse&& from) noexcept
    : RPCGetSessionResponse() {
    *this = ::std::move(from);
  }

  inline RPCGetSessionResponse& operator=(RPCGetSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCGetSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCGetSessionResponse* internal_default_instance() {
    return reinterpret_cast<const RPCGetSessionResponse*>(
               &_RPCGetSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(RPCGetSessionResponse* other);
  friend void swap(RPCGetSessionResponse& a, RPCGetSessionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCGetSessionResponse* New() const final {
    return CreateMaybeMessage<RPCGetSessionResponse>(NULL);
  }

  RPCGetSessionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCGetSessionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCGetSessionResponse& from);
  void MergeFrom(const RPCGetSessionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCGetSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Session session = 1;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 1;
  private:
  const ::pb::Session& _internal_session() const;
  public:
  const ::pb::Session& session() const;
  ::pb::Session* release_session();
  ::pb::Session* mutable_session();
  void set_allocated_session(::pb::Session* session);

  // @@protoc_insertion_point(class_scope:pb.RPCGetSessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Session* session_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pb_2fmatchmaking_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Session

// string pId = 1;
inline void Session::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session::pid() const {
  // @@protoc_insertion_point(field_get:pb.Session.pId)
  return pid_.GetNoArena();
}
inline void Session::set_pid(const ::std::string& value) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Session.pId)
}
#if LANG_CXX11
inline void Session::set_pid(::std::string&& value) {
  
  pid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Session.pId)
}
#endif
inline void Session::set_pid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Session.pId)
}
inline void Session::set_pid(const char* value, size_t size) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Session.pId)
}
inline ::std::string* Session::mutable_pid() {
  
  // @@protoc_insertion_point(field_mutable:pb.Session.pId)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_pid() {
  // @@protoc_insertion_point(field_release:pb.Session.pId)
  
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    
  } else {
    
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:pb.Session.pId)
}

// uint64 dnId = 2;
inline void Session::clear_dnid() {
  dnid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Session::dnid() const {
  // @@protoc_insertion_point(field_get:pb.Session.dnId)
  return dnid_;
}
inline void Session::set_dnid(::google::protobuf::uint64 value) {
  
  dnid_ = value;
  // @@protoc_insertion_point(field_set:pb.Session.dnId)
}

// uint64 sessionId = 3;
inline void Session::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Session::sessionid() const {
  // @@protoc_insertion_point(field_get:pb.Session.sessionId)
  return sessionid_;
}
inline void Session::set_sessionid(::google::protobuf::uint64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:pb.Session.sessionId)
}

// uint64 type = 4;
inline void Session::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Session::type() const {
  // @@protoc_insertion_point(field_get:pb.Session.type)
  return type_;
}
inline void Session::set_type(::google::protobuf::uint64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.Session.type)
}

// string name = 5;
inline void Session::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session::name() const {
  // @@protoc_insertion_point(field_get:pb.Session.name)
  return name_.GetNoArena();
}
inline void Session::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Session.name)
}
#if LANG_CXX11
inline void Session::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Session.name)
}
#endif
inline void Session::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Session.name)
}
inline void Session::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Session.name)
}
inline ::std::string* Session::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.Session.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_name() {
  // @@protoc_insertion_point(field_release:pb.Session.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.Session.name)
}

// uint32 address = 6;
inline void Session::clear_address() {
  address_ = 0u;
}
inline ::google::protobuf::uint32 Session::address() const {
  // @@protoc_insertion_point(field_get:pb.Session.address)
  return address_;
}
inline void Session::set_address(::google::protobuf::uint32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:pb.Session.address)
}

// uint32 port = 7;
inline void Session::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Session::port() const {
  // @@protoc_insertion_point(field_get:pb.Session.port)
  return port_;
}
inline void Session::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:pb.Session.port)
}

// map<string, string> details = 8;
inline int Session::details_size() const {
  return details_.size();
}
inline void Session::clear_details() {
  details_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Session::details() const {
  // @@protoc_insertion_point(field_map:pb.Session.details)
  return details_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Session::mutable_details() {
  // @@protoc_insertion_point(field_mutable_map:pb.Session.details)
  return details_.MutableMap();
}

// uint64 published = 9;
inline void Session::clear_published() {
  published_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Session::published() const {
  // @@protoc_insertion_point(field_get:pb.Session.published)
  return published_;
}
inline void Session::set_published(::google::protobuf::uint64 value) {
  
  published_ = value;
  // @@protoc_insertion_point(field_set:pb.Session.published)
}

// -------------------------------------------------------------------

// DNSessionStore

// repeated .pb.Session sessions = 1;
inline int DNSessionStore::sessions_size() const {
  return sessions_.size();
}
inline void DNSessionStore::clear_sessions() {
  sessions_.Clear();
}
inline ::pb::Session* DNSessionStore::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DNSessionStore.sessions)
  return sessions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Session >*
DNSessionStore::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:pb.DNSessionStore.sessions)
  return &sessions_;
}
inline const ::pb::Session& DNSessionStore::sessions(int index) const {
  // @@protoc_insertion_point(field_get:pb.DNSessionStore.sessions)
  return sessions_.Get(index);
}
inline ::pb::Session* DNSessionStore::add_sessions() {
  // @@protoc_insertion_point(field_add:pb.DNSessionStore.sessions)
  return sessions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Session >&
DNSessionStore::sessions() const {
  // @@protoc_insertion_point(field_list:pb.DNSessionStore.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// DNSessionsRecord

// uint64 published = 1;
inline void DNSessionsRecord::clear_published() {
  published_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DNSessionsRecord::published() const {
  // @@protoc_insertion_point(field_get:pb.DNSessionsRecord.published)
  return published_;
}
inline void DNSessionsRecord::set_published(::google::protobuf::uint64 value) {
  
  published_ = value;
  // @@protoc_insertion_point(field_set:pb.DNSessionsRecord.published)
}

// repeated .pb.Session results = 2;
inline int DNSessionsRecord::results_size() const {
  return results_.size();
}
inline void DNSessionsRecord::clear_results() {
  results_.Clear();
}
inline ::pb::Session* DNSessionsRecord::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DNSessionsRecord.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Session >*
DNSessionsRecord::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:pb.DNSessionsRecord.results)
  return &results_;
}
inline const ::pb::Session& DNSessionsRecord::results(int index) const {
  // @@protoc_insertion_point(field_get:pb.DNSessionsRecord.results)
  return results_.Get(index);
}
inline ::pb::Session* DNSessionsRecord::add_results() {
  // @@protoc_insertion_point(field_add:pb.DNSessionsRecord.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Session >&
DNSessionsRecord::results() const {
  // @@protoc_insertion_point(field_list:pb.DNSessionsRecord.results)
  return results_;
}

// -------------------------------------------------------------------

// DNSessionsResponse

// repeated .pb.Session results = 1;
inline int DNSessionsResponse::results_size() const {
  return results_.size();
}
inline void DNSessionsResponse::clear_results() {
  results_.Clear();
}
inline ::pb::Session* DNSessionsResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DNSessionsResponse.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Session >*
DNSessionsResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:pb.DNSessionsResponse.results)
  return &results_;
}
inline const ::pb::Session& DNSessionsResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:pb.DNSessionsResponse.results)
  return results_.Get(index);
}
inline ::pb::Session* DNSessionsResponse::add_results() {
  // @@protoc_insertion_point(field_add:pb.DNSessionsResponse.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Session >&
DNSessionsResponse::results() const {
  // @@protoc_insertion_point(field_list:pb.DNSessionsResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// DNSessionsRequest

// uint64 type = 1;
inline void DNSessionsRequest::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DNSessionsRequest::type() const {
  // @@protoc_insertion_point(field_get:pb.DNSessionsRequest.type)
  return type_;
}
inline void DNSessionsRequest::set_type(::google::protobuf::uint64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.DNSessionsRequest.type)
}

// repeated uint64 sessionIds = 2;
inline int DNSessionsRequest::sessionids_size() const {
  return sessionids_.size();
}
inline void DNSessionsRequest::clear_sessionids() {
  sessionids_.Clear();
}
inline ::google::protobuf::uint64 DNSessionsRequest::sessionids(int index) const {
  // @@protoc_insertion_point(field_get:pb.DNSessionsRequest.sessionIds)
  return sessionids_.Get(index);
}
inline void DNSessionsRequest::set_sessionids(int index, ::google::protobuf::uint64 value) {
  sessionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.DNSessionsRequest.sessionIds)
}
inline void DNSessionsRequest::add_sessionids(::google::protobuf::uint64 value) {
  sessionids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.DNSessionsRequest.sessionIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DNSessionsRequest::sessionids() const {
  // @@protoc_insertion_point(field_list:pb.DNSessionsRequest.sessionIds)
  return sessionids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DNSessionsRequest::mutable_sessionids() {
  // @@protoc_insertion_point(field_mutable_list:pb.DNSessionsRequest.sessionIds)
  return &sessionids_;
}

// -------------------------------------------------------------------

// DNSessionidsResponse

// repeated uint64 sessionIds = 1;
inline int DNSessionidsResponse::sessionids_size() const {
  return sessionids_.size();
}
inline void DNSessionidsResponse::clear_sessionids() {
  sessionids_.Clear();
}
inline ::google::protobuf::uint64 DNSessionidsResponse::sessionids(int index) const {
  // @@protoc_insertion_point(field_get:pb.DNSessionidsResponse.sessionIds)
  return sessionids_.Get(index);
}
inline void DNSessionidsResponse::set_sessionids(int index, ::google::protobuf::uint64 value) {
  sessionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.DNSessionidsResponse.sessionIds)
}
inline void DNSessionidsResponse::add_sessionids(::google::protobuf::uint64 value) {
  sessionids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.DNSessionidsResponse.sessionIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DNSessionidsResponse::sessionids() const {
  // @@protoc_insertion_point(field_list:pb.DNSessionidsResponse.sessionIds)
  return sessionids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DNSessionidsResponse::mutable_sessionids() {
  // @@protoc_insertion_point(field_mutable_list:pb.DNSessionidsResponse.sessionIds)
  return &sessionids_;
}

// -------------------------------------------------------------------

// DNSessionidsRequest

// uint64 type = 1;
inline void DNSessionidsRequest::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DNSessionidsRequest::type() const {
  // @@protoc_insertion_point(field_get:pb.DNSessionidsRequest.type)
  return type_;
}
inline void DNSessionidsRequest::set_type(::google::protobuf::uint64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.DNSessionidsRequest.type)
}

// -------------------------------------------------------------------

// RPCUpsertSessionRequest

// .pb.Session session = 1;
inline bool RPCUpsertSessionRequest::has_session() const {
  return this != internal_default_instance() && session_ != NULL;
}
inline void RPCUpsertSessionRequest::clear_session() {
  if (GetArenaNoVirtual() == NULL && session_ != NULL) {
    delete session_;
  }
  session_ = NULL;
}
inline const ::pb::Session& RPCUpsertSessionRequest::_internal_session() const {
  return *session_;
}
inline const ::pb::Session& RPCUpsertSessionRequest::session() const {
  const ::pb::Session* p = session_;
  // @@protoc_insertion_point(field_get:pb.RPCUpsertSessionRequest.session)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Session*>(
      &::pb::_Session_default_instance_);
}
inline ::pb::Session* RPCUpsertSessionRequest::release_session() {
  // @@protoc_insertion_point(field_release:pb.RPCUpsertSessionRequest.session)
  
  ::pb::Session* temp = session_;
  session_ = NULL;
  return temp;
}
inline ::pb::Session* RPCUpsertSessionRequest::mutable_session() {
  
  if (session_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Session>(GetArenaNoVirtual());
    session_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCUpsertSessionRequest.session)
  return session_;
}
inline void RPCUpsertSessionRequest::set_allocated_session(::pb::Session* session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete session_;
  }
  if (session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:pb.RPCUpsertSessionRequest.session)
}

// -------------------------------------------------------------------

// RPCUpsertSessionResponse

// uint64 sessionId = 1;
inline void RPCUpsertSessionResponse::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RPCUpsertSessionResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:pb.RPCUpsertSessionResponse.sessionId)
  return sessionid_;
}
inline void RPCUpsertSessionResponse::set_sessionid(::google::protobuf::uint64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCUpsertSessionResponse.sessionId)
}

// -------------------------------------------------------------------

// RPCDeleteSessionRequest

// uint64 sessionId = 1;
inline void RPCDeleteSessionRequest::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RPCDeleteSessionRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:pb.RPCDeleteSessionRequest.sessionId)
  return sessionid_;
}
inline void RPCDeleteSessionRequest::set_sessionid(::google::protobuf::uint64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCDeleteSessionRequest.sessionId)
}

// -------------------------------------------------------------------

// RPCDeleteSessionResponse

// bool result = 1;
inline void RPCDeleteSessionResponse::clear_result() {
  result_ = false;
}
inline bool RPCDeleteSessionResponse::result() const {
  // @@protoc_insertion_point(field_get:pb.RPCDeleteSessionResponse.result)
  return result_;
}
inline void RPCDeleteSessionResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCDeleteSessionResponse.result)
}

// -------------------------------------------------------------------

// RPCGetSessionIdsByDetailsRequest

// uint64 type = 1;
inline void RPCGetSessionIdsByDetailsRequest::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RPCGetSessionIdsByDetailsRequest::type() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetSessionIdsByDetailsRequest.type)
  return type_;
}
inline void RPCGetSessionIdsByDetailsRequest::set_type(::google::protobuf::uint64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCGetSessionIdsByDetailsRequest.type)
}

// string key = 2;
inline void RPCGetSessionIdsByDetailsRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetSessionIdsByDetailsRequest::key() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetSessionIdsByDetailsRequest.key)
  return key_.GetNoArena();
}
inline void RPCGetSessionIdsByDetailsRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetSessionIdsByDetailsRequest.key)
}
#if LANG_CXX11
inline void RPCGetSessionIdsByDetailsRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetSessionIdsByDetailsRequest.key)
}
#endif
inline void RPCGetSessionIdsByDetailsRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetSessionIdsByDetailsRequest.key)
}
inline void RPCGetSessionIdsByDetailsRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetSessionIdsByDetailsRequest.key)
}
inline ::std::string* RPCGetSessionIdsByDetailsRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetSessionIdsByDetailsRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetSessionIdsByDetailsRequest::release_key() {
  // @@protoc_insertion_point(field_release:pb.RPCGetSessionIdsByDetailsRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetSessionIdsByDetailsRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetSessionIdsByDetailsRequest.key)
}

// string value = 3;
inline void RPCGetSessionIdsByDetailsRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCGetSessionIdsByDetailsRequest::value() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetSessionIdsByDetailsRequest.value)
  return value_.GetNoArena();
}
inline void RPCGetSessionIdsByDetailsRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RPCGetSessionIdsByDetailsRequest.value)
}
#if LANG_CXX11
inline void RPCGetSessionIdsByDetailsRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RPCGetSessionIdsByDetailsRequest.value)
}
#endif
inline void RPCGetSessionIdsByDetailsRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RPCGetSessionIdsByDetailsRequest.value)
}
inline void RPCGetSessionIdsByDetailsRequest::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetSessionIdsByDetailsRequest.value)
}
inline ::std::string* RPCGetSessionIdsByDetailsRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pb.RPCGetSessionIdsByDetailsRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCGetSessionIdsByDetailsRequest::release_value() {
  // @@protoc_insertion_point(field_release:pb.RPCGetSessionIdsByDetailsRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCGetSessionIdsByDetailsRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetSessionIdsByDetailsRequest.value)
}

// -------------------------------------------------------------------

// RPCGetSessionIdsByPeerIdsRequest

// repeated string peerIds = 1;
inline int RPCGetSessionIdsByPeerIdsRequest::peerids_size() const {
  return peerids_.size();
}
inline void RPCGetSessionIdsByPeerIdsRequest::clear_peerids() {
  peerids_.Clear();
}
inline const ::std::string& RPCGetSessionIdsByPeerIdsRequest::peerids(int index) const {
  // @@protoc_insertion_point(field_get:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
  return peerids_.Get(index);
}
inline ::std::string* RPCGetSessionIdsByPeerIdsRequest::mutable_peerids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
  return peerids_.Mutable(index);
}
inline void RPCGetSessionIdsByPeerIdsRequest::set_peerids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
  peerids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RPCGetSessionIdsByPeerIdsRequest::set_peerids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
  peerids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RPCGetSessionIdsByPeerIdsRequest::set_peerids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peerids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
}
inline void RPCGetSessionIdsByPeerIdsRequest::set_peerids(int index, const char* value, size_t size) {
  peerids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
}
inline ::std::string* RPCGetSessionIdsByPeerIdsRequest::add_peerids() {
  // @@protoc_insertion_point(field_add_mutable:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
  return peerids_.Add();
}
inline void RPCGetSessionIdsByPeerIdsRequest::add_peerids(const ::std::string& value) {
  peerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
}
#if LANG_CXX11
inline void RPCGetSessionIdsByPeerIdsRequest::add_peerids(::std::string&& value) {
  peerids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
}
#endif
inline void RPCGetSessionIdsByPeerIdsRequest::add_peerids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
}
inline void RPCGetSessionIdsByPeerIdsRequest::add_peerids(const char* value, size_t size) {
  peerids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RPCGetSessionIdsByPeerIdsRequest::peerids() const {
  // @@protoc_insertion_point(field_list:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
  return peerids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RPCGetSessionIdsByPeerIdsRequest::mutable_peerids() {
  // @@protoc_insertion_point(field_mutable_list:pb.RPCGetSessionIdsByPeerIdsRequest.peerIds)
  return &peerids_;
}

// -------------------------------------------------------------------

// RPCGetSessionIdsResponse

// repeated uint64 sessionIds = 1;
inline int RPCGetSessionIdsResponse::sessionids_size() const {
  return sessionids_.size();
}
inline void RPCGetSessionIdsResponse::clear_sessionids() {
  sessionids_.Clear();
}
inline ::google::protobuf::uint64 RPCGetSessionIdsResponse::sessionids(int index) const {
  // @@protoc_insertion_point(field_get:pb.RPCGetSessionIdsResponse.sessionIds)
  return sessionids_.Get(index);
}
inline void RPCGetSessionIdsResponse::set_sessionids(int index, ::google::protobuf::uint64 value) {
  sessionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.RPCGetSessionIdsResponse.sessionIds)
}
inline void RPCGetSessionIdsResponse::add_sessionids(::google::protobuf::uint64 value) {
  sessionids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.RPCGetSessionIdsResponse.sessionIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RPCGetSessionIdsResponse::sessionids() const {
  // @@protoc_insertion_point(field_list:pb.RPCGetSessionIdsResponse.sessionIds)
  return sessionids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RPCGetSessionIdsResponse::mutable_sessionids() {
  // @@protoc_insertion_point(field_mutable_list:pb.RPCGetSessionIdsResponse.sessionIds)
  return &sessionids_;
}

// -------------------------------------------------------------------

// RPCGetSessionRequest

// uint64 sessionId = 1;
inline void RPCGetSessionRequest::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RPCGetSessionRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:pb.RPCGetSessionRequest.sessionId)
  return sessionid_;
}
inline void RPCGetSessionRequest::set_sessionid(::google::protobuf::uint64 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:pb.RPCGetSessionRequest.sessionId)
}

// -------------------------------------------------------------------

// RPCGetSessionResponse

// .pb.Session session = 1;
inline bool RPCGetSessionResponse::has_session() const {
  return this != internal_default_instance() && session_ != NULL;
}
inline void RPCGetSessionResponse::clear_session() {
  if (GetArenaNoVirtual() == NULL && session_ != NULL) {
    delete session_;
  }
  session_ = NULL;
}
inline const ::pb::Session& RPCGetSessionResponse::_internal_session() const {
  return *session_;
}
inline const ::pb::Session& RPCGetSessionResponse::session() const {
  const ::pb::Session* p = session_;
  // @@protoc_insertion_point(field_get:pb.RPCGetSessionResponse.session)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Session*>(
      &::pb::_Session_default_instance_);
}
inline ::pb::Session* RPCGetSessionResponse::release_session() {
  // @@protoc_insertion_point(field_release:pb.RPCGetSessionResponse.session)
  
  ::pb::Session* temp = session_;
  session_ = NULL;
  return temp;
}
inline ::pb::Session* RPCGetSessionResponse::mutable_session() {
  
  if (session_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Session>(GetArenaNoVirtual());
    session_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RPCGetSessionResponse.session)
  return session_;
}
inline void RPCGetSessionResponse::set_allocated_session(::pb::Session* session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete session_;
  }
  if (session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:pb.RPCGetSessionResponse.session)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pb_2fmatchmaking_2eproto
