// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb/platform.proto
#ifndef GRPC_pb_2fplatform_2eproto__INCLUDED
#define GRPC_pb_2fplatform_2eproto__INCLUDED

#include "pb/platform.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace pb {

class Decentralizer final {
 public:
  static constexpr char const* service_full_name() {
    return "pb.Decentralizer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Platform
    //
    // Get health of decentralizer.
    virtual ::grpc::Status GetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::pb::RPCHealthReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>> AsyncGetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>>(AsyncGetHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>> PrepareAsyncGetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>>(PrepareAsyncGetHealthRaw(context, request, cq));
    }
    //
    // Matchmaking
    //
    // Create or update a session. Takes session info, returns session id.
    virtual ::grpc::Status UpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::pb::RPCUpsertSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>> AsyncUpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>>(AsyncUpsertSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>> PrepareAsyncUpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>>(PrepareAsyncUpsertSessionRaw(context, request, cq));
    }
    // Delete a session. Takes session id, returns bool informing if the deletion was a success
    virtual ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::pb::RPCDeleteSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>> AsyncDeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    // Get session ids. Takes session type, and a key and value to filter the sessions by details. If left empty this filter will not apply and all will be fetched.
    virtual ::grpc::Status GetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::pb::RPCGetSessionIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>> AsyncGetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>>(AsyncGetSessionIdsByDetailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>> PrepareAsyncGetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>>(PrepareAsyncGetSessionIdsByDetailsRaw(context, request, cq));
    }
    // Get session ids. Takes peer ids. Returns session ids
    virtual ::grpc::Status GetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::pb::RPCGetSessionIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>> AsyncGetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>>(AsyncGetSessionIdsByPeerIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>> PrepareAsyncGetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>>(PrepareAsyncGetSessionIdsByPeerIdsRaw(context, request, cq));
    }
    // Get an individual session. Takes session id and returns session info.
    virtual ::grpc::Status GetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::pb::RPCGetSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>> AsyncGetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    //
    // Address book
    //
    // Create or update a peer. Takes peer info, returns if it was a success.
    virtual ::grpc::Status UpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::pb::RPCUpsertPeerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>> AsyncUpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>>(AsyncUpsertPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>> PrepareAsyncUpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>>(PrepareAsyncUpsertPeerRaw(context, request, cq));
    }
    // Get peer ids. takes a key and value to filter the peers by details. If left empty this filter will not apply and all will be fetched.
    virtual ::grpc::Status GetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::pb::RPCGetPeerIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>> AsyncGetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>>(AsyncGetPeerIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>> PrepareAsyncGetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>>(PrepareAsyncGetPeerIdsRaw(context, request, cq));
    }
    // Get an individual peer. Takes either a peer id or decentralizer id and returns the peer info.
    virtual ::grpc::Status GetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::pb::RPCGetPeerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>> AsyncGetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>>(AsyncGetPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>> PrepareAsyncGetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>>(PrepareAsyncGetPeerRaw(context, request, cq));
    }
    //
    // Storage
    //
    // Write a peer file. Takes a file name and the data it should save.
    virtual ::grpc::Status WritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::pb::RPCWritePeerFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>> AsyncWritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>>(AsyncWritePeerFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>> PrepareAsyncWritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>>(PrepareAsyncWritePeerFileRaw(context, request, cq));
    }
    // Get a peer file. Takes a file name, returns the file.
    virtual ::grpc::Status GetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::pb::RPCGetPeerFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>> AsyncGetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>>(AsyncGetPeerFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>> PrepareAsyncGetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>>(PrepareAsyncGetPeerFileRaw(context, request, cq));
    }
    //
    // Messaging
    //
    // Send another peer a direct message. Takes a peer id and the data it should send
    virtual ::grpc::Status SendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::pb::empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>> AsyncSendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>>(AsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>> PrepareAsyncSendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>>(PrepareAsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::RPCDirectMessage>> ReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::RPCDirectMessage>>(ReceiveDirectMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>> AsyncReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>>(AsyncReceiveDirectMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>> PrepareAsyncReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>>(PrepareAsyncReceiveDirectMessageRaw(context, request, cq));
    }
    //
    // Publisher
    //
    // Load a publisher definition. Will not work if its older!
    virtual ::grpc::Status readPublisherDefinition(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest& request, ::pb::empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>> AsyncreadPublisherDefinition(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>>(AsyncreadPublisherDefinitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>> PrepareAsyncreadPublisherDefinition(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>>(PrepareAsyncreadPublisherDefinitionRaw(context, request, cq));
    }
    // Signs a new publisher update. (Only if you have the private key!)
    virtual ::grpc::Status publishPublisherUpdate(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest& request, ::pb::DNPublisherRecord* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::DNPublisherRecord>> AsyncpublishPublisherUpdate(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::DNPublisherRecord>>(AsyncpublishPublisherUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::DNPublisherRecord>> PrepareAsyncpublishPublisherUpdate(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::DNPublisherRecord>>(PrepareAsyncpublishPublisherUpdateRaw(context, request, cq));
    }
    // Get the full publisher definition
    virtual ::grpc::Status GetPublisherDefinition(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest& request, ::pb::PublisherDefinition* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::PublisherDefinition>> AsyncGetPublisherDefinition(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::PublisherDefinition>>(AsyncGetPublisherDefinitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::PublisherDefinition>> PrepareAsyncGetPublisherDefinition(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::PublisherDefinition>>(PrepareAsyncGetPublisherDefinitionRaw(context, request, cq));
    }
    // Get a publisher file.
    virtual ::grpc::Status GetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::pb::RPCGetPublisherFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>> AsyncGetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>>(AsyncGetPublisherFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>> PrepareAsyncGetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>>(PrepareAsyncGetPublisherFileRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      //
      // Platform
      //
      // Get health of decentralizer.
      virtual void GetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response, std::function<void(::grpc::Status)>) = 0;
      //
      // Matchmaking
      //
      // Create or update a session. Takes session info, returns session id.
      virtual void UpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Delete a session. Takes session id, returns bool informing if the deletion was a success
      virtual void DeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get session ids. Takes session type, and a key and value to filter the sessions by details. If left empty this filter will not apply and all will be fetched.
      virtual void GetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get session ids. Takes peer ids. Returns session ids
      virtual void GetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get an individual session. Takes session id and returns session info.
      virtual void GetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      //
      // Address book
      //
      // Create or update a peer. Takes peer info, returns if it was a success.
      virtual void UpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get peer ids. takes a key and value to filter the peers by details. If left empty this filter will not apply and all will be fetched.
      virtual void GetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get an individual peer. Takes either a peer id or decentralizer id and returns the peer info.
      virtual void GetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response, std::function<void(::grpc::Status)>) = 0;
      //
      // Storage
      //
      // Write a peer file. Takes a file name and the data it should save.
      virtual void WritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get a peer file. Takes a file name, returns the file.
      virtual void GetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      //
      // Messaging
      //
      // Send another peer a direct message. Takes a peer id and the data it should send
      virtual void SendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReceiveDirectMessage(::grpc::ClientContext* context, ::pb::RPCReceiveDirectMessageRequest* request, ::grpc::experimental::ClientReadReactor< ::pb::RPCDirectMessage>* reactor) = 0;
      //
      // Publisher
      //
      // Load a publisher definition. Will not work if its older!
      virtual void readPublisherDefinition(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest* request, ::pb::empty* response, std::function<void(::grpc::Status)>) = 0;
      // Signs a new publisher update. (Only if you have the private key!)
      virtual void publishPublisherUpdate(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest* request, ::pb::DNPublisherRecord* response, std::function<void(::grpc::Status)>) = 0;
      // Get the full publisher definition
      virtual void GetPublisherDefinition(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest* request, ::pb::PublisherDefinition* response, std::function<void(::grpc::Status)>) = 0;
      // Get a publisher file.
      virtual void GetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>* AsyncGetHealthRaw(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>* PrepareAsyncGetHealthRaw(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>* AsyncUpsertSessionRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>* PrepareAsyncUpsertSessionRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>* AsyncGetSessionIdsByDetailsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>* PrepareAsyncGetSessionIdsByDetailsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>* AsyncGetSessionIdsByPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>* PrepareAsyncGetSessionIdsByPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>* AsyncUpsertPeerRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>* PrepareAsyncUpsertPeerRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>* AsyncGetPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>* PrepareAsyncGetPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>* AsyncGetPeerRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>* PrepareAsyncGetPeerRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>* AsyncWritePeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>* PrepareAsyncWritePeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>* AsyncGetPeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>* PrepareAsyncGetPeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>* AsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>* PrepareAsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pb::RPCDirectMessage>* ReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>* AsyncReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>* PrepareAsyncReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>* AsyncreadPublisherDefinitionRaw(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>* PrepareAsyncreadPublisherDefinitionRaw(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::DNPublisherRecord>* AsyncpublishPublisherUpdateRaw(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::DNPublisherRecord>* PrepareAsyncpublishPublisherUpdateRaw(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::PublisherDefinition>* AsyncGetPublisherDefinitionRaw(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::PublisherDefinition>* PrepareAsyncGetPublisherDefinitionRaw(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>* AsyncGetPublisherFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>* PrepareAsyncGetPublisherFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::pb::RPCHealthReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>> AsyncGetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>>(AsyncGetHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>> PrepareAsyncGetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>>(PrepareAsyncGetHealthRaw(context, request, cq));
    }
    ::grpc::Status UpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::pb::RPCUpsertSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>> AsyncUpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>>(AsyncUpsertSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>> PrepareAsyncUpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>>(PrepareAsyncUpsertSessionRaw(context, request, cq));
    }
    ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::pb::RPCDeleteSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>> AsyncDeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    ::grpc::Status GetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::pb::RPCGetSessionIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>> AsyncGetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>>(AsyncGetSessionIdsByDetailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>> PrepareAsyncGetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>>(PrepareAsyncGetSessionIdsByDetailsRaw(context, request, cq));
    }
    ::grpc::Status GetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::pb::RPCGetSessionIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>> AsyncGetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>>(AsyncGetSessionIdsByPeerIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>> PrepareAsyncGetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>>(PrepareAsyncGetSessionIdsByPeerIdsRaw(context, request, cq));
    }
    ::grpc::Status GetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::pb::RPCGetSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>> AsyncGetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    ::grpc::Status UpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::pb::RPCUpsertPeerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>> AsyncUpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>>(AsyncUpsertPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>> PrepareAsyncUpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>>(PrepareAsyncUpsertPeerRaw(context, request, cq));
    }
    ::grpc::Status GetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::pb::RPCGetPeerIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>> AsyncGetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>>(AsyncGetPeerIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>> PrepareAsyncGetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>>(PrepareAsyncGetPeerIdsRaw(context, request, cq));
    }
    ::grpc::Status GetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::pb::RPCGetPeerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>> AsyncGetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>>(AsyncGetPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>> PrepareAsyncGetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>>(PrepareAsyncGetPeerRaw(context, request, cq));
    }
    ::grpc::Status WritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::pb::RPCWritePeerFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>> AsyncWritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>>(AsyncWritePeerFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>> PrepareAsyncWritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>>(PrepareAsyncWritePeerFileRaw(context, request, cq));
    }
    ::grpc::Status GetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::pb::RPCGetPeerFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>> AsyncGetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>>(AsyncGetPeerFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>> PrepareAsyncGetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>>(PrepareAsyncGetPeerFileRaw(context, request, cq));
    }
    ::grpc::Status SendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::pb::empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>> AsyncSendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>>(AsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>> PrepareAsyncSendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>>(PrepareAsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pb::RPCDirectMessage>> ReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::RPCDirectMessage>>(ReceiveDirectMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>> AsyncReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>>(AsyncReceiveDirectMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>> PrepareAsyncReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>>(PrepareAsyncReceiveDirectMessageRaw(context, request, cq));
    }
    ::grpc::Status readPublisherDefinition(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest& request, ::pb::empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>> AsyncreadPublisherDefinition(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>>(AsyncreadPublisherDefinitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>> PrepareAsyncreadPublisherDefinition(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>>(PrepareAsyncreadPublisherDefinitionRaw(context, request, cq));
    }
    ::grpc::Status publishPublisherUpdate(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest& request, ::pb::DNPublisherRecord* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::DNPublisherRecord>> AsyncpublishPublisherUpdate(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::DNPublisherRecord>>(AsyncpublishPublisherUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::DNPublisherRecord>> PrepareAsyncpublishPublisherUpdate(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::DNPublisherRecord>>(PrepareAsyncpublishPublisherUpdateRaw(context, request, cq));
    }
    ::grpc::Status GetPublisherDefinition(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest& request, ::pb::PublisherDefinition* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::PublisherDefinition>> AsyncGetPublisherDefinition(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::PublisherDefinition>>(AsyncGetPublisherDefinitionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::PublisherDefinition>> PrepareAsyncGetPublisherDefinition(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::PublisherDefinition>>(PrepareAsyncGetPublisherDefinitionRaw(context, request, cq));
    }
    ::grpc::Status GetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::pb::RPCGetPublisherFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>> AsyncGetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>>(AsyncGetPublisherFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>> PrepareAsyncGetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>>(PrepareAsyncGetPublisherFileRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response, std::function<void(::grpc::Status)>) override;
      void UpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void UpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response, std::function<void(::grpc::Status)>) override;
      void WritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response, std::function<void(::grpc::Status)>) override;
      void SendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response, std::function<void(::grpc::Status)>) override;
      void ReceiveDirectMessage(::grpc::ClientContext* context, ::pb::RPCReceiveDirectMessageRequest* request, ::grpc::experimental::ClientReadReactor< ::pb::RPCDirectMessage>* reactor) override;
      void readPublisherDefinition(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest* request, ::pb::empty* response, std::function<void(::grpc::Status)>) override;
      void publishPublisherUpdate(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest* request, ::pb::DNPublisherRecord* response, std::function<void(::grpc::Status)>) override;
      void GetPublisherDefinition(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest* request, ::pb::PublisherDefinition* response, std::function<void(::grpc::Status)>) override;
      void GetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>* AsyncGetHealthRaw(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>* PrepareAsyncGetHealthRaw(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>* AsyncUpsertSessionRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>* PrepareAsyncUpsertSessionRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>* AsyncGetSessionIdsByDetailsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>* PrepareAsyncGetSessionIdsByDetailsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>* AsyncGetSessionIdsByPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>* PrepareAsyncGetSessionIdsByPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>* AsyncUpsertPeerRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>* PrepareAsyncUpsertPeerRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>* AsyncGetPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>* PrepareAsyncGetPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>* AsyncGetPeerRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>* PrepareAsyncGetPeerRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>* AsyncWritePeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>* PrepareAsyncWritePeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>* AsyncGetPeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>* PrepareAsyncGetPeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::empty>* AsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::empty>* PrepareAsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pb::RPCDirectMessage>* ReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request) override;
    ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>* AsyncReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>* PrepareAsyncReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCReceiveDirectMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::empty>* AsyncreadPublisherDefinitionRaw(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::empty>* PrepareAsyncreadPublisherDefinitionRaw(::grpc::ClientContext* context, const ::pb::loadPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::DNPublisherRecord>* AsyncpublishPublisherUpdateRaw(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::DNPublisherRecord>* PrepareAsyncpublishPublisherUpdateRaw(::grpc::ClientContext* context, const ::pb::RPCPublishPublisherUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::PublisherDefinition>* AsyncGetPublisherDefinitionRaw(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::PublisherDefinition>* PrepareAsyncGetPublisherDefinitionRaw(::grpc::ClientContext* context, const ::pb::GetPublisherDefinitionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>* AsyncGetPublisherFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>* PrepareAsyncGetPublisherFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetHealth_;
    const ::grpc::internal::RpcMethod rpcmethod_UpsertSession_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSession_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSessionIdsByDetails_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSessionIdsByPeerIds_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSession_;
    const ::grpc::internal::RpcMethod rpcmethod_UpsertPeer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPeerIds_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPeer_;
    const ::grpc::internal::RpcMethod rpcmethod_WritePeerFile_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPeerFile_;
    const ::grpc::internal::RpcMethod rpcmethod_SendDirectMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveDirectMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_readPublisherDefinition_;
    const ::grpc::internal::RpcMethod rpcmethod_publishPublisherUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPublisherDefinition_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPublisherFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Platform
    //
    // Get health of decentralizer.
    virtual ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response);
    //
    // Matchmaking
    //
    // Create or update a session. Takes session info, returns session id.
    virtual ::grpc::Status UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response);
    // Delete a session. Takes session id, returns bool informing if the deletion was a success
    virtual ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response);
    // Get session ids. Takes session type, and a key and value to filter the sessions by details. If left empty this filter will not apply and all will be fetched.
    virtual ::grpc::Status GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response);
    // Get session ids. Takes peer ids. Returns session ids
    virtual ::grpc::Status GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response);
    // Get an individual session. Takes session id and returns session info.
    virtual ::grpc::Status GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response);
    //
    // Address book
    //
    // Create or update a peer. Takes peer info, returns if it was a success.
    virtual ::grpc::Status UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response);
    // Get peer ids. takes a key and value to filter the peers by details. If left empty this filter will not apply and all will be fetched.
    virtual ::grpc::Status GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response);
    // Get an individual peer. Takes either a peer id or decentralizer id and returns the peer info.
    virtual ::grpc::Status GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response);
    //
    // Storage
    //
    // Write a peer file. Takes a file name and the data it should save.
    virtual ::grpc::Status WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response);
    // Get a peer file. Takes a file name, returns the file.
    virtual ::grpc::Status GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response);
    //
    // Messaging
    //
    // Send another peer a direct message. Takes a peer id and the data it should send
    virtual ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response);
    virtual ::grpc::Status ReceiveDirectMessage(::grpc::ServerContext* context, const ::pb::RPCReceiveDirectMessageRequest* request, ::grpc::ServerWriter< ::pb::RPCDirectMessage>* writer);
    //
    // Publisher
    //
    // Load a publisher definition. Will not work if its older!
    virtual ::grpc::Status readPublisherDefinition(::grpc::ServerContext* context, const ::pb::loadPublisherDefinitionRequest* request, ::pb::empty* response);
    // Signs a new publisher update. (Only if you have the private key!)
    virtual ::grpc::Status publishPublisherUpdate(::grpc::ServerContext* context, const ::pb::RPCPublishPublisherUpdateRequest* request, ::pb::DNPublisherRecord* response);
    // Get the full publisher definition
    virtual ::grpc::Status GetPublisherDefinition(::grpc::ServerContext* context, const ::pb::GetPublisherDefinitionRequest* request, ::pb::PublisherDefinition* response);
    // Get a publisher file.
    virtual ::grpc::Status GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHealth() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHealth(::grpc::ServerContext* context, ::pb::RPCHealthRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCHealthReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpsertSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpsertSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpsertSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsertSession(::grpc::ServerContext* context, ::pb::RPCUpsertSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCUpsertSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::pb::RPCDeleteSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCDeleteSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSessionIdsByDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSessionIdsByDetails() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetSessionIdsByDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSessionIdsByDetails(::grpc::ServerContext* context, ::pb::RPCGetSessionIdsByDetailsRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetSessionIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSessionIdsByPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSessionIdsByPeerIds() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetSessionIdsByPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSessionIdsByPeerIds(::grpc::ServerContext* context, ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetSessionIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSession() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSession(::grpc::ServerContext* context, ::pb::RPCGetSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpsertPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpsertPeer() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpsertPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsertPeer(::grpc::ServerContext* context, ::pb::RPCUpsertPeerRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCUpsertPeerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPeerIds() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeerIds(::grpc::ServerContext* context, ::pb::RPCGetPeerIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetPeerIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPeer() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeer(::grpc::ServerContext* context, ::pb::RPCGetPeerRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetPeerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WritePeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WritePeerFile() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_WritePeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWritePeerFile(::grpc::ServerContext* context, ::pb::RPCWritePeerFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCWritePeerFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPeerFile() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetPeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeerFile(::grpc::ServerContext* context, ::pb::RPCGetPeerFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetPeerFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDirectMessage(::grpc::ServerContext* context, ::pb::RPCDirectMessage* request, ::grpc::ServerAsyncResponseWriter< ::pb::empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReceiveDirectMessage() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ReceiveDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveDirectMessage(::grpc::ServerContext* context, const ::pb::RPCReceiveDirectMessageRequest* request, ::grpc::ServerWriter< ::pb::RPCDirectMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveDirectMessage(::grpc::ServerContext* context, ::pb::RPCReceiveDirectMessageRequest* request, ::grpc::ServerAsyncWriter< ::pb::RPCDirectMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(12, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_readPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_readPublisherDefinition() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_readPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readPublisherDefinition(::grpc::ServerContext* context, const ::pb::loadPublisherDefinitionRequest* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadPublisherDefinition(::grpc::ServerContext* context, ::pb::loadPublisherDefinitionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_publishPublisherUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_publishPublisherUpdate() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_publishPublisherUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publishPublisherUpdate(::grpc::ServerContext* context, const ::pb::RPCPublishPublisherUpdateRequest* request, ::pb::DNPublisherRecord* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpublishPublisherUpdate(::grpc::ServerContext* context, ::pb::RPCPublishPublisherUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::DNPublisherRecord>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPublisherDefinition() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherDefinition(::grpc::ServerContext* context, const ::pb::GetPublisherDefinitionRequest* request, ::pb::PublisherDefinition* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublisherDefinition(::grpc::ServerContext* context, ::pb::GetPublisherDefinitionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::PublisherDefinition>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPublisherFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPublisherFile() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetPublisherFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublisherFile(::grpc::ServerContext* context, ::pb::RPCGetPublisherFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetPublisherFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetHealth<WithAsyncMethod_UpsertSession<WithAsyncMethod_DeleteSession<WithAsyncMethod_GetSessionIdsByDetails<WithAsyncMethod_GetSessionIdsByPeerIds<WithAsyncMethod_GetSession<WithAsyncMethod_UpsertPeer<WithAsyncMethod_GetPeerIds<WithAsyncMethod_GetPeer<WithAsyncMethod_WritePeerFile<WithAsyncMethod_GetPeerFile<WithAsyncMethod_SendDirectMessage<WithAsyncMethod_ReceiveDirectMessage<WithAsyncMethod_readPublisherDefinition<WithAsyncMethod_publishPublisherUpdate<WithAsyncMethod_GetPublisherDefinition<WithAsyncMethod_GetPublisherFile<Service > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetHealth() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCHealthRequest, ::pb::RPCHealthReply>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCHealthRequest* request,
                 ::pb::RPCHealthReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetHealth(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpsertSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UpsertSession() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCUpsertSessionRequest, ::pb::RPCUpsertSessionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCUpsertSessionRequest* request,
                 ::pb::RPCUpsertSessionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpsertSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_UpsertSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteSession() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCDeleteSessionRequest, ::pb::RPCDeleteSessionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCDeleteSessionRequest* request,
                 ::pb::RPCDeleteSessionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSessionIdsByDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetSessionIdsByDetails() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCGetSessionIdsByDetailsRequest, ::pb::RPCGetSessionIdsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCGetSessionIdsByDetailsRequest* request,
                 ::pb::RPCGetSessionIdsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetSessionIdsByDetails(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetSessionIdsByDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSessionIdsByPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetSessionIdsByPeerIds() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCGetSessionIdsByPeerIdsRequest, ::pb::RPCGetSessionIdsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCGetSessionIdsByPeerIdsRequest* request,
                 ::pb::RPCGetSessionIdsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetSessionIdsByPeerIds(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetSessionIdsByPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetSession() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCGetSessionRequest, ::pb::RPCGetSessionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCGetSessionRequest* request,
                 ::pb::RPCGetSessionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpsertPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UpsertPeer() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCUpsertPeerRequest, ::pb::RPCUpsertPeerResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCUpsertPeerRequest* request,
                 ::pb::RPCUpsertPeerResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpsertPeer(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_UpsertPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetPeerIds() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCGetPeerIdsRequest, ::pb::RPCGetPeerIdsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCGetPeerIdsRequest* request,
                 ::pb::RPCGetPeerIdsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetPeerIds(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetPeer() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCGetPeerRequest, ::pb::RPCGetPeerResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCGetPeerRequest* request,
                 ::pb::RPCGetPeerResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetPeer(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WritePeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_WritePeerFile() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCWritePeerFileRequest, ::pb::RPCWritePeerFileResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCWritePeerFileRequest* request,
                 ::pb::RPCWritePeerFileResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->WritePeerFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_WritePeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetPeerFile() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCGetPeerFileRequest, ::pb::RPCGetPeerFileResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCGetPeerFileRequest* request,
                 ::pb::RPCGetPeerFileResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetPeerFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetPeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SendDirectMessage() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCDirectMessage, ::pb::empty>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCDirectMessage* request,
                 ::pb::empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SendDirectMessage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReceiveDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReceiveDirectMessage() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc::internal::CallbackServerStreamingHandler< ::pb::RPCReceiveDirectMessageRequest, ::pb::RPCDirectMessage>(
          [this] { return this->ReceiveDirectMessage(); }));
    }
    ~ExperimentalWithCallbackMethod_ReceiveDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveDirectMessage(::grpc::ServerContext* context, const ::pb::RPCReceiveDirectMessageRequest* request, ::grpc::ServerWriter< ::pb::RPCDirectMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::pb::RPCReceiveDirectMessageRequest, ::pb::RPCDirectMessage>* ReceiveDirectMessage() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::pb::RPCReceiveDirectMessageRequest, ::pb::RPCDirectMessage>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_readPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_readPublisherDefinition() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::loadPublisherDefinitionRequest, ::pb::empty>(
          [this](::grpc::ServerContext* context,
                 const ::pb::loadPublisherDefinitionRequest* request,
                 ::pb::empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->readPublisherDefinition(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_readPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readPublisherDefinition(::grpc::ServerContext* context, const ::pb::loadPublisherDefinitionRequest* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void readPublisherDefinition(::grpc::ServerContext* context, const ::pb::loadPublisherDefinitionRequest* request, ::pb::empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_publishPublisherUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_publishPublisherUpdate() {
      ::grpc::Service::experimental().MarkMethodCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCPublishPublisherUpdateRequest, ::pb::DNPublisherRecord>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCPublishPublisherUpdateRequest* request,
                 ::pb::DNPublisherRecord* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->publishPublisherUpdate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_publishPublisherUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publishPublisherUpdate(::grpc::ServerContext* context, const ::pb::RPCPublishPublisherUpdateRequest* request, ::pb::DNPublisherRecord* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void publishPublisherUpdate(::grpc::ServerContext* context, const ::pb::RPCPublishPublisherUpdateRequest* request, ::pb::DNPublisherRecord* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetPublisherDefinition() {
      ::grpc::Service::experimental().MarkMethodCallback(15,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::GetPublisherDefinitionRequest, ::pb::PublisherDefinition>(
          [this](::grpc::ServerContext* context,
                 const ::pb::GetPublisherDefinitionRequest* request,
                 ::pb::PublisherDefinition* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetPublisherDefinition(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherDefinition(::grpc::ServerContext* context, const ::pb::GetPublisherDefinitionRequest* request, ::pb::PublisherDefinition* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPublisherDefinition(::grpc::ServerContext* context, const ::pb::GetPublisherDefinitionRequest* request, ::pb::PublisherDefinition* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPublisherFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetPublisherFile() {
      ::grpc::Service::experimental().MarkMethodCallback(16,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::RPCGetPublisherFileRequest, ::pb::RPCGetPublisherFileResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::RPCGetPublisherFileRequest* request,
                 ::pb::RPCGetPublisherFileResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetPublisherFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetPublisherFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetHealth<ExperimentalWithCallbackMethod_UpsertSession<ExperimentalWithCallbackMethod_DeleteSession<ExperimentalWithCallbackMethod_GetSessionIdsByDetails<ExperimentalWithCallbackMethod_GetSessionIdsByPeerIds<ExperimentalWithCallbackMethod_GetSession<ExperimentalWithCallbackMethod_UpsertPeer<ExperimentalWithCallbackMethod_GetPeerIds<ExperimentalWithCallbackMethod_GetPeer<ExperimentalWithCallbackMethod_WritePeerFile<ExperimentalWithCallbackMethod_GetPeerFile<ExperimentalWithCallbackMethod_SendDirectMessage<ExperimentalWithCallbackMethod_ReceiveDirectMessage<ExperimentalWithCallbackMethod_readPublisherDefinition<ExperimentalWithCallbackMethod_publishPublisherUpdate<ExperimentalWithCallbackMethod_GetPublisherDefinition<ExperimentalWithCallbackMethod_GetPublisherFile<Service > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHealth() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpsertSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpsertSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpsertSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSessionIdsByDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSessionIdsByDetails() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetSessionIdsByDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSessionIdsByPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSessionIdsByPeerIds() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetSessionIdsByPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSession() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpsertPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpsertPeer() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpsertPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPeerIds() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPeer() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WritePeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WritePeerFile() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_WritePeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPeerFile() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetPeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceiveDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReceiveDirectMessage() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ReceiveDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveDirectMessage(::grpc::ServerContext* context, const ::pb::RPCReceiveDirectMessageRequest* request, ::grpc::ServerWriter< ::pb::RPCDirectMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_readPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_readPublisherDefinition() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_readPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readPublisherDefinition(::grpc::ServerContext* context, const ::pb::loadPublisherDefinitionRequest* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_publishPublisherUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_publishPublisherUpdate() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_publishPublisherUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publishPublisherUpdate(::grpc::ServerContext* context, const ::pb::RPCPublishPublisherUpdateRequest* request, ::pb::DNPublisherRecord* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPublisherDefinition() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherDefinition(::grpc::ServerContext* context, const ::pb::GetPublisherDefinitionRequest* request, ::pb::PublisherDefinition* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPublisherFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPublisherFile() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetPublisherFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetHealth() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHealth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpsertSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpsertSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpsertSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsertSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteSession() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSessionIdsByDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSessionIdsByDetails() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetSessionIdsByDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSessionIdsByDetails(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSessionIdsByPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSessionIdsByPeerIds() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetSessionIdsByPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSessionIdsByPeerIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSession() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpsertPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpsertPeer() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UpsertPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsertPeer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPeerIds() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeerIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPeer() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WritePeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_WritePeerFile() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_WritePeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWritePeerFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPeerFile() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetPeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeerFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDirectMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReceiveDirectMessage() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ReceiveDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveDirectMessage(::grpc::ServerContext* context, const ::pb::RPCReceiveDirectMessageRequest* request, ::grpc::ServerWriter< ::pb::RPCDirectMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveDirectMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(12, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_readPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_readPublisherDefinition() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_readPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readPublisherDefinition(::grpc::ServerContext* context, const ::pb::loadPublisherDefinitionRequest* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadPublisherDefinition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_publishPublisherUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_publishPublisherUpdate() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_publishPublisherUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publishPublisherUpdate(::grpc::ServerContext* context, const ::pb::RPCPublishPublisherUpdateRequest* request, ::pb::DNPublisherRecord* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpublishPublisherUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPublisherDefinition() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherDefinition(::grpc::ServerContext* context, const ::pb::GetPublisherDefinitionRequest* request, ::pb::PublisherDefinition* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublisherDefinition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPublisherFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPublisherFile() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetPublisherFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublisherFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetHealth() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetHealth(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHealth(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpsertSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UpsertSession() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpsertSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpsertSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpsertSession(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteSession() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteSession(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSessionIdsByDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSessionIdsByDetails() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetSessionIdsByDetails(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSessionIdsByDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSessionIdsByDetails(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSessionIdsByPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSessionIdsByPeerIds() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetSessionIdsByPeerIds(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSessionIdsByPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSession() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSession(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpsertPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UpsertPeer() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpsertPeer(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpsertPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpsertPeer(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPeerIds() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetPeerIds(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPeerIds(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPeer() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetPeer(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPeer(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WritePeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_WritePeerFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->WritePeerFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_WritePeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void WritePeerFile(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPeerFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetPeerFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPeerFile(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SendDirectMessage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SendDirectMessage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendDirectMessage(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReceiveDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReceiveDirectMessage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->ReceiveDirectMessage(); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReceiveDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveDirectMessage(::grpc::ServerContext* context, const ::pb::RPCReceiveDirectMessageRequest* request, ::grpc::ServerWriter< ::pb::RPCDirectMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ReceiveDirectMessage() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_readPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_readPublisherDefinition() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->readPublisherDefinition(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_readPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readPublisherDefinition(::grpc::ServerContext* context, const ::pb::loadPublisherDefinitionRequest* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void readPublisherDefinition(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_publishPublisherUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_publishPublisherUpdate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->publishPublisherUpdate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_publishPublisherUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publishPublisherUpdate(::grpc::ServerContext* context, const ::pb::RPCPublishPublisherUpdateRequest* request, ::pb::DNPublisherRecord* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void publishPublisherUpdate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPublisherDefinition() {
      ::grpc::Service::experimental().MarkMethodRawCallback(15,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetPublisherDefinition(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherDefinition(::grpc::ServerContext* context, const ::pb::GetPublisherDefinitionRequest* request, ::pb::PublisherDefinition* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPublisherDefinition(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPublisherFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPublisherFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(16,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetPublisherFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPublisherFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetPublisherFile(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHealth() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCHealthRequest, ::pb::RPCHealthReply>(std::bind(&WithStreamedUnaryMethod_GetHealth<BaseClass>::StreamedGetHealth, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCHealthRequest,::pb::RPCHealthReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpsertSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpsertSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCUpsertSessionRequest, ::pb::RPCUpsertSessionResponse>(std::bind(&WithStreamedUnaryMethod_UpsertSession<BaseClass>::StreamedUpsertSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpsertSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpsertSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCUpsertSessionRequest,::pb::RPCUpsertSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCDeleteSessionRequest, ::pb::RPCDeleteSessionResponse>(std::bind(&WithStreamedUnaryMethod_DeleteSession<BaseClass>::StreamedDeleteSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCDeleteSessionRequest,::pb::RPCDeleteSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSessionIdsByDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSessionIdsByDetails() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCGetSessionIdsByDetailsRequest, ::pb::RPCGetSessionIdsResponse>(std::bind(&WithStreamedUnaryMethod_GetSessionIdsByDetails<BaseClass>::StreamedGetSessionIdsByDetails, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSessionIdsByDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSessionIdsByDetails(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetSessionIdsByDetailsRequest,::pb::RPCGetSessionIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSessionIdsByPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSessionIdsByPeerIds() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCGetSessionIdsByPeerIdsRequest, ::pb::RPCGetSessionIdsResponse>(std::bind(&WithStreamedUnaryMethod_GetSessionIdsByPeerIds<BaseClass>::StreamedGetSessionIdsByPeerIds, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSessionIdsByPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSessionIdsByPeerIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetSessionIdsByPeerIdsRequest,::pb::RPCGetSessionIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSession() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCGetSessionRequest, ::pb::RPCGetSessionResponse>(std::bind(&WithStreamedUnaryMethod_GetSession<BaseClass>::StreamedGetSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetSessionRequest,::pb::RPCGetSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpsertPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpsertPeer() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCUpsertPeerRequest, ::pb::RPCUpsertPeerResponse>(std::bind(&WithStreamedUnaryMethod_UpsertPeer<BaseClass>::StreamedUpsertPeer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpsertPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpsertPeer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCUpsertPeerRequest,::pb::RPCUpsertPeerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPeerIds() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCGetPeerIdsRequest, ::pb::RPCGetPeerIdsResponse>(std::bind(&WithStreamedUnaryMethod_GetPeerIds<BaseClass>::StreamedGetPeerIds, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeerIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetPeerIdsRequest,::pb::RPCGetPeerIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPeer() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCGetPeerRequest, ::pb::RPCGetPeerResponse>(std::bind(&WithStreamedUnaryMethod_GetPeer<BaseClass>::StreamedGetPeer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetPeerRequest,::pb::RPCGetPeerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WritePeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_WritePeerFile() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCWritePeerFileRequest, ::pb::RPCWritePeerFileResponse>(std::bind(&WithStreamedUnaryMethod_WritePeerFile<BaseClass>::StreamedWritePeerFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_WritePeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWritePeerFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCWritePeerFileRequest,::pb::RPCWritePeerFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPeerFile() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCGetPeerFileRequest, ::pb::RPCGetPeerFileResponse>(std::bind(&WithStreamedUnaryMethod_GetPeerFile<BaseClass>::StreamedGetPeerFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeerFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetPeerFileRequest,::pb::RPCGetPeerFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCDirectMessage, ::pb::empty>(std::bind(&WithStreamedUnaryMethod_SendDirectMessage<BaseClass>::StreamedSendDirectMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendDirectMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCDirectMessage,::pb::empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_readPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_readPublisherDefinition() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::loadPublisherDefinitionRequest, ::pb::empty>(std::bind(&WithStreamedUnaryMethod_readPublisherDefinition<BaseClass>::StreamedreadPublisherDefinition, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_readPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status readPublisherDefinition(::grpc::ServerContext* context, const ::pb::loadPublisherDefinitionRequest* request, ::pb::empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreadPublisherDefinition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::loadPublisherDefinitionRequest,::pb::empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_publishPublisherUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_publishPublisherUpdate() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCPublishPublisherUpdateRequest, ::pb::DNPublisherRecord>(std::bind(&WithStreamedUnaryMethod_publishPublisherUpdate<BaseClass>::StreamedpublishPublisherUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_publishPublisherUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status publishPublisherUpdate(::grpc::ServerContext* context, const ::pb::RPCPublishPublisherUpdateRequest* request, ::pb::DNPublisherRecord* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpublishPublisherUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCPublishPublisherUpdateRequest,::pb::DNPublisherRecord>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPublisherDefinition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPublisherDefinition() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::GetPublisherDefinitionRequest, ::pb::PublisherDefinition>(std::bind(&WithStreamedUnaryMethod_GetPublisherDefinition<BaseClass>::StreamedGetPublisherDefinition, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPublisherDefinition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPublisherDefinition(::grpc::ServerContext* context, const ::pb::GetPublisherDefinitionRequest* request, ::pb::PublisherDefinition* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPublisherDefinition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::GetPublisherDefinitionRequest,::pb::PublisherDefinition>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPublisherFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPublisherFile() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::RPCGetPublisherFileRequest, ::pb::RPCGetPublisherFileResponse>(std::bind(&WithStreamedUnaryMethod_GetPublisherFile<BaseClass>::StreamedGetPublisherFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPublisherFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPublisherFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetPublisherFileRequest,::pb::RPCGetPublisherFileResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetHealth<WithStreamedUnaryMethod_UpsertSession<WithStreamedUnaryMethod_DeleteSession<WithStreamedUnaryMethod_GetSessionIdsByDetails<WithStreamedUnaryMethod_GetSessionIdsByPeerIds<WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_UpsertPeer<WithStreamedUnaryMethod_GetPeerIds<WithStreamedUnaryMethod_GetPeer<WithStreamedUnaryMethod_WritePeerFile<WithStreamedUnaryMethod_GetPeerFile<WithStreamedUnaryMethod_SendDirectMessage<WithStreamedUnaryMethod_readPublisherDefinition<WithStreamedUnaryMethod_publishPublisherUpdate<WithStreamedUnaryMethod_GetPublisherDefinition<WithStreamedUnaryMethod_GetPublisherFile<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ReceiveDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ReceiveDirectMessage() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::SplitServerStreamingHandler< ::pb::RPCReceiveDirectMessageRequest, ::pb::RPCDirectMessage>(std::bind(&WithSplitStreamingMethod_ReceiveDirectMessage<BaseClass>::StreamedReceiveDirectMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ReceiveDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveDirectMessage(::grpc::ServerContext* context, const ::pb::RPCReceiveDirectMessageRequest* request, ::grpc::ServerWriter< ::pb::RPCDirectMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReceiveDirectMessage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::RPCReceiveDirectMessageRequest,::pb::RPCDirectMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ReceiveDirectMessage<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetHealth<WithStreamedUnaryMethod_UpsertSession<WithStreamedUnaryMethod_DeleteSession<WithStreamedUnaryMethod_GetSessionIdsByDetails<WithStreamedUnaryMethod_GetSessionIdsByPeerIds<WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_UpsertPeer<WithStreamedUnaryMethod_GetPeerIds<WithStreamedUnaryMethod_GetPeer<WithStreamedUnaryMethod_WritePeerFile<WithStreamedUnaryMethod_GetPeerFile<WithStreamedUnaryMethod_SendDirectMessage<WithSplitStreamingMethod_ReceiveDirectMessage<WithStreamedUnaryMethod_readPublisherDefinition<WithStreamedUnaryMethod_publishPublisherUpdate<WithStreamedUnaryMethod_GetPublisherDefinition<WithStreamedUnaryMethod_GetPublisherFile<Service > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace pb


#endif  // GRPC_pb_2fplatform_2eproto__INCLUDED
