// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb/platform.proto
#ifndef GRPC_pb_2fplatform_2eproto__INCLUDED
#define GRPC_pb_2fplatform_2eproto__INCLUDED

#include "pb/platform.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace pb {

class Decentralizer final {
 public:
  static constexpr char const* service_full_name() {
    return "pb.Decentralizer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Platform
    //
    // Get health of decentralizer.
    virtual ::grpc::Status GetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::pb::RPCHealthReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>> AsyncGetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>>(AsyncGetHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>> PrepareAsyncGetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>>(PrepareAsyncGetHealthRaw(context, request, cq));
    }
    //
    // Matchmaking
    //
    // Create or update a session. Takes session info, returns session id.
    virtual ::grpc::Status UpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::pb::RPCUpsertSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>> AsyncUpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>>(AsyncUpsertSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>> PrepareAsyncUpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>>(PrepareAsyncUpsertSessionRaw(context, request, cq));
    }
    // Delete a session. Takes session id, returns bool informing if the deletion was a success
    virtual ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::pb::RPCDeleteSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>> AsyncDeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    // Get session ids. Takes session type, and a key and value to filter the sessions by details. If left empty this filter will not apply and all will be fetched.
    virtual ::grpc::Status GetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::pb::RPCGetSessionIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>> AsyncGetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>>(AsyncGetSessionIdsByDetailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>> PrepareAsyncGetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>>(PrepareAsyncGetSessionIdsByDetailsRaw(context, request, cq));
    }
    // Get session ids. Takes peer ids. Returns session ids
    virtual ::grpc::Status GetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::pb::RPCGetSessionIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>> AsyncGetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>>(AsyncGetSessionIdsByPeerIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>> PrepareAsyncGetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>>(PrepareAsyncGetSessionIdsByPeerIdsRaw(context, request, cq));
    }
    // Get an individual session. Takes session id and returns session info.
    virtual ::grpc::Status GetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::pb::RPCGetSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>> AsyncGetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    //
    // Address book
    //
    // Create or update a peer. Takes peer info, returns if it was a success.
    virtual ::grpc::Status UpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::pb::RPCUpsertPeerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>> AsyncUpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>>(AsyncUpsertPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>> PrepareAsyncUpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>>(PrepareAsyncUpsertPeerRaw(context, request, cq));
    }
    // Get peer ids. takes a key and value to filter the peers by details. If left empty this filter will not apply and all will be fetched.
    virtual ::grpc::Status GetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::pb::RPCGetPeerIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>> AsyncGetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>>(AsyncGetPeerIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>> PrepareAsyncGetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>>(PrepareAsyncGetPeerIdsRaw(context, request, cq));
    }
    // Get an individual peer. Takes either a peer id or decentralizer id and returns the peer info.
    virtual ::grpc::Status GetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::pb::RPCGetPeerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>> AsyncGetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>>(AsyncGetPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>> PrepareAsyncGetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>>(PrepareAsyncGetPeerRaw(context, request, cq));
    }
    //
    // Storage
    //
    // Write a peer file. Takes a file name and the data it should save.
    virtual ::grpc::Status WritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::pb::RPCWritePeerFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>> AsyncWritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>>(AsyncWritePeerFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>> PrepareAsyncWritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>>(PrepareAsyncWritePeerFileRaw(context, request, cq));
    }
    // Get a peer file. Takes a file name, returns the file.
    virtual ::grpc::Status GetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::pb::RPCGetPeerFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>> AsyncGetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>>(AsyncGetPeerFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>> PrepareAsyncGetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>>(PrepareAsyncGetPeerFileRaw(context, request, cq));
    }
    // Get a publisher file.
    virtual ::grpc::Status GetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::pb::RPCGetPublisherFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>> AsyncGetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>>(AsyncGetPublisherFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>> PrepareAsyncGetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>>(PrepareAsyncGetPublisherFileRaw(context, request, cq));
    }
    //
    // Messaging
    //
    // Send another peer a direct message. Takes a peer id and the data it should send
    virtual ::grpc::Status SendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::pb::empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>> AsyncSendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>>(AsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>> PrepareAsyncSendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>>(PrepareAsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::RPCDirectMessage>> ReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::RPCDirectMessage>>(ReceiveDirectMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>> AsyncReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>>(AsyncReceiveDirectMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>> PrepareAsyncReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>>(PrepareAsyncReceiveDirectMessageRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>* AsyncGetHealthRaw(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCHealthReply>* PrepareAsyncGetHealthRaw(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>* AsyncUpsertSessionRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertSessionResponse>* PrepareAsyncUpsertSessionRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCDeleteSessionResponse>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>* AsyncGetSessionIdsByDetailsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>* PrepareAsyncGetSessionIdsByDetailsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>* AsyncGetSessionIdsByPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionIdsResponse>* PrepareAsyncGetSessionIdsByPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetSessionResponse>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>* AsyncUpsertPeerRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCUpsertPeerResponse>* PrepareAsyncUpsertPeerRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>* AsyncGetPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerIdsResponse>* PrepareAsyncGetPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>* AsyncGetPeerRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerResponse>* PrepareAsyncGetPeerRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>* AsyncWritePeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCWritePeerFileResponse>* PrepareAsyncWritePeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>* AsyncGetPeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPeerFileResponse>* PrepareAsyncGetPeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>* AsyncGetPublisherFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::RPCGetPublisherFileResponse>* PrepareAsyncGetPublisherFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>* AsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::empty>* PrepareAsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pb::RPCDirectMessage>* ReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>* AsyncReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::RPCDirectMessage>* PrepareAsyncReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::pb::RPCHealthReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>> AsyncGetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>>(AsyncGetHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>> PrepareAsyncGetHealth(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>>(PrepareAsyncGetHealthRaw(context, request, cq));
    }
    ::grpc::Status UpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::pb::RPCUpsertSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>> AsyncUpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>>(AsyncUpsertSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>> PrepareAsyncUpsertSession(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>>(PrepareAsyncUpsertSessionRaw(context, request, cq));
    }
    ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::pb::RPCDeleteSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>> AsyncDeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    ::grpc::Status GetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::pb::RPCGetSessionIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>> AsyncGetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>>(AsyncGetSessionIdsByDetailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>> PrepareAsyncGetSessionIdsByDetails(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>>(PrepareAsyncGetSessionIdsByDetailsRaw(context, request, cq));
    }
    ::grpc::Status GetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::pb::RPCGetSessionIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>> AsyncGetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>>(AsyncGetSessionIdsByPeerIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>> PrepareAsyncGetSessionIdsByPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>>(PrepareAsyncGetSessionIdsByPeerIdsRaw(context, request, cq));
    }
    ::grpc::Status GetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::pb::RPCGetSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>> AsyncGetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    ::grpc::Status UpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::pb::RPCUpsertPeerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>> AsyncUpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>>(AsyncUpsertPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>> PrepareAsyncUpsertPeer(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>>(PrepareAsyncUpsertPeerRaw(context, request, cq));
    }
    ::grpc::Status GetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::pb::RPCGetPeerIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>> AsyncGetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>>(AsyncGetPeerIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>> PrepareAsyncGetPeerIds(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>>(PrepareAsyncGetPeerIdsRaw(context, request, cq));
    }
    ::grpc::Status GetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::pb::RPCGetPeerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>> AsyncGetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>>(AsyncGetPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>> PrepareAsyncGetPeer(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>>(PrepareAsyncGetPeerRaw(context, request, cq));
    }
    ::grpc::Status WritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::pb::RPCWritePeerFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>> AsyncWritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>>(AsyncWritePeerFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>> PrepareAsyncWritePeerFile(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>>(PrepareAsyncWritePeerFileRaw(context, request, cq));
    }
    ::grpc::Status GetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::pb::RPCGetPeerFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>> AsyncGetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>>(AsyncGetPeerFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>> PrepareAsyncGetPeerFile(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>>(PrepareAsyncGetPeerFileRaw(context, request, cq));
    }
    ::grpc::Status GetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::pb::RPCGetPublisherFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>> AsyncGetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>>(AsyncGetPublisherFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>> PrepareAsyncGetPublisherFile(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>>(PrepareAsyncGetPublisherFileRaw(context, request, cq));
    }
    ::grpc::Status SendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::pb::empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>> AsyncSendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>>(AsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>> PrepareAsyncSendDirectMessage(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::empty>>(PrepareAsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pb::RPCDirectMessage>> ReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::RPCDirectMessage>>(ReceiveDirectMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>> AsyncReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>>(AsyncReceiveDirectMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>> PrepareAsyncReceiveDirectMessage(::grpc::ClientContext* context, const ::pb::empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>>(PrepareAsyncReceiveDirectMessageRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>* AsyncGetHealthRaw(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCHealthReply>* PrepareAsyncGetHealthRaw(::grpc::ClientContext* context, const ::pb::RPCHealthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>* AsyncUpsertSessionRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertSessionResponse>* PrepareAsyncUpsertSessionRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCDeleteSessionResponse>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::pb::RPCDeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>* AsyncGetSessionIdsByDetailsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>* PrepareAsyncGetSessionIdsByDetailsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>* AsyncGetSessionIdsByPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionIdsResponse>* PrepareAsyncGetSessionIdsByPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetSessionResponse>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::pb::RPCGetSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>* AsyncUpsertPeerRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCUpsertPeerResponse>* PrepareAsyncUpsertPeerRaw(::grpc::ClientContext* context, const ::pb::RPCUpsertPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>* AsyncGetPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerIdsResponse>* PrepareAsyncGetPeerIdsRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>* AsyncGetPeerRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerResponse>* PrepareAsyncGetPeerRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>* AsyncWritePeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCWritePeerFileResponse>* PrepareAsyncWritePeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCWritePeerFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>* AsyncGetPeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPeerFileResponse>* PrepareAsyncGetPeerFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPeerFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>* AsyncGetPublisherFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::RPCGetPublisherFileResponse>* PrepareAsyncGetPublisherFileRaw(::grpc::ClientContext* context, const ::pb::RPCGetPublisherFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::empty>* AsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::empty>* PrepareAsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::pb::RPCDirectMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pb::RPCDirectMessage>* ReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::empty& request) override;
    ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>* AsyncReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::RPCDirectMessage>* PrepareAsyncReceiveDirectMessageRaw(::grpc::ClientContext* context, const ::pb::empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_GetHealth_;
    const ::grpc::RpcMethod rpcmethod_UpsertSession_;
    const ::grpc::RpcMethod rpcmethod_DeleteSession_;
    const ::grpc::RpcMethod rpcmethod_GetSessionIdsByDetails_;
    const ::grpc::RpcMethod rpcmethod_GetSessionIdsByPeerIds_;
    const ::grpc::RpcMethod rpcmethod_GetSession_;
    const ::grpc::RpcMethod rpcmethod_UpsertPeer_;
    const ::grpc::RpcMethod rpcmethod_GetPeerIds_;
    const ::grpc::RpcMethod rpcmethod_GetPeer_;
    const ::grpc::RpcMethod rpcmethod_WritePeerFile_;
    const ::grpc::RpcMethod rpcmethod_GetPeerFile_;
    const ::grpc::RpcMethod rpcmethod_GetPublisherFile_;
    const ::grpc::RpcMethod rpcmethod_SendDirectMessage_;
    const ::grpc::RpcMethod rpcmethod_ReceiveDirectMessage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Platform
    //
    // Get health of decentralizer.
    virtual ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response);
    //
    // Matchmaking
    //
    // Create or update a session. Takes session info, returns session id.
    virtual ::grpc::Status UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response);
    // Delete a session. Takes session id, returns bool informing if the deletion was a success
    virtual ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response);
    // Get session ids. Takes session type, and a key and value to filter the sessions by details. If left empty this filter will not apply and all will be fetched.
    virtual ::grpc::Status GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response);
    // Get session ids. Takes peer ids. Returns session ids
    virtual ::grpc::Status GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response);
    // Get an individual session. Takes session id and returns session info.
    virtual ::grpc::Status GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response);
    //
    // Address book
    //
    // Create or update a peer. Takes peer info, returns if it was a success.
    virtual ::grpc::Status UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response);
    // Get peer ids. takes a key and value to filter the peers by details. If left empty this filter will not apply and all will be fetched.
    virtual ::grpc::Status GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response);
    // Get an individual peer. Takes either a peer id or decentralizer id and returns the peer info.
    virtual ::grpc::Status GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response);
    //
    // Storage
    //
    // Write a peer file. Takes a file name and the data it should save.
    virtual ::grpc::Status WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response);
    // Get a peer file. Takes a file name, returns the file.
    virtual ::grpc::Status GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response);
    // Get a publisher file.
    virtual ::grpc::Status GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response);
    //
    // Messaging
    //
    // Send another peer a direct message. Takes a peer id and the data it should send
    virtual ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response);
    virtual ::grpc::Status ReceiveDirectMessage(::grpc::ServerContext* context, const ::pb::empty* request, ::grpc::ServerWriter< ::pb::RPCDirectMessage>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHealth() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHealth(::grpc::ServerContext* context, ::pb::RPCHealthRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCHealthReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpsertSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpsertSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpsertSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsertSession(::grpc::ServerContext* context, ::pb::RPCUpsertSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCUpsertSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::pb::RPCDeleteSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCDeleteSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSessionIdsByDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSessionIdsByDetails() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetSessionIdsByDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSessionIdsByDetails(::grpc::ServerContext* context, ::pb::RPCGetSessionIdsByDetailsRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetSessionIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSessionIdsByPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSessionIdsByPeerIds() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetSessionIdsByPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSessionIdsByPeerIds(::grpc::ServerContext* context, ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetSessionIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSession() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSession(::grpc::ServerContext* context, ::pb::RPCGetSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpsertPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpsertPeer() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpsertPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsertPeer(::grpc::ServerContext* context, ::pb::RPCUpsertPeerRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCUpsertPeerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPeerIds() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeerIds(::grpc::ServerContext* context, ::pb::RPCGetPeerIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetPeerIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPeer() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeer(::grpc::ServerContext* context, ::pb::RPCGetPeerRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetPeerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WritePeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WritePeerFile() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_WritePeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWritePeerFile(::grpc::ServerContext* context, ::pb::RPCWritePeerFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCWritePeerFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPeerFile() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetPeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeerFile(::grpc::ServerContext* context, ::pb::RPCGetPeerFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetPeerFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPublisherFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPublisherFile() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetPublisherFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublisherFile(::grpc::ServerContext* context, ::pb::RPCGetPublisherFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::RPCGetPublisherFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDirectMessage(::grpc::ServerContext* context, ::pb::RPCDirectMessage* request, ::grpc::ServerAsyncResponseWriter< ::pb::empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReceiveDirectMessage() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ReceiveDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveDirectMessage(::grpc::ServerContext* context, const ::pb::empty* request, ::grpc::ServerWriter< ::pb::RPCDirectMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveDirectMessage(::grpc::ServerContext* context, ::pb::empty* request, ::grpc::ServerAsyncWriter< ::pb::RPCDirectMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetHealth<WithAsyncMethod_UpsertSession<WithAsyncMethod_DeleteSession<WithAsyncMethod_GetSessionIdsByDetails<WithAsyncMethod_GetSessionIdsByPeerIds<WithAsyncMethod_GetSession<WithAsyncMethod_UpsertPeer<WithAsyncMethod_GetPeerIds<WithAsyncMethod_GetPeer<WithAsyncMethod_WritePeerFile<WithAsyncMethod_GetPeerFile<WithAsyncMethod_GetPublisherFile<WithAsyncMethod_SendDirectMessage<WithAsyncMethod_ReceiveDirectMessage<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHealth() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpsertSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpsertSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpsertSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSessionIdsByDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSessionIdsByDetails() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetSessionIdsByDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSessionIdsByPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSessionIdsByPeerIds() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetSessionIdsByPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSession() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpsertPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpsertPeer() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpsertPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPeerIds() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPeer() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WritePeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WritePeerFile() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_WritePeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPeerFile() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetPeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPublisherFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPublisherFile() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetPublisherFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceiveDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReceiveDirectMessage() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ReceiveDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveDirectMessage(::grpc::ServerContext* context, const ::pb::empty* request, ::grpc::ServerWriter< ::pb::RPCDirectMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHealth() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCHealthRequest, ::pb::RPCHealthReply>(std::bind(&WithStreamedUnaryMethod_GetHealth<BaseClass>::StreamedGetHealth, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHealth(::grpc::ServerContext* context, const ::pb::RPCHealthRequest* request, ::pb::RPCHealthReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCHealthRequest,::pb::RPCHealthReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpsertSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpsertSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCUpsertSessionRequest, ::pb::RPCUpsertSessionResponse>(std::bind(&WithStreamedUnaryMethod_UpsertSession<BaseClass>::StreamedUpsertSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpsertSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpsertSession(::grpc::ServerContext* context, const ::pb::RPCUpsertSessionRequest* request, ::pb::RPCUpsertSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpsertSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCUpsertSessionRequest,::pb::RPCUpsertSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCDeleteSessionRequest, ::pb::RPCDeleteSessionResponse>(std::bind(&WithStreamedUnaryMethod_DeleteSession<BaseClass>::StreamedDeleteSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::pb::RPCDeleteSessionRequest* request, ::pb::RPCDeleteSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCDeleteSessionRequest,::pb::RPCDeleteSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSessionIdsByDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSessionIdsByDetails() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCGetSessionIdsByDetailsRequest, ::pb::RPCGetSessionIdsResponse>(std::bind(&WithStreamedUnaryMethod_GetSessionIdsByDetails<BaseClass>::StreamedGetSessionIdsByDetails, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSessionIdsByDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSessionIdsByDetails(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByDetailsRequest* request, ::pb::RPCGetSessionIdsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSessionIdsByDetails(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetSessionIdsByDetailsRequest,::pb::RPCGetSessionIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSessionIdsByPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSessionIdsByPeerIds() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCGetSessionIdsByPeerIdsRequest, ::pb::RPCGetSessionIdsResponse>(std::bind(&WithStreamedUnaryMethod_GetSessionIdsByPeerIds<BaseClass>::StreamedGetSessionIdsByPeerIds, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSessionIdsByPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSessionIdsByPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetSessionIdsByPeerIdsRequest* request, ::pb::RPCGetSessionIdsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSessionIdsByPeerIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetSessionIdsByPeerIdsRequest,::pb::RPCGetSessionIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSession() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCGetSessionRequest, ::pb::RPCGetSessionResponse>(std::bind(&WithStreamedUnaryMethod_GetSession<BaseClass>::StreamedGetSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::pb::RPCGetSessionRequest* request, ::pb::RPCGetSessionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetSessionRequest,::pb::RPCGetSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpsertPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpsertPeer() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCUpsertPeerRequest, ::pb::RPCUpsertPeerResponse>(std::bind(&WithStreamedUnaryMethod_UpsertPeer<BaseClass>::StreamedUpsertPeer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpsertPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpsertPeer(::grpc::ServerContext* context, const ::pb::RPCUpsertPeerRequest* request, ::pb::RPCUpsertPeerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpsertPeer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCUpsertPeerRequest,::pb::RPCUpsertPeerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeerIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPeerIds() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCGetPeerIdsRequest, ::pb::RPCGetPeerIdsResponse>(std::bind(&WithStreamedUnaryMethod_GetPeerIds<BaseClass>::StreamedGetPeerIds, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPeerIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeerIds(::grpc::ServerContext* context, const ::pb::RPCGetPeerIdsRequest* request, ::pb::RPCGetPeerIdsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeerIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetPeerIdsRequest,::pb::RPCGetPeerIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPeer() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCGetPeerRequest, ::pb::RPCGetPeerResponse>(std::bind(&WithStreamedUnaryMethod_GetPeer<BaseClass>::StreamedGetPeer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeer(::grpc::ServerContext* context, const ::pb::RPCGetPeerRequest* request, ::pb::RPCGetPeerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetPeerRequest,::pb::RPCGetPeerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WritePeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_WritePeerFile() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCWritePeerFileRequest, ::pb::RPCWritePeerFileResponse>(std::bind(&WithStreamedUnaryMethod_WritePeerFile<BaseClass>::StreamedWritePeerFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_WritePeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WritePeerFile(::grpc::ServerContext* context, const ::pb::RPCWritePeerFileRequest* request, ::pb::RPCWritePeerFileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWritePeerFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCWritePeerFileRequest,::pb::RPCWritePeerFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeerFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPeerFile() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCGetPeerFileRequest, ::pb::RPCGetPeerFileResponse>(std::bind(&WithStreamedUnaryMethod_GetPeerFile<BaseClass>::StreamedGetPeerFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPeerFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeerFile(::grpc::ServerContext* context, const ::pb::RPCGetPeerFileRequest* request, ::pb::RPCGetPeerFileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeerFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetPeerFileRequest,::pb::RPCGetPeerFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPublisherFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPublisherFile() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCGetPublisherFileRequest, ::pb::RPCGetPublisherFileResponse>(std::bind(&WithStreamedUnaryMethod_GetPublisherFile<BaseClass>::StreamedGetPublisherFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPublisherFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPublisherFile(::grpc::ServerContext* context, const ::pb::RPCGetPublisherFileRequest* request, ::pb::RPCGetPublisherFileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPublisherFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCGetPublisherFileRequest,::pb::RPCGetPublisherFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::StreamedUnaryHandler< ::pb::RPCDirectMessage, ::pb::empty>(std::bind(&WithStreamedUnaryMethod_SendDirectMessage<BaseClass>::StreamedSendDirectMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::pb::RPCDirectMessage* request, ::pb::empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendDirectMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::RPCDirectMessage,::pb::empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetHealth<WithStreamedUnaryMethod_UpsertSession<WithStreamedUnaryMethod_DeleteSession<WithStreamedUnaryMethod_GetSessionIdsByDetails<WithStreamedUnaryMethod_GetSessionIdsByPeerIds<WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_UpsertPeer<WithStreamedUnaryMethod_GetPeerIds<WithStreamedUnaryMethod_GetPeer<WithStreamedUnaryMethod_WritePeerFile<WithStreamedUnaryMethod_GetPeerFile<WithStreamedUnaryMethod_GetPublisherFile<WithStreamedUnaryMethod_SendDirectMessage<Service > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ReceiveDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ReceiveDirectMessage() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::SplitServerStreamingHandler< ::pb::empty, ::pb::RPCDirectMessage>(std::bind(&WithSplitStreamingMethod_ReceiveDirectMessage<BaseClass>::StreamedReceiveDirectMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ReceiveDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveDirectMessage(::grpc::ServerContext* context, const ::pb::empty* request, ::grpc::ServerWriter< ::pb::RPCDirectMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReceiveDirectMessage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::empty,::pb::RPCDirectMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ReceiveDirectMessage<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetHealth<WithStreamedUnaryMethod_UpsertSession<WithStreamedUnaryMethod_DeleteSession<WithStreamedUnaryMethod_GetSessionIdsByDetails<WithStreamedUnaryMethod_GetSessionIdsByPeerIds<WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_UpsertPeer<WithStreamedUnaryMethod_GetPeerIds<WithStreamedUnaryMethod_GetPeer<WithStreamedUnaryMethod_WritePeerFile<WithStreamedUnaryMethod_GetPeerFile<WithStreamedUnaryMethod_GetPublisherFile<WithStreamedUnaryMethod_SendDirectMessage<WithSplitStreamingMethod_ReceiveDirectMessage<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace pb


#endif  // GRPC_pb_2fplatform_2eproto__INCLUDED
