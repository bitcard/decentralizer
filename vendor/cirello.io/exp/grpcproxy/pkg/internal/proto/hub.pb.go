// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hub.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		hub.proto

	It has these top-level messages:
		Packet
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Packet_State int32

const (
	Packet_Flowing   Packet_State = 0
	Packet_Handshake Packet_State = 1
	Packet_Closed    Packet_State = 2
)

var Packet_State_name = map[int32]string{
	0: "Flowing",
	1: "Handshake",
	2: "Closed",
}
var Packet_State_value = map[string]int32{
	"Flowing":   0,
	"Handshake": 1,
	"Closed":    2,
}

func (x Packet_State) String() string {
	return proto1.EnumName(Packet_State_name, int32(x))
}
func (Packet_State) EnumDescriptor() ([]byte, []int) { return fileDescriptorHub, []int{0, 0} }

type Packet struct {
	ConnID        int64        `protobuf:"varint,1,opt,name=connID,proto3" json:"connID,omitempty"`
	TargetAddress string       `protobuf:"bytes,2,opt,name=targetAddress,proto3" json:"targetAddress,omitempty"`
	State         Packet_State `protobuf:"varint,3,opt,name=state,proto3,enum=proto.Packet_State" json:"state,omitempty"`
	Body          []byte       `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto1.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptorHub, []int{0} }

func (m *Packet) GetConnID() int64 {
	if m != nil {
		return m.ConnID
	}
	return 0
}

func (m *Packet) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

func (m *Packet) GetState() Packet_State {
	if m != nil {
		return m.State
	}
	return Packet_Flowing
}

func (m *Packet) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto1.RegisterType((*Packet)(nil), "proto.Packet")
	proto1.RegisterEnum("proto.Packet_State", Packet_State_name, Packet_State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hub service

type HubClient interface {
	Gateway(ctx context.Context, opts ...grpc.CallOption) (Hub_GatewayClient, error)
	Proxy(ctx context.Context, opts ...grpc.CallOption) (Hub_ProxyClient, error)
}

type hubClient struct {
	cc *grpc.ClientConn
}

func NewHubClient(cc *grpc.ClientConn) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) Gateway(ctx context.Context, opts ...grpc.CallOption) (Hub_GatewayClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[0], c.cc, "/proto.Hub/Gateway", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubGatewayClient{stream}
	return x, nil
}

type Hub_GatewayClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type hubGatewayClient struct {
	grpc.ClientStream
}

func (x *hubGatewayClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubGatewayClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubClient) Proxy(ctx context.Context, opts ...grpc.CallOption) (Hub_ProxyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[1], c.cc, "/proto.Hub/Proxy", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubProxyClient{stream}
	return x, nil
}

type Hub_ProxyClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type hubProxyClient struct {
	grpc.ClientStream
}

func (x *hubProxyClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubProxyClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Hub service

type HubServer interface {
	Gateway(Hub_GatewayServer) error
	Proxy(Hub_ProxyServer) error
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_Gateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubServer).Gateway(&hubGatewayServer{stream})
}

type Hub_GatewayServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type hubGatewayServer struct {
	grpc.ServerStream
}

func (x *hubGatewayServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubGatewayServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hub_Proxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubServer).Proxy(&hubProxyServer{stream})
}

type Hub_ProxyServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type hubProxyServer struct {
	grpc.ServerStream
}

func (x *hubProxyServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubProxyServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hub",
	HandlerType: (*HubServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Gateway",
			Handler:       _Hub_Gateway_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Proxy",
			Handler:       _Hub_Proxy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hub.proto",
}

func (m *Packet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Packet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHub(dAtA, i, uint64(m.ConnID))
	}
	if len(m.TargetAddress) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHub(dAtA, i, uint64(len(m.TargetAddress)))
		i += copy(dAtA[i:], m.TargetAddress)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHub(dAtA, i, uint64(m.State))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHub(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	return i, nil
}

func encodeVarintHub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Packet) Size() (n int) {
	var l int
	_ = l
	if m.ConnID != 0 {
		n += 1 + sovHub(uint64(m.ConnID))
	}
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovHub(uint64(m.State))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	return n
}

func sovHub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHub(x uint64) (n int) {
	return sovHub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Packet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Packet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Packet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnID", wireType)
			}
			m.ConnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (Packet_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHub   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("hub.proto", fileDescriptorHub) }

var fileDescriptorHub = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x28, 0x4d, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xdb, 0x18, 0xb9, 0xd8, 0x02, 0x12,
	0x93, 0xb3, 0x53, 0x4b, 0x84, 0xc4, 0xb8, 0xd8, 0x92, 0xf3, 0xf3, 0xf2, 0x3c, 0x5d, 0x24, 0x18,
	0x15, 0x18, 0x35, 0x98, 0x83, 0xa0, 0x3c, 0x21, 0x15, 0x2e, 0xde, 0x92, 0xc4, 0xa2, 0xf4, 0xd4,
	0x12, 0xc7, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0x62, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x54,
	0x41, 0x21, 0x4d, 0x2e, 0xd6, 0xe2, 0x92, 0xc4, 0x92, 0x54, 0x09, 0x66, 0x05, 0x46, 0x0d, 0x3e,
	0x23, 0x61, 0x88, 0x35, 0x7a, 0x10, 0xb3, 0xf5, 0x82, 0x41, 0x52, 0x41, 0x10, 0x15, 0x42, 0x42,
	0x5c, 0x2c, 0x49, 0xf9, 0x29, 0x95, 0x12, 0x2c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x60, 0xb6, 0x92,
	0x3e, 0x17, 0x2b, 0x58, 0x8d, 0x10, 0x37, 0x17, 0xbb, 0x5b, 0x4e, 0x7e, 0x79, 0x66, 0x5e, 0xba,
	0x00, 0x83, 0x10, 0x2f, 0x17, 0xa7, 0x47, 0x62, 0x5e, 0x4a, 0x71, 0x46, 0x62, 0x76, 0xaa, 0x00,
	0xa3, 0x10, 0x17, 0x17, 0x9b, 0x73, 0x4e, 0x7e, 0x71, 0x6a, 0x8a, 0x00, 0x93, 0x51, 0x22, 0x17,
	0xb3, 0x47, 0x69, 0x92, 0x90, 0x2e, 0x17, 0xbb, 0x7b, 0x62, 0x49, 0x6a, 0x79, 0x62, 0xa5, 0x10,
	0x2f, 0x8a, 0x95, 0x52, 0xa8, 0x5c, 0x25, 0x06, 0x0d, 0x46, 0x03, 0x46, 0x21, 0x6d, 0x2e, 0xd6,
	0x80, 0xa2, 0xfc, 0x0a, 0xa2, 0x14, 0x3b, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c,
	0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0x55, 0x19, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0x64, 0x22, 0xad, 0x48, 0x01, 0x00, 0x00,
}
